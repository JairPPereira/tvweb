{"version":3,"sources":["../../../../src/mss/MssFragmentMoovProcessor.js"],"names":["MssFragmentMoovProcessor","config","NALUTYPE_SPS","NALUTYPE_PPS","constants","ISOBoxer","protectionController","instance","period","adaptationSet","representation","contentProtection","timescale","trackId","createFtypBox","isoFile","ftyp","createBox","major_brand","minor_version","compatible_brands","createMoovBox","moov","createMvhdBox","trak","createTkhdBox","mdia","createMdhdBox","createHdlrBox","minf","type","VIDEO","createVmhdBox","AUDIO","createSmhdBox","dinf","createDrefBox","stbl","stts","createFullBox","_data","stsc","stco","stsz","createStsdBox","mvex","createTrexBox","supportedKS","getSupportedKeySystemsFromContentProtection","createProtectionSystemSpecificHeaderBox","mvhd","version","creation_time","modification_time","duration","Math","round","rate","volume","reserved1","reserved2","matrix","pre_defined","next_track_ID","tkhd","flags","track_ID","layer","alternate_group","reserved3","width","height","mdhd","language","lang","hdlr","handler_type","name","id","reserved","vmhd","graphicsmode","opcolor","smhd","balance","dref","entry_count","entries","url","location","push","stsd","createSampleEntry","length","codec","codecs","substring","indexOf","createAVCVisualSampleEntry","createMP4AudioSampleEntry","code","MssErrors","MSS_UNSUPPORTED_CODEC_CODE","message","MSS_UNSUPPORTED_CODEC_MESSAGE","data","avc1","data_reference_index","pre_defined1","pre_defined2","horizresolution","vertresolution","frame_count","compressorname","depth","pre_defined3","createAVC1ConfigurationRecord","sinf","createOriginalFormatBox","createSchemeTypeBox","createSchemeInformationBox","avcC","avcCLength","sps","pps","AVCProfileIndication","AVCLevelIndication","profile_compatibility","nalus","codecPrivateData","split","slice","naluBytes","naluType","i","hexStringtoBuffer","Uint8Array","set","n","mp4a","channelcount","audioChannels","samplesize","reserved_3","samplerate","audioSamplingRate","esds","createMPEG4AACESDescriptor","audioSpecificConfig","esdsLength","bandwidth","frma","data_format","stringToCharCode","schm","scheme_type","scheme_version","schi","createTrackEncryptionBox","keySystems","pssh_bytes","pssh","parsedBuffer","initData","parseBuffer","fetch","Utils","appendBox","tenc","default_IsEncrypted","default_IV_size","default_KID","trex","default_sample_description_index","default_sample_duration","default_sample_size","default_sample_flags","str","buf","parseInt","charCodeAt","generateMoov","rep","adaptation","arrayBuffer","index","mpd","manifest","Period_asArray","AdaptationSet_asArray","ContentProtection","SegmentTemplate","createFile","write","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"MssFragmentMoovProcessor.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n import MssErrors from './errors/MssErrors';\n\n/**\n * @module MssFragmentMoovProcessor\n * @ignore\n * @param {Object} config object\n */\nfunction MssFragmentMoovProcessor(config) {\n    config = config || {};\n    const NALUTYPE_SPS = 7;\n    const NALUTYPE_PPS = 8;\n    const constants = config.constants;\n    const ISOBoxer = config.ISOBoxer;\n\n    let protectionController = config.protectionController;\n    let instance,\n        period,\n        adaptationSet,\n        representation,\n        contentProtection,\n        timescale,\n        trackId;\n\n    function createFtypBox(isoFile) {\n        let ftyp = ISOBoxer.createBox('ftyp', isoFile);\n        ftyp.major_brand = 'iso6';\n        ftyp.minor_version = 1; // is an informative integer for the minor version of the major brand\n        ftyp.compatible_brands = []; //is a list, to the end of the box, of brands isom, iso6 and msdh\n        ftyp.compatible_brands[0] = 'isom'; // => decimal ASCII value for isom\n        ftyp.compatible_brands[1] = 'iso6'; // => decimal ASCII value for iso6\n        ftyp.compatible_brands[2] = 'msdh'; // => decimal ASCII value for msdh\n\n        return ftyp;\n    }\n\n    function createMoovBox(isoFile) {\n\n        // moov box\n        let moov = ISOBoxer.createBox('moov', isoFile);\n\n        // moov/mvhd\n        createMvhdBox(moov);\n\n        // moov/trak\n        let trak = ISOBoxer.createBox('trak', moov);\n\n        // moov/trak/tkhd\n        createTkhdBox(trak);\n\n        // moov/trak/mdia\n        let mdia = ISOBoxer.createBox('mdia', trak);\n\n        // moov/trak/mdia/mdhd\n        createMdhdBox(mdia);\n\n        // moov/trak/mdia/hdlr\n        createHdlrBox(mdia);\n\n        // moov/trak/mdia/minf\n        let minf = ISOBoxer.createBox('minf', mdia);\n\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n                // moov/trak/mdia/minf/vmhd\n                createVmhdBox(minf);\n                break;\n            case constants.AUDIO:\n                // moov/trak/mdia/minf/smhd\n                createSmhdBox(minf);\n                break;\n            default:\n                break;\n        }\n\n        // moov/trak/mdia/minf/dinf\n        let dinf = ISOBoxer.createBox('dinf', minf);\n\n        // moov/trak/mdia/minf/dinf/dref\n        createDrefBox(dinf);\n\n        // moov/trak/mdia/minf/stbl\n        let stbl = ISOBoxer.createBox('stbl', minf);\n\n        // Create empty stts, stsc, stco and stsz boxes\n        // Use data field as for codem-isoboxer unknown boxes for setting fields value\n\n        // moov/trak/mdia/minf/stbl/stts\n        let stts = ISOBoxer.createFullBox('stts', stbl);\n        stts._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsc\n        let stsc = ISOBoxer.createFullBox('stsc', stbl);\n        stsc._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stco\n        let stco = ISOBoxer.createFullBox('stco', stbl);\n        stco._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsz\n        let stsz = ISOBoxer.createFullBox('stsz', stbl);\n        stsz._data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, sample_size = 0, sample_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsd\n        createStsdBox(stbl);\n\n        // moov/mvex\n        let mvex = ISOBoxer.createBox('mvex', moov);\n\n        // moov/mvex/trex\n        createTrexBox(mvex);\n\n        if (contentProtection && protectionController) {\n            let supportedKS = protectionController.getSupportedKeySystemsFromContentProtection(contentProtection);\n            createProtectionSystemSpecificHeaderBox(moov, supportedKS);\n        }\n    }\n\n    function createMvhdBox(moov) {\n\n        let mvhd = ISOBoxer.createFullBox('mvhd', moov);\n\n        mvhd.version = 1; // version = 1  in order to have 64bits duration value\n\n        mvhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        mvhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        mvhd.timescale = timescale; // the time-scale for the entire presentation => 10000000 for MSS\n        mvhd.duration = Math.round(period.duration * timescale); // the length of the presentation (in the indicated timescale) =>  take duration of period\n        mvhd.rate = 1.0; // 16.16 number, '1.0' = normal playback\n        mvhd.volume = 1.0; // 8.8 number, '1.0' = full volume\n        mvhd.reserved1 = 0;\n        mvhd.reserved2 = [0x0, 0x0];\n        mvhd.matrix = [\n            1, 0, 0, // provides a transformation matrix for the video;\n            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)\n            0, 0, 16384\n        ];\n        mvhd.pre_defined = [0, 0, 0, 0, 0, 0];\n        mvhd.next_track_ID = trackId + 1; // indicates a value to use for the track ID of the next track to be added to this presentation\n\n        return mvhd;\n    }\n\n    function createTkhdBox(trak) {\n\n        let tkhd = ISOBoxer.createFullBox('tkhd', trak);\n\n        tkhd.version = 1; // version = 1  in order to have 64bits duration value\n        tkhd.flags = 0x1 | // Track_enabled (0x000001): Indicates that the track is enabled\n            0x2 | // Track_in_movie (0x000002):  Indicates that the track is used in the presentation\n            0x4; // Track_in_preview (0x000004):  Indicates that the track is used when previewing the presentation\n\n        tkhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        tkhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        tkhd.track_ID = trackId; // uniquely identifies this track over the entire life-time of this presentation\n        tkhd.reserved1 = 0;\n        tkhd.duration = Math.round(period.duration * timescale); // the duration of this track (in the timescale indicated in the Movie Header Box) =>  take duration of period\n        tkhd.reserved2 = [0x0, 0x0];\n        tkhd.layer = 0; // specifies the front-to-back ordering of video tracks; tracks with lower numbers are closer to the viewer => 0 since only one video track\n        tkhd.alternate_group = 0; // specifies a group or collection of tracks => ignore\n        tkhd.volume = 1.0; // '1.0' = full volume\n        tkhd.reserved3 = 0;\n        tkhd.matrix = [\n            1, 0, 0, // provides a transformation matrix for the video;\n            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)\n            0, 0, 16384\n        ];\n        tkhd.width = representation.width; // visual presentation width\n        tkhd.height = representation.height; // visual presentation height\n\n        return tkhd;\n    }\n\n    function createMdhdBox(mdia) {\n\n        let mdhd = ISOBoxer.createFullBox('mdhd', mdia);\n\n        mdhd.version = 1; // version = 1  in order to have 64bits duration value\n\n        mdhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        mdhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        mdhd.timescale = timescale; // the time-scale for the entire presentation\n        mdhd.duration = Math.round(period.duration * timescale); // the duration of this media (in the scale of the timescale). If the duration cannot be determined then duration is set to all 1s.\n        mdhd.language = adaptationSet.lang || 'und'; // declares the language code for this media (see getLanguageCode())\n        mdhd.pre_defined = 0;\n\n        return mdhd;\n    }\n\n    function createHdlrBox(mdia) {\n\n        let hdlr = ISOBoxer.createFullBox('hdlr', mdia);\n\n        hdlr.pre_defined = 0;\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n                hdlr.handler_type = 'vide';\n                break;\n            case constants.AUDIO:\n                hdlr.handler_type = 'soun';\n                break;\n            default:\n                hdlr.handler_type = 'meta';\n                break;\n        }\n        hdlr.name = representation.id;\n        hdlr.reserved = [0, 0, 0];\n\n        return hdlr;\n    }\n\n    function createVmhdBox(minf) {\n\n        let vmhd = ISOBoxer.createFullBox('vmhd', minf);\n\n        vmhd.flags = 1;\n\n        vmhd.graphicsmode = 0; // specifies a composition mode for this video track, from the following enumerated set, which may be extended by derived specifications: copy = 0 copy over the existing image\n        vmhd.opcolor = [0, 0, 0]; // is a set of 3 colour values (red, green, blue) available for use by graphics modes\n\n        return vmhd;\n    }\n\n    function createSmhdBox(minf) {\n\n        let smhd = ISOBoxer.createFullBox('smhd', minf);\n\n        smhd.flags = 1;\n\n        smhd.balance = 0; // is a fixed-point 8.8 number that places mono audio tracks in a stereo space; 0 is centre (the normal value); full left is -1.0 and full right is 1.0.\n        smhd.reserved = 0;\n\n        return smhd;\n    }\n\n    function createDrefBox(dinf) {\n\n        let dref = ISOBoxer.createFullBox('dref', dinf);\n\n        dref.entry_count = 1;\n        dref.entries = [];\n\n        let url = ISOBoxer.createFullBox('url ', dref, false);\n        url.location = '';\n        url.flags = 1;\n\n        dref.entries.push(url);\n\n        return dref;\n    }\n\n    function createStsdBox(stbl) {\n\n        let stsd = ISOBoxer.createFullBox('stsd', stbl);\n\n        stsd.entries = [];\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n            case constants.AUDIO:\n                stsd.entries.push(createSampleEntry(stsd));\n                break;\n            default:\n                break;\n        }\n\n        stsd.entry_count = stsd.entries.length; // is an integer that counts the actual entries\n        return stsd;\n    }\n\n    function createSampleEntry(stsd) {\n        let codec = representation.codecs.substring(0, representation.codecs.indexOf('.'));\n\n        switch (codec) {\n            case 'avc1':\n                return createAVCVisualSampleEntry(stsd, codec);\n            case 'mp4a':\n                return createMP4AudioSampleEntry(stsd, codec);\n            default:\n                throw {\n                    code: MssErrors.MSS_UNSUPPORTED_CODEC_CODE,\n                    message: MssErrors.MSS_UNSUPPORTED_CODEC_MESSAGE,\n                    data: {\n                        codec: codec\n                    }\n                };\n        }\n    }\n\n    function createAVCVisualSampleEntry(stsd, codec) {\n        let avc1;\n\n        if (contentProtection) {\n            avc1 = ISOBoxer.createBox('encv', stsd, false);\n        } else {\n            avc1 = ISOBoxer.createBox('avc1', stsd, false);\n        }\n\n        // SampleEntry fields\n        avc1.reserved1 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n        avc1.data_reference_index = 1;\n\n        // VisualSampleEntry fields\n        avc1.pre_defined1 = 0;\n        avc1.reserved2 = 0;\n        avc1.pre_defined2 = [0, 0, 0];\n        avc1.height = representation.height;\n        avc1.width = representation.width;\n        avc1.horizresolution = 72; // 72 dpi\n        avc1.vertresolution = 72; // 72 dpi\n        avc1.reserved3 = 0;\n        avc1.frame_count = 1; // 1 compressed video frame per sample\n        avc1.compressorname = [\n            0x0A, 0x41, 0x56, 0x43, 0x20, 0x43, 0x6F, 0x64, // = 'AVC Coding';\n            0x69, 0x6E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n        ];\n        avc1.depth = 0x0018; // 0x0018 – images are in colour with no alpha.\n        avc1.pre_defined3 = 65535;\n        avc1.config = createAVC1ConfigurationRecord();\n        if (contentProtection) {\n            // Create and add Protection Scheme Info Box\n            let sinf = ISOBoxer.createBox('sinf', avc1);\n\n            // Create and add Original Format Box => indicate codec type of the encrypted content\n            createOriginalFormatBox(sinf, codec);\n\n            // Create and add Scheme Type box\n            createSchemeTypeBox(sinf);\n\n            // Create and add Scheme Information Box\n            createSchemeInformationBox(sinf);\n        }\n\n        return avc1;\n    }\n\n    function createAVC1ConfigurationRecord() {\n\n        let avcC = null;\n        let avcCLength = 15; // length = 15 by default (0 SPS and 0 PPS)\n\n        // First get all SPS and PPS from codecPrivateData\n        let sps = [];\n        let pps = [];\n        let AVCProfileIndication = 0;\n        let AVCLevelIndication = 0;\n        let profile_compatibility = 0;\n\n        let nalus = representation.codecPrivateData.split('00000001').slice(1);\n        let naluBytes, naluType;\n\n        for (let i = 0; i < nalus.length; i++) {\n            naluBytes = hexStringtoBuffer(nalus[i]);\n\n            naluType = naluBytes[0] & 0x1F;\n\n            switch (naluType) {\n                case NALUTYPE_SPS:\n                    sps.push(naluBytes);\n                    avcCLength += naluBytes.length + 2; // 2 = sequenceParameterSetLength field length\n                    break;\n                case NALUTYPE_PPS:\n                    pps.push(naluBytes);\n                    avcCLength += naluBytes.length + 2; // 2 = pictureParameterSetLength field length\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        // Get profile and level from SPS\n        if (sps.length > 0) {\n            AVCProfileIndication = sps[0][1];\n            profile_compatibility = sps[0][2];\n            AVCLevelIndication = sps[0][3];\n        }\n\n        // Generate avcC buffer\n        avcC = new Uint8Array(avcCLength);\n\n        let i = 0;\n        // length\n        avcC[i++] = (avcCLength & 0xFF000000) >> 24;\n        avcC[i++] = (avcCLength & 0x00FF0000) >> 16;\n        avcC[i++] = (avcCLength & 0x0000FF00) >> 8;\n        avcC[i++] = (avcCLength & 0x000000FF);\n        avcC.set([0x61, 0x76, 0x63, 0x43], i); // type = 'avcC'\n        i += 4;\n        avcC[i++] = 1; // configurationVersion = 1\n        avcC[i++] = AVCProfileIndication;\n        avcC[i++] = profile_compatibility;\n        avcC[i++] = AVCLevelIndication;\n        avcC[i++] = 0xFF; // '11111' + lengthSizeMinusOne = 3\n        avcC[i++] = 0xE0 | sps.length; // '111' + numOfSequenceParameterSets\n        for (let n = 0; n < sps.length; n++) {\n            avcC[i++] = (sps[n].length & 0xFF00) >> 8;\n            avcC[i++] = (sps[n].length & 0x00FF);\n            avcC.set(sps[n], i);\n            i += sps[n].length;\n        }\n        avcC[i++] = pps.length; // numOfPictureParameterSets\n        for (let n = 0; n < pps.length; n++) {\n            avcC[i++] = (pps[n].length & 0xFF00) >> 8;\n            avcC[i++] = (pps[n].length & 0x00FF);\n            avcC.set(pps[n], i);\n            i += pps[n].length;\n        }\n\n        return avcC;\n    }\n\n    function createMP4AudioSampleEntry(stsd, codec) {\n        let mp4a;\n\n        if (contentProtection) {\n            mp4a = ISOBoxer.createBox('enca', stsd, false);\n        } else {\n            mp4a = ISOBoxer.createBox('mp4a', stsd, false);\n        }\n\n        // SampleEntry fields\n        mp4a.reserved1 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n        mp4a.data_reference_index = 1;\n\n        // AudioSampleEntry fields\n        mp4a.reserved2 = [0x0, 0x0];\n        mp4a.channelcount = representation.audioChannels;\n        mp4a.samplesize = 16;\n        mp4a.pre_defined = 0;\n        mp4a.reserved_3 = 0;\n        mp4a.samplerate = representation.audioSamplingRate << 16;\n\n        mp4a.esds = createMPEG4AACESDescriptor();\n\n        if (contentProtection) {\n            // Create and add Protection Scheme Info Box\n            let sinf = ISOBoxer.createBox('sinf', mp4a);\n\n            // Create and add Original Format Box => indicate codec type of the encrypted content\n            createOriginalFormatBox(sinf, codec);\n\n            // Create and add Scheme Type box\n            createSchemeTypeBox(sinf);\n\n            // Create and add Scheme Information Box\n            createSchemeInformationBox(sinf);\n        }\n\n        return mp4a;\n    }\n\n    function createMPEG4AACESDescriptor() {\n\n        // AudioSpecificConfig (see ISO/IEC 14496-3, subpart 1) => corresponds to hex bytes contained in 'codecPrivateData' field\n        let audioSpecificConfig = hexStringtoBuffer(representation.codecPrivateData);\n\n        // ESDS length = esds box header length (= 12) +\n        //               ES_Descriptor header length (= 5) +\n        //               DecoderConfigDescriptor header length (= 15) +\n        //               decoderSpecificInfo header length (= 2) +\n        //               AudioSpecificConfig length (= codecPrivateData length)\n        let esdsLength = 34 + audioSpecificConfig.length;\n        let esds = new Uint8Array(esdsLength);\n\n        let i = 0;\n        // esds box\n        esds[i++] = (esdsLength & 0xFF000000) >> 24; // esds box length\n        esds[i++] = (esdsLength & 0x00FF0000) >> 16; // ''\n        esds[i++] = (esdsLength & 0x0000FF00) >> 8; // ''\n        esds[i++] = (esdsLength & 0x000000FF); // ''\n        esds.set([0x65, 0x73, 0x64, 0x73], i); // type = 'esds'\n        i += 4;\n        esds.set([0, 0, 0, 0], i); // version = 0, flags = 0\n        i += 4;\n        // ES_Descriptor (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x03; // tag = 0x03 (ES_DescrTag)\n        esds[i++] = 20 + audioSpecificConfig.length; // size\n        esds[i++] = (trackId & 0xFF00) >> 8; // ES_ID = track_id\n        esds[i++] = (trackId & 0x00FF); // ''\n        esds[i++] = 0; // flags and streamPriority\n\n        // DecoderConfigDescriptor (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x04; // tag = 0x04 (DecoderConfigDescrTag)\n        esds[i++] = 15 + audioSpecificConfig.length; // size\n        esds[i++] = 0x40; // objectTypeIndication = 0x40 (MPEG-4 AAC)\n        esds[i] = 0x05 << 2; // streamType = 0x05 (Audiostream)\n        esds[i] |= 0 << 1; // upStream = 0\n        esds[i++] |= 1; // reserved = 1\n        esds[i++] = 0xFF; // buffersizeDB = undefined\n        esds[i++] = 0xFF; // ''\n        esds[i++] = 0xFF; // ''\n        esds[i++] = (representation.bandwidth & 0xFF000000) >> 24; // maxBitrate\n        esds[i++] = (representation.bandwidth & 0x00FF0000) >> 16; // ''\n        esds[i++] = (representation.bandwidth & 0x0000FF00) >> 8; // ''\n        esds[i++] = (representation.bandwidth & 0x000000FF); // ''\n        esds[i++] = (representation.bandwidth & 0xFF000000) >> 24; // avgbitrate\n        esds[i++] = (representation.bandwidth & 0x00FF0000) >> 16; // ''\n        esds[i++] = (representation.bandwidth & 0x0000FF00) >> 8; // ''\n        esds[i++] = (representation.bandwidth & 0x000000FF); // ''\n\n        // DecoderSpecificInfo (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x05; // tag = 0x05 (DecSpecificInfoTag)\n        esds[i++] = audioSpecificConfig.length; // size\n        esds.set(audioSpecificConfig, i); // AudioSpecificConfig bytes\n\n        return esds;\n    }\n\n    function createOriginalFormatBox(sinf, codec) {\n        let frma = ISOBoxer.createBox('frma', sinf);\n        frma.data_format = stringToCharCode(codec);\n    }\n\n    function createSchemeTypeBox(sinf) {\n        let schm = ISOBoxer.createFullBox('schm', sinf);\n\n        schm.flags = 0;\n        schm.version = 0;\n        schm.scheme_type = 0x63656E63; // 'cenc' => common encryption\n        schm.scheme_version = 0x00010000; // version set to 0x00010000 (Major version 1, Minor version 0)\n    }\n\n    function createSchemeInformationBox(sinf) {\n        let schi = ISOBoxer.createBox('schi', sinf);\n\n        // Create and add Track Encryption Box\n        createTrackEncryptionBox(schi);\n    }\n\n    function createProtectionSystemSpecificHeaderBox(moov, keySystems) {\n        let pssh_bytes,\n            pssh,\n            i,\n            parsedBuffer;\n\n        for (i = 0; i < keySystems.length; i += 1) {\n            pssh_bytes = keySystems[i].initData;\n            if (pssh_bytes) {\n                parsedBuffer = ISOBoxer.parseBuffer(pssh_bytes);\n                pssh = parsedBuffer.fetch('pssh');\n                if (pssh) {\n                    ISOBoxer.Utils.appendBox(moov, pssh);\n                }\n            }\n        }\n    }\n\n    function createTrackEncryptionBox(schi) {\n        let tenc = ISOBoxer.createFullBox('tenc', schi);\n\n        tenc.flags = 0;\n        tenc.version = 0;\n\n        tenc.default_IsEncrypted = 0x1;\n        tenc.default_IV_size = 8;\n        tenc.default_KID = (contentProtection && (contentProtection.length) > 0 && contentProtection[0]['cenc:default_KID']) ?\n            contentProtection[0]['cenc:default_KID'] : [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n    }\n\n    function createTrexBox(moov) {\n        let trex = ISOBoxer.createFullBox('trex', moov);\n\n        trex.track_ID = trackId;\n        trex.default_sample_description_index = 1;\n        trex.default_sample_duration = 0;\n        trex.default_sample_size = 0;\n        trex.default_sample_flags = 0;\n\n        return trex;\n    }\n\n    function hexStringtoBuffer(str) {\n        let buf = new Uint8Array(str.length / 2);\n        let i;\n\n        for (i = 0; i < str.length / 2; i += 1) {\n            buf[i] = parseInt('' + str[i * 2] + str[i * 2 + 1], 16);\n        }\n        return buf;\n    }\n\n    function stringToCharCode(str) {\n        let code = 0;\n        let i;\n\n        for (i = 0; i < str.length; i += 1) {\n            code |= str.charCodeAt(i) << ((str.length - i - 1) * 8);\n        }\n        return code;\n    }\n\n    function generateMoov(rep) {\n        if (!rep || !rep.adaptation) {\n            return;\n        }\n\n        let isoFile,\n            arrayBuffer;\n\n        representation = rep;\n        adaptationSet = representation.adaptation;\n\n        period = adaptationSet.period;\n        trackId = adaptationSet.index + 1;\n        contentProtection = period.mpd.manifest.Period_asArray[period.index].AdaptationSet_asArray[adaptationSet.index].ContentProtection;\n\n        timescale = period.mpd.manifest.Period_asArray[period.index].AdaptationSet_asArray[adaptationSet.index].SegmentTemplate.timescale;\n\n        isoFile = ISOBoxer.createFile();\n        createFtypBox(isoFile);\n        createMoovBox(isoFile);\n\n        arrayBuffer = isoFile.write();\n\n        return arrayBuffer;\n    }\n\n    instance = {\n        generateMoov: generateMoov\n    };\n\n    return instance;\n}\n\nMssFragmentMoovProcessor.__dashjs_factory_name = 'MssFragmentMoovProcessor';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentMoovProcessor); /* jshint ignore:line */\n"]}