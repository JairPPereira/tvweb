{"version":3,"sources":["../../../../src/mss/MssHandler.js"],"names":["MssHandler","config","context","eventBus","events","constants","initSegmentType","dashMetrics","playbackController","protectionController","mssFragmentProcessor","create","ISOBoxer","debug","errHandler","mssParser","instance","setup","onInitializationRequested","e","streamProcessor","sender","getStreamProcessor","request","FragmentRequest","representationController","getRepresentationController","representation","getCurrentRepresentation","mediaType","adaptation","type","range","quality","index","mediaInfo","getMediaInfo","representationId","id","chunk","createDataChunk","getStreamInfo","FRAGMENT_LOADING_PROGRESS","bytes","generateMoov","error","DashJSError","code","message","data","trigger","INIT_FRAGMENT_LOADED","fragmentModel","getFragmentModel","streamId","endFragment","DataChunk","segmentType","start","startTime","duration","end","startFragmentInfoControllers","streamController","getStreamController","processors","getActiveStreamProcessors","forEach","processor","getType","VIDEO","AUDIO","FRAGMENTED_TEXT","i","alreadyRegistered","externalControllers","getExternalControllers","length","controllerType","fragmentInfoController","baseURLController","initialize","onSegmentMediaLoaded","processFragment","streamInfo","manifestInfo","isDynamic","DVRWindowSize","Infinity","onPlaybackPaused","getIsDynamic","getTime","onPlaybackSeekAsked","onTTMLPreProcess","ttmlSubtitles","replace","registerEvents","on","INIT_REQUESTED","dashjs","FactoryMaker","getSingletonFactoryByName","getClassName","EVENT_PRIORITY_HIGH","PLAYBACK_PAUSED","PLAYBACK_SEEK_ASKED","FRAGMENT_LOADING_COMPLETED","TTML_TO_PARSE","reset","off","createMssParser","__dashjs_factory_name","factory","getClassFactory","errors","MssErrors","updateClassFactory"],"mappings":"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","file":"MssHandler.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DataChunk from '../streaming/vo/DataChunk';\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\nimport MssFragmentInfoController from './MssFragmentInfoController';\nimport MssFragmentProcessor from './MssFragmentProcessor';\nimport MssParser from './parser/MssParser';\nimport MssErrors from './errors/MssErrors';\nimport DashJSError from '../streaming/vo/DashJSError';\n\nfunction MssHandler(config) {\n\n    config = config || {};\n    let context = this.context;\n    let eventBus = config.eventBus;\n    const events = config.events;\n    const constants = config.constants;\n    const initSegmentType = config.initSegmentType;\n    let dashMetrics = config.dashMetrics;\n    let playbackController = config.playbackController;\n    let protectionController = config.protectionController;\n    let mssFragmentProcessor = MssFragmentProcessor(context).create({\n        dashMetrics: dashMetrics,\n        playbackController: playbackController,\n        protectionController: protectionController,\n        eventBus: eventBus,\n        constants: constants,\n        ISOBoxer: config.ISOBoxer,\n        debug: config.debug,\n        errHandler: config.errHandler\n    });\n    let mssParser,\n        instance;\n\n    function setup() {}\n\n    function onInitializationRequested(e) {\n        let streamProcessor = e.sender.getStreamProcessor();\n        let request = new FragmentRequest();\n        let representationController = streamProcessor.getRepresentationController();\n        let representation = representationController.getCurrentRepresentation();\n\n        request.mediaType = representation.adaptation.type;\n        request.type = initSegmentType;\n        request.range = representation.range;\n        request.quality = representation.index;\n        request.mediaInfo = streamProcessor.getMediaInfo();\n        request.representationId = representation.id;\n\n        const chunk = createDataChunk(request, streamProcessor.getStreamInfo().id, e.type !== events.FRAGMENT_LOADING_PROGRESS);\n\n        try {\n            // Generate initialization segment (moov)\n            chunk.bytes = mssFragmentProcessor.generateMoov(representation);\n        } catch (e) {\n            config.errHandler.error(new DashJSError(e.code, e.message, e.data));\n        }\n\n        eventBus.trigger(events.INIT_FRAGMENT_LOADED, {\n            chunk: chunk,\n            fragmentModel: streamProcessor.getFragmentModel()\n        });\n\n        // Change the sender value to stop event to be propagated\n        e.sender = null;\n    }\n\n    function createDataChunk(request, streamId, endFragment) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n        chunk.representationId = request.representationId;\n        chunk.endFragment = endFragment;\n\n        return chunk;\n    }\n\n    function startFragmentInfoControllers() {\n\n        let streamController = playbackController.getStreamController();\n        if (!streamController) {\n            return;\n        }\n\n        // Create MssFragmentInfoControllers for each StreamProcessor of active stream (only for audio, video or fragmentedText)\n        let processors = streamController.getActiveStreamProcessors();\n        processors.forEach(function (processor) {\n            if (processor.getType() === constants.VIDEO ||\n                processor.getType() === constants.AUDIO ||\n                processor.getType() === constants.FRAGMENTED_TEXT) {\n\n                // Check MssFragmentInfoController already registered to StreamProcessor\n                let i;\n                let alreadyRegistered = false;\n                let externalControllers = processor.getExternalControllers();\n                for (i = 0; i < externalControllers.length; i++) {\n                    if (externalControllers[i].controllerType &&\n                        externalControllers[i].controllerType === 'MssFragmentInfoController') {\n                        alreadyRegistered = true;\n                    }\n                }\n\n                if (!alreadyRegistered) {\n                    let fragmentInfoController = MssFragmentInfoController(context).create({\n                        streamProcessor: processor,\n                        eventBus: eventBus,\n                        dashMetrics: dashMetrics,\n                        playbackController: playbackController,\n                        baseURLController: config.baseURLController,\n                        ISOBoxer: config.ISOBoxer,\n                        debug: config.debug\n                    });\n                    fragmentInfoController.initialize();\n                    fragmentInfoController.start();\n                }\n            }\n        });\n    }\n\n    function onSegmentMediaLoaded(e) {\n        if (e.error) {\n            return;\n        }\n        // Process moof to transcode it from MSS to DASH\n        let streamProcessor = e.sender.getStreamProcessor();\n        mssFragmentProcessor.processFragment(e, streamProcessor);\n\n        // Start MssFragmentInfoControllers in case of start-over streams\n        let streamInfo = streamProcessor.getStreamInfo();\n        if (!streamInfo.manifestInfo.isDynamic && streamInfo.manifestInfo.DVRWindowSize !== Infinity) {\n            startFragmentInfoControllers();\n        }\n    }\n\n    function onPlaybackPaused() {\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\n            startFragmentInfoControllers();\n        }\n    }\n\n    function onPlaybackSeekAsked() {\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\n            startFragmentInfoControllers();\n        }\n    }\n\n    function onTTMLPreProcess(ttmlSubtitles) {\n        if (!ttmlSubtitles || !ttmlSubtitles.data) {\n            return;\n        }\n\n        ttmlSubtitles.data = ttmlSubtitles.data.replace(/http:\\/\\/www.w3.org\\/2006\\/10\\/ttaf1/gi, 'http://www.w3.org/ns/ttml');\n    }\n\n    function registerEvents() {\n        eventBus.on(events.INIT_REQUESTED, onInitializationRequested, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.PLAYBACK_PAUSED, onPlaybackPaused, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.TTML_TO_PARSE, onTTMLPreProcess, instance);\n    }\n\n    function reset() {\n        eventBus.off(events.INIT_REQUESTED, onInitializationRequested, this);\n        eventBus.off(events.PLAYBACK_PAUSED, onPlaybackPaused, this);\n        eventBus.off(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, this);\n        eventBus.off(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, this);\n        eventBus.off(events.TTML_TO_PARSE, onTTMLPreProcess, this);\n    }\n\n    function createMssParser() {\n        mssParser = MssParser(context).create(config);\n        return mssParser;\n    }\n\n    instance = {\n        reset: reset,\n        createMssParser: createMssParser,\n        registerEvents: registerEvents\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssHandler.__dashjs_factory_name = 'MssHandler';\nconst factory = dashjs.FactoryMaker.getClassFactory(MssHandler); /* jshint ignore:line */\nfactory.errors = MssErrors;\ndashjs.FactoryMaker.updateClassFactory(MssHandler.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory; /* jshint ignore:line */\n"]}