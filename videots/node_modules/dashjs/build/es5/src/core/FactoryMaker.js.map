{"version":3,"sources":["../../../../src/core/FactoryMaker.js"],"names":["FactoryMaker","instance","singletonContexts","singletonFactories","classFactories","extend","name","childInstance","override","context","getSingletonInstance","className","i","obj","setSingletonInstance","push","getFactoryByName","factoriesArray","updateFactory","factory","updateClassFactory","getClassFactoryByName","getClassFactory","classConstructor","__dashjs_factory_name","undefined","create","merge","arguments","updateSingletonFactory","getSingletonFactoryByName","getSingletonFactory","getInstance","args","classInstance","extensionObject","extension","apply","parent","prop","hasOwnProperty","getClassName"],"mappings":"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","file":"FactoryMaker.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @module FactoryMaker\n * @ignore\n */\nconst FactoryMaker = (function () {\n\n    let instance;\n    const singletonContexts = [];\n    const singletonFactories = {};\n    const classFactories = {};\n\n    function extend(name, childInstance, override, context) {\n        if (!context[name] && childInstance) {\n            context[name] = {\n                instance: childInstance,\n                override: override\n            };\n        }\n    }\n\n    /**\n     * Use this method from your extended object.  this.factory is injected into your object.\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\n     * will return the video model for use in the extended object.\n     *\n     * @param {Object} context - injected into extended object as this.context\n     * @param {string} className - string name found in all dash.js objects\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n     * @returns {*} Context aware instance of specified singleton name.\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function getSingletonInstance(context, className) {\n        for (const i in singletonContexts) {\n            const obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                return obj.instance;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n     *\n     * @param {Object} context\n     * @param {string} className\n     * @param {Object} instance\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function setSingletonInstance(context, className, instance) {\n        for (const i in singletonContexts) {\n            const obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                singletonContexts[i].instance = instance;\n                return;\n            }\n        }\n        singletonContexts.push({\n            name: className,\n            context: context,\n            instance: instance\n        });\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Factories storage Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function getFactoryByName(name, factoriesArray) {\n        return factoriesArray[name];\n    }\n\n    function updateFactory(name, factory, factoriesArray) {\n        if (name in factoriesArray) {\n            factoriesArray[name] = factory;\n        }\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Class Factories Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateClassFactory(name, factory) {\n        updateFactory(name, factory, classFactories);\n    }\n\n    function getClassFactoryByName(name) {\n        return getFactoryByName(name, classFactories);\n    }\n\n    function getClassFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\n\n        if (!factory) {\n            factory = function (context) {\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    create: function () {\n                        return merge(classConstructor, context, arguments);\n                    }\n                };\n            };\n\n            classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n        }\n        return factory;\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Singleton Factory MAangement\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateSingletonFactory(name, factory) {\n        updateFactory(name, factory, singletonFactories);\n    }\n\n    function getSingletonFactoryByName(name) {\n        return getFactoryByName(name, singletonFactories);\n    }\n\n    function getSingletonFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\n        if (!factory) {\n            factory = function (context) {\n                let instance;\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    getInstance: function () {\n                        // If we don't have an instance yet check for one on the context\n                        if (!instance) {\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n                        }\n                        // If there's no instance on the context then create one\n                        if (!instance) {\n                            instance = merge(classConstructor, context, arguments);\n                            singletonContexts.push({\n                                name: classConstructor.__dashjs_factory_name,\n                                context: context,\n                                instance: instance\n                            });\n                        }\n                        return instance;\n                    }\n                };\n            };\n            singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n        }\n\n        return factory;\n    }\n\n    function merge(classConstructor, context, args) {\n\n        let classInstance;\n        const className = classConstructor.__dashjs_factory_name;\n        const extensionObject = context[className];\n\n        if (extensionObject) {\n\n            let extension = extensionObject.instance;\n\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\n\n                classInstance = classConstructor.apply({context}, args);\n                extension = extension.apply({\n                    context,\n                    factory: instance,\n                    parent: classInstance\n                }, args);\n\n                for (const prop in extension) {\n                    if (classInstance.hasOwnProperty(prop)) {\n                        classInstance[prop] = extension[prop];\n                    }\n                }\n\n            } else { //replace parent object completely with new object. Same as dijon.\n\n                return extension.apply({\n                    context,\n                    factory: instance\n                }, args);\n\n            }\n        } else {\n            // Create new instance of the class\n            classInstance = classConstructor.apply({context}, args);\n        }\n\n        // Add getClassName function to class instance prototype (used by Debug)\n        classInstance.getClassName = function () {return className;};\n\n        return classInstance;\n    }\n\n    instance = {\n        extend: extend,\n        getSingletonInstance: getSingletonInstance,\n        setSingletonInstance: setSingletonInstance,\n        getSingletonFactory: getSingletonFactory,\n        getSingletonFactoryByName: getSingletonFactoryByName,\n        updateSingletonFactory: updateSingletonFactory,\n        getClassFactory: getClassFactory,\n        getClassFactoryByName: getClassFactoryByName,\n        updateClassFactory: updateClassFactory\n    };\n\n    return instance;\n\n}());\n\nexport default FactoryMaker;\n"]}