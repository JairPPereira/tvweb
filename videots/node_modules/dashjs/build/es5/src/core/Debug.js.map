{"version":3,"sources":["../../../../src/core/Debug.js"],"names":["LOG_LEVEL_NONE","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARNING","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG","Debug","config","context","eventBus","getInstance","settings","logFn","instance","showLogTimestamp","showCalleeName","startTime","setup","Date","getTime","window","console","getLogFn","error","warn","info","debug","fn","bind","log","getLogger","fatal","setLogTimestampVisible","value","setCalleeNameVisible","params","doLog","level","_this","message","logTime","getClassName","getType","length","Array","apply","forEach","item","get","logLevel","trigger","Events","LOG","__dashjs_factory_name","factory","FactoryMaker","getSingletonFactory","updateSingletonFactory"],"mappings":"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","file":"Debug.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from './EventBus';\nimport Events from './events/Events';\nimport FactoryMaker from './FactoryMaker';\n\nconst LOG_LEVEL_NONE = 0;\nconst LOG_LEVEL_FATAL = 1;\nconst LOG_LEVEL_ERROR = 2;\nconst LOG_LEVEL_WARNING = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DEBUG = 5;\n\n/**\n * @module Debug\n * @param {object} config\n * @ignore\n */\nfunction Debug(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const settings = config.settings;\n\n    const logFn = [];\n\n    let instance,\n        showLogTimestamp,\n        showCalleeName,\n        startTime;\n\n    function setup() {\n        showLogTimestamp = true;\n        showCalleeName = true;\n        startTime = new Date().getTime();\n\n        if (typeof window !== 'undefined' && window.console) {\n            logFn[LOG_LEVEL_FATAL] = getLogFn(window.console.error);\n            logFn[LOG_LEVEL_ERROR] = getLogFn(window.console.error);\n            logFn[LOG_LEVEL_WARNING] = getLogFn(window.console.warn);\n            logFn[LOG_LEVEL_INFO] = getLogFn(window.console.info);\n            logFn[LOG_LEVEL_DEBUG] = getLogFn(window.console.debug);\n        }\n    }\n\n    function getLogFn(fn) {\n        if (fn && fn.bind) {\n            return fn.bind(window.console);\n        }\n        // if not define, return the default function for reporting logs\n        return window.console.log.bind(window.console);\n    }\n\n    /**\n     * Retrieves a logger which can be used to write logging information in browser console.\n     * @param {object} instance Object for which the logger is created. It is used\n     * to include calle object information in log messages.\n     * @memberof module:Debug\n     * @returns {Logger}\n     * @instance\n     */\n    function getLogger(instance) {\n        return {\n            fatal: fatal.bind(instance),\n            error: error.bind(instance),\n            warn: warn.bind(instance),\n            info: info.bind(instance),\n            debug: debug.bind(instance)\n        };\n    }\n\n    /**\n     * Prepends a timestamp in milliseconds to each log message.\n     * @param {boolean} value Set to true if you want to see a timestamp in each log message.\n     * @default LOG_LEVEL_WARNING\n     * @memberof module:Debug\n     * @instance\n     */\n    function setLogTimestampVisible(value) {\n        showLogTimestamp = value;\n    }\n    /**\n     * Prepends the callee object name, and media type if available, to each log message.\n     * @param {boolean} value Set to true if you want to see the callee object name and media type in each log message.\n     * @default true\n     * @memberof module:Debug\n     * @instance\n     */\n    function setCalleeNameVisible(value) {\n        showCalleeName = value;\n    }\n\n    function fatal(...params) {\n        doLog(LOG_LEVEL_FATAL, this, ...params);\n    }\n\n    function error(...params) {\n        doLog(LOG_LEVEL_ERROR, this, ...params);\n    }\n\n    function warn(...params) {\n        doLog(LOG_LEVEL_WARNING, this, ...params);\n    }\n\n    function info(...params) {\n        doLog(LOG_LEVEL_INFO, this, ...params);\n    }\n\n    function debug(...params) {\n        doLog(LOG_LEVEL_DEBUG, this, ...params);\n    }\n\n    function doLog(level, _this, ...params) {\n        let message = '';\n        let logTime = null;\n\n        if (showLogTimestamp) {\n            logTime = new Date().getTime();\n            message += '[' + (logTime - startTime) + ']';\n        }\n\n        if (showCalleeName && _this && _this.getClassName) {\n            message += '[' + _this.getClassName() + ']';\n            if (_this.getType) {\n                message += '[' + _this.getType() + ']';\n            }\n        }\n\n        if (message.length > 0) {\n            message += ' ';\n        }\n\n        Array.apply(null, params).forEach(function (item) {\n            message += item + ' ';\n        });\n\n        // log to console if the log level is high enough\n        if (logFn[level] && settings.get().debug.logLevel >= level) {\n            logFn[level](message);\n        }\n\n        // send log event regardless of log level\n        eventBus.trigger(Events.LOG, {message: message, level: level});\n    }\n\n    instance = {\n        getLogger: getLogger,\n        setLogTimestampVisible: setLogTimestampVisible,\n        setCalleeNameVisible: setCalleeNameVisible\n    };\n\n    setup();\n\n    return instance;\n}\n\nDebug.__dashjs_factory_name = 'Debug';\n\nconst factory = FactoryMaker.getSingletonFactory(Debug);\nfactory.LOG_LEVEL_NONE = LOG_LEVEL_NONE;\nfactory.LOG_LEVEL_FATAL = LOG_LEVEL_FATAL;\nfactory.LOG_LEVEL_ERROR = LOG_LEVEL_ERROR;\nfactory.LOG_LEVEL_WARNING = LOG_LEVEL_WARNING;\nfactory.LOG_LEVEL_INFO = LOG_LEVEL_INFO;\nfactory.LOG_LEVEL_DEBUG = LOG_LEVEL_DEBUG;\nFactoryMaker.updateSingletonFactory(Debug.__dashjs_factory_name, factory);\nexport default factory;\n"]}