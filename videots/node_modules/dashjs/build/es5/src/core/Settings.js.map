{"version":3,"sources":["../../../../src/core/Settings.js"],"names":["Settings","instance","defaultSettings","debug","logLevel","Debug","LOG_LEVEL_WARNING","streaming","metricsMaxListDepth","abandonLoadTimeout","liveDelayFragmentCount","liveDelay","scheduleWhilePaused","fastSwitchEnabled","bufferPruningInterval","bufferToKeep","bufferAheadToKeep","jumpGaps","smallGapLimit","stableBufferTime","bufferTimeAtTopQuality","bufferTimeAtTopQualityLongForm","longFormContentDurationThreshold","wallclockTimeUpdateInterval","lowLatencyEnabled","keepProtectionMediaKeys","useManifestDateHeaderTimeSource","useSuggestedPresentationDelay","useAppendWindowEnd","manifestUpdateRetryInterval","liveCatchUpMinDrift","liveCatchUpMaxDrift","liveCatchUpPlaybackRate","lastBitrateCachingInfo","enabled","ttl","lastMediaSettingsCachingInfo","cacheLoadThresholds","video","audio","retryIntervals","HTTPRequest","MPD_TYPE","XLINK_EXPANSION_TYPE","MEDIA_SEGMENT_TYPE","INIT_SEGMENT_TYPE","BITSTREAM_SWITCHING_SEGMENT_TYPE","INDEX_SEGMENT_TYPE","OTHER_TYPE","retryAttempts","abr","movingAverageMethod","Constants","MOVING_AVERAGE_SLIDING_WINDOW","ABRStrategy","ABR_STRATEGY_DYNAMIC","bandwidthSafetyFactor","useDefaultABRRules","useBufferOccupancyABR","useDeadTimeLatency","limitBitrateByPortal","usePixelRatioInLimitBitrateByPortal","maxBitrate","minBitrate","maxRepresentationRatio","initialBitrate","initialRepresentationRatio","autoSwitchBitrate","cmcd","sid","cid","did","settings","Utils","clone","mixinSettings","source","dest","path","n","hasOwnProperty","slice","get","update","settingsObj","reset","__dashjs_factory_name","factory","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"Settings.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from './FactoryMaker';\nimport Utils from './Utils.js';\nimport Debug from '../core/Debug';\nimport Constants from '../streaming/constants/Constants';\nimport {HTTPRequest} from '../streaming/vo/metrics/HTTPRequest';\n\n/** @module Settings\n * @description Define the configuration parameters of Dash.js MediaPlayer.\n * @see {@link module:Settings~PlayerSettings PlayerSettings} for further information about the supported configuration properties\n */\n\n\n/**\n * @typedef {Object} PlayerSettings\n * @property {module:Settings~DebugSettings} [debug] Debug related settings\n * @property {module:Settings~StreamingSettings} [streaming] Streaming related settings\n * @example\n *\n * // Full settings object\n * settings = {\n *      debug: {\n *          logLevel: Debug.LOG_LEVEL_WARNING\n *      },\n *      streaming: {\n *          metricsMaxListDepth: 1000,\n *          abandonLoadTimeout: 10000,\n *          liveDelayFragmentCount: 4,\n *          liveDelay: null,\n *          scheduleWhilePaused: true,\n *          fastSwitchEnabled: false,\n *          bufferPruningInterval: 10,\n *          bufferToKeep: 20,\n *          bufferAheadToKeep: 80,\n *          jumpGaps: true,\n *          smallGapLimit: 1.5,\n *          stableBufferTime: 12,\n *          bufferTimeAtTopQuality: 30,\n *          bufferTimeAtTopQualityLongForm: 60,\n *          longFormContentDurationThreshold: 600,\n *          wallclockTimeUpdateInterval: 50,\n *          lowLatencyEnabled: false,\n *          keepProtectionMediaKeys: false,\n *          useManifestDateHeaderTimeSource: true,\n *          useSuggestedPresentationDelay: false,\n *          useAppendWindowEnd: true,\n *          manifestUpdateRetryInterval: 100,\n *          liveCatchUpMinDrift: 0.02,\n *          liveCatchUpMaxDrift: 0,\n *          liveCatchUpPlaybackRate: 0.5,\n *          lastBitrateCachingInfo: { enabled: true, ttl: 360000 },\n *          lastMediaSettingsCachingInfo: { enabled: true, ttl: 360000 },\n *          cacheLoadThresholds: { video: 50, audio: 5 },\n *          retryIntervals: {\n *              MPD: 500,\n *              XLinkExpansion: 500,\n *              InitializationSegment: 1000,\n *              IndexSegment: 1000,\n *              MediaSegment: 1000,\n *              BitstreamSwitchingSegment: 1000,\n *              other: 1000\n *          },\n *          retryAttempts: {\n *              MPD: 3,\n *              XLinkExpansion: 1,\n *              InitializationSegment: 3,\n *              IndexSegment: 3,\n *              MediaSegment: 3,\n *              BitstreamSwitchingSegment: 3,\n *              other: 3\n *          },\n *          abr: {\n *              movingAverageMethod: Constants.MOVING_AVERAGE_SLIDING_WINDOW,\n *              ABRStrategy: Constants.ABR_STRATEGY_DYNAMIC,\n *              bandwidthSafetyFactor: 0.9,\n *              useDefaultABRRules: true,\n *              useBufferOccupancyABR: false,\n *              useDeadTimeLatency: true,\n *              limitBitrateByPortal: false,\n *              usePixelRatioInLimitBitrateByPortal: false,\n *              maxBitrate: { audio: -1, video: -1 },\n *              minBitrate: { audio: -1, video: -1 },\n *              maxRepresentationRatio: { audio: 1, video: 1 },\n *              initialBitrate: { audio: -1, video: -1 },\n *              initialRepresentationRatio: { audio: -1, video: -1 },\n *              autoSwitchBitrate: { audio: true, video: true }\n *          },\n *          cmcd: {\n *              enabled: false,\n *              sid: null,\n *              cid: null,\n *              did: null\n *          }\n *      }\n * }\n */\n\n\n/**\n * @typedef {Object} DebugSettings\n * @property {number} [logLevel=dashjs.Debug.LOG_LEVEL_WARNING]\n * Sets up the log level. The levels are cumulative. For example, if you set the log level\n * to dashjs.Debug.LOG_LEVEL_WARNING all warnings, errors and fatals will be logged. Possible values.\n *\n * <ul>\n * <li>dashjs.Debug.LOG_LEVEL_NONE<br/>\n * No message is written in the browser console.\n *\n * <li>dashjs.Debug.LOG_LEVEL_FATAL<br/>\n * Log fatal errors. An error is considered fatal when it causes playback to fail completely.\n *\n * <li>dashjs.Debug.LOG_LEVEL_ERROR<br/>\n * Log error messages.\n *\n * <li>dashjs.Debug.LOG_LEVEL_WARNING<br/>\n * Log warning messages.\n *\n * <li>dashjs.Debug.LOG_LEVEL_INFO<br/>\n * Log info messages.\n *\n * <li>dashjs.Debug.LOG_LEVEL_DEBUG<br/>\n * Log debug messages.\n * </ul>\n */\n\n/**\n * @typedef {Object} AbrSettings\n * @property {string} [movingAverageMethod=\"slidingWindow\"]\n * Sets the moving average method used for smoothing throughput estimates. Valid methods are\n * \"slidingWindow\" and \"ewma\". The call has no effect if an invalid method is passed.\n *\n * The sliding window moving average method computes the average throughput using the last four segments downloaded.\n * If the stream is live (as opposed to VOD), then only the last three segments are used.\n * If wide variations in throughput are detected, the number of segments can be dynamically increased to avoid oscillations.\n *\n * The exponentially weighted moving average (EWMA) method computes the average using exponential smoothing.\n * Two separate estimates are maintained, a fast one with a three-second half life and a slow one with an eight-second half life.\n * The throughput estimate at any time is the minimum of the fast and slow estimates.\n * This allows a fast reaction to a bandwidth drop and prevents oscillations on bandwidth spikes.\n * @property {string} [ABRStrategy=\"abrDynamic\"] Returns the current ABR strategy being used: \"abrDynamic\", \"abrBola\" or \"abrThroughput\".\n * @property {number} [bandwidthSafetyFactor=0.9]\n * Standard ABR throughput rules multiply the throughput by this value. It should be between 0 and 1,\n * with lower values giving less rebuffering (but also lower quality).\n * @property {boolean} [useDefaultABRRules=true] Should the default ABR rules be used, or the custom ones added.\n * @property {boolean} [useBufferOccupancyABR=false] Whether to use the BOLA abr rule.\n * @property {boolean} [useDeadTimeLatency=true]\n * If true, only the download portion will be considered part of the download bitrate\n * and latency will be regarded as static. If false, the reciprocal of the whole\n * transfer time will be used.\n * @property {boolean} [limitBitrateByPortal=false] If true, the size of the video portal will limit the max chosen video resolution.\n * @property {boolean} [usePixelRatioInLimitBitrateByPortal=false]\n * Sets whether to take into account the device's pixel ratio when defining the portal dimensions.\n * Useful on, for example, retina displays.\n * @property {module:Settings~AudioVideoSettings} [maxBitrate={audio: -1, video: -1}] The maximum bitrate that the ABR algorithms will choose. Use NaN for no limit.\n * @property {module:Settings~AudioVideoSettings} [minBitrate={audio: -1, video: -1}] The minimum bitrate that the ABR algorithms will choose. Use NaN for no limit.\n * @property {module:Settings~AudioVideoSettings} [maxRepresentationRatio={audio: 1, video: 1}]\n * When switching multi-bitrate content (auto or manual mode) this property specifies the maximum representation allowed,\n * as a proportion of the size of the representation set.\n *\n * You can set or remove this cap at anytime before or during playback. To clear this setting you set the value to 1.\n *\n * If both this and maxAllowedBitrate are defined, maxAllowedBitrate is evaluated first, then maxAllowedRepresentation,\n * i.e. the lowest value from executing these rules is used.\n *\n * This feature is typically used to reserve higher representations for playback only when connected over a fast connection.\n * @property {module:Settings~AudioVideoSettings} [initialBitrate={audio: -1, video: -1}] Explicitly set the starting bitrate for audio or video\n * @property {module:Settings~AudioVideoSettings} [initialRepresentationRatio={audio: -1, video: -1}] Explicitly set the initial representation ratio. If initalBitrate is specified, this is ignored.\n * @property {module:Settings~AudioVideoSettings} [autoSwitchBitrate={audio: true, video: true}] Indicates whether the player should enable ABR algorithms to switch the bitrate.\n */\n\n/**\n * @typedef {Object} StreamingSettings\n * @property {number} [metricsMaxListDepth=1000] Maximum list depth of metrics.\n * @property {number} [abandonLoadTimeout=10000]\n * A timeout value in seconds, which during the ABRController will block switch-up events.\n * This will only take effect after an abandoned fragment event occurs.\n * @property {number} [liveDelayFragmentCount=4]\n * Changing this value will lower or increase live stream latency.  The detected segment duration will be multiplied by this value\n * to define a time in seconds to delay a live stream from the live edge. Lowering this value will lower latency but may decrease\n * the player's ability to build a stable buffer.\n * @property {number} [liveDelay]\n * <p>Equivalent in seconds of setLiveDelayFragmentCount</p>\n * <p>Lowering this value will lower latency but may decrease the player's ability to build a stable buffer.</p>\n * <p>This value should be less than the manifest duration by a couple of segment durations to avoid playback issues</p>\n * <p>If set, this parameter will take precedence over setLiveDelayFragmentCount and manifest info</p>\n * @property {boolean} [scheduleWhilePaused=true]\n * Set to true if you would like dash.js to keep downloading fragments in the background\n * when the video element is paused.\n * @property {boolean} [fastSwitchEnabled=false]\n * When enabled, after an ABR up-switch in quality, instead of requesting and appending the next fragment\n * at the end of the current buffer range it is requested and appended closer to the current time\n * When enabled, The maximum time to render a higher quality is current time + (1.5 * fragment duration).\n *\n * Note, When ABR down-switch is detected, we appended the lower quality at the end of the buffer range to preserve the\n * higher quality media for as long as possible.\n *\n * If enabled, it should be noted there are a few cases when the client will not replace inside buffer range but rather\n * just append at the end.  1. When the buffer level is less than one fragment duration 2.  The client\n * is in an Abandonment State due to recent fragment abandonment event.\n *\n * Known issues:\n * 1. In IE11 with auto switching off, if a user switches to a quality they can not download in time the\n * fragment may be appended in the same range as the playhead or even in the past, in IE11 it may cause a stutter\n * or stall in playback.\n * @property {number} [bufferPruningInterval=10] The interval of pruning buffer in sconds.\n * @property {number} [bufferToKeep=20]\n * This value influences the buffer pruning logic.\n * Allows you to modify the buffer that is kept in source buffer in seconds.\n *  0|-----------bufferToPrune-----------|-----bufferToKeep-----|currentTime|\n * @property {number} [bufferAheadToKeep=80]\n * This value influences the buffer pruning logic.\n * Allows you to modify the buffer ahead of current time position that is kept in source buffer in seconds.\n * <pre>0|--------|currentTime|-----bufferAheadToKeep----|----bufferToPrune-----------|end|</pre>\n * @property {boolean} [jumpGaps=true] Sets whether player should jump small gaps (discontinuities) in the buffer.\n * @property {number} [smallGapLimit=1.8] Time in seconds for a gap to be considered small.\n * @property {number} [stableBufferTime=12]\n * The time that the internal buffer target will be set to post startup/seeks (NOT top quality).\n *\n * When the time is set higher than the default you will have to wait longer\n * to see automatic bitrate switches but will have a larger buffer which\n * will increase stability.\n * @property {number} [bufferTimeAtTopQuality=30]\n * The time that the internal buffer target will be set to once playing the top quality.\n * If there are multiple bitrates in your adaptation, and the media is playing at the highest\n * bitrate, then we try to build a larger buffer at the top quality to increase stability\n * and to maintain media quality.\n * @property {number} [bufferTimeAtTopQualityLongForm=60] The time that the internal buffer target will be set to once playing the top quality for long form content.\n * @property {number} [longFormContentDurationThreshold=600]\n * The threshold which defines if the media is considered long form content.\n * This will directly affect the buffer targets when playing back at the top quality.\n * @property {number} [wallclockTimeUpdateInterval=50] How frequently the wallclockTimeUpdated internal event is triggered (in milliseconds).\n * @property {boolean} [lowLatencyEnabled=false] Enable or disable low latency mode\n * @property {boolean} [keepProtectionMediaKeys=false]\n * Set the value for the ProtectionController and MediaKeys life cycle. If true, the\n * ProtectionController and then created MediaKeys and MediaKeySessions will be preserved during\n * the MediaPlayer lifetime.\n * @property {boolean} [useManifestDateHeaderTimeSource=true]\n * <p>Allows you to enable the use of the Date Header, if exposed with CORS, as a timing source for live edge detection. The\n * use of the date header will happen only after the other timing source that take precedence fail or are omitted as described.\n * @property {boolean} [useSuggestedPresentationDelay=false]\n * <p>Set to true if you would like to override the default live delay and honor the SuggestedPresentationDelay attribute in by the manifest.</p>\n * @property {boolean} [useAppendWindowEnd=true]\n * Specifies if the appendWindowEnd attribute of the MSE SourceBuffers should be set according to content duration from manifest.\n * @property {number} [manifestUpdateRetryInterval=100]\n * For live streams, set the interval-frequency in milliseconds at which\n * dash.js will check if the current manifest is still processed before\n * downloading the next manifest once the minimumUpdatePeriod time has\n * @property {number} [liveCatchUpMinDrift=0.02]\n * Use this method to set the minimum latency deviation allowed before activating catch-up mechanism. In low latency mode,\n * when the difference between the measured latency and the target one,\n * as an absolute number, is higher than the one sets with this method, then dash.js increases/decreases\n * playback rate until target latency is reached.\n *\n * LowLatencyMinDrift should be provided in seconds, and it uses values between 0.0 and 0.5.\n *\n * Note: Catch-up mechanism is only applied when playing low latency live streams.\n * @property {number} [liveCatchUpMaxDrift=0]\n * Use this method to set the maximum latency deviation allowed before dash.js to do a seeking to live position. In low latency mode,\n * when the difference between the measured latency and the target one,\n * as an absolute number, is higher than the one sets with this method, then dash.js does a seek to live edge position minus\n * the target live delay.\n *\n * LowLatencyMaxDriftBeforeSeeking should be provided in seconds. If 0, then seeking operations won't be used for\n * fixing latency deviations.\n *\n * Note: Catch-up mechanism is only applied when playing low latency live streams.\n * @property {number} [liveCatchUpPlaybackRate=0.5]\n * Use this method to set the maximum catch up rate, as a percentage, for low latency live streams. In low latency mode,\n * when measured latency is higher/lower than the target one,\n * dash.js increases/decreases playback rate respectively up to (+/-) the percentage defined with this method until target is reached.\n *\n * Valid values for catch up rate are in range 0-0.5 (0-50%). Set it to 0 to turn off live catch up feature.\n *\n * Note: Catch-up mechanism is only applied when playing low latency live streams.\n * @property {module:Settings~CachingInfoSettings} [lastBitrateCachingInfo={enabled: true, ttl: 360000}]\n * Set to false if you would like to disable the last known bit rate from being stored during playback and used\n * to set the initial bit rate for subsequent playback within the expiration window.\n *\n * The default expiration is one hour, defined in milliseconds. If expired, the default initial bit rate (closest to 1000 kbps) will be used\n * for that session and a new bit rate will be stored during that session.\n * @property {module:Settings~CachingInfoSettings} [lastMediaSettingsCachingInfo={enabled: true, ttl: 360000}]\n * Set to false if you would like to disable the last known lang for audio (or camera angle for video) from being stored during playback and used\n * to set the initial settings for subsequent playback within the expiration window.\n *\n * The default expiration is one hour, defined in milliseconds. If expired, the default settings will be used\n * for that session and a new settings will be stored during that session.\n * @property {module:Settings~AudioVideoSettings} [cacheLoadThresholds={video: 50, audio: 5}]\n * For a given media type, the threshold which defines if the response to a fragment\n * request is coming from browser cache or not.\n * @property {module:Settings~RequestTypeSettings} [retryIntervals] Time in milliseconds of which to reload a failed file load attempt.\n * @property {module:Settings~RequestTypeSettings} [retryAttempts] Total number of retry attempts that will occur on a file load before it fails.\n * @property {module:Settings~AbrSettings} abr Adaptive Bitrate algorithm related settings.\n * @property {module:Settings~CmcdSettings} cmcd  Settings related to Common Media Client Data reporting.\n */\n\n/**\n * @typedef {Object} CachingInfoSettings\n * @property {boolean} [enable] Enable or disable the caching feature.\n * @property {number} [ttl] Time to live. A value defined in milliseconds representing how log to cache the settings for.\n */\n\n/**\n * @typedef {Object} module:Settings~AudioVideoSettings\n * @property {number|boolean} [audio] Configuration for audio media type of tracks.\n * @property {number|boolean} [video] Configuration for video media type of tracks.\n */\n\n/**\n * @typedef {Object} RequestTypeSettings\n * @property {number} [MPD] Manifest type of requests\n * @property {number} [XLinkExpansion] XLink expansion type of requests\n * @property {number} [InitializationSegment] Request to retrieve an initialization segment\n * @property {number} [IndexSegment] Request to retrieve an index segment (SegmentBase)\n * @property {number} [MediaSegment] Request to retrieve a media segment (video/audio/image/text chunk)\n * @property {number} [BitstreamSwitchingSegment] Bitrate stream switching type of request\n * @property {number} [other] Other type of request\n *\n */\n\n/**\n * @typedef {Object} module:Settings~CmcdSettings\n * @property {boolean} [enable=false] Enable or disable the CMCD reporting.\n * @property {string} [sid] GUID identifying the current playback session. Should be in UUID format. If not specified a UUID will be automatically generated.\n * @property {string} [cid] A unique string to identify the current content. If not specified it will be a hash of the MPD url.\n * @property {string} [did=dash.js-cmcd-default-id] A unique string identifying the current device.\n */\n\n\n/**\n * @class\n * @ignore\n */\nfunction Settings() {\n    let instance;\n\n    /**\n     * @const {PlayerSettings} defaultSettings\n     * @ignore\n     */\n    const defaultSettings = {\n        debug: {\n            logLevel: Debug.LOG_LEVEL_WARNING\n        },\n        streaming: {\n            metricsMaxListDepth: 1000,\n            abandonLoadTimeout: 10000,\n            liveDelayFragmentCount: 4,\n            liveDelay: null,\n            scheduleWhilePaused: true,\n            fastSwitchEnabled: false,\n            bufferPruningInterval: 10,\n            bufferToKeep: 20,\n            bufferAheadToKeep: 80,\n            jumpGaps: true,\n            smallGapLimit: 1.5,\n            stableBufferTime: 12,\n            bufferTimeAtTopQuality: 30,\n            bufferTimeAtTopQualityLongForm: 60,\n            longFormContentDurationThreshold: 600,\n            wallclockTimeUpdateInterval: 50,\n            lowLatencyEnabled: false,\n            keepProtectionMediaKeys: false,\n            useManifestDateHeaderTimeSource: true,\n            useSuggestedPresentationDelay: false,\n            useAppendWindowEnd: true,\n            manifestUpdateRetryInterval: 100,\n            liveCatchUpMinDrift: 0.02,\n            liveCatchUpMaxDrift: 0,\n            liveCatchUpPlaybackRate: 0.5,\n            lastBitrateCachingInfo: {enabled: true, ttl: 360000},\n            lastMediaSettingsCachingInfo: {enabled: true, ttl: 360000},\n            cacheLoadThresholds: {video: 50, audio: 5},\n            retryIntervals: {\n                [HTTPRequest.MPD_TYPE]: 500,\n                [HTTPRequest.XLINK_EXPANSION_TYPE]: 500,\n                [HTTPRequest.MEDIA_SEGMENT_TYPE]: 1000,\n                [HTTPRequest.INIT_SEGMENT_TYPE]: 1000,\n                [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: 1000,\n                [HTTPRequest.INDEX_SEGMENT_TYPE]: 1000,\n                [HTTPRequest.OTHER_TYPE]: 1000\n            },\n            retryAttempts: {\n                [HTTPRequest.MPD_TYPE]: 3,\n                [HTTPRequest.XLINK_EXPANSION_TYPE]: 1,\n                [HTTPRequest.MEDIA_SEGMENT_TYPE]: 3,\n                [HTTPRequest.INIT_SEGMENT_TYPE]: 3,\n                [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: 3,\n                [HTTPRequest.INDEX_SEGMENT_TYPE]: 3,\n                [HTTPRequest.OTHER_TYPE]: 3\n            },\n            abr: {\n                movingAverageMethod: Constants.MOVING_AVERAGE_SLIDING_WINDOW,\n                ABRStrategy: Constants.ABR_STRATEGY_DYNAMIC,\n                bandwidthSafetyFactor: 0.9,\n                useDefaultABRRules: true,\n                useBufferOccupancyABR: false,\n                useDeadTimeLatency: true,\n                limitBitrateByPortal: false,\n                usePixelRatioInLimitBitrateByPortal: false,\n                maxBitrate: {audio: -1, video: -1},\n                minBitrate: {audio: -1, video: -1},\n                maxRepresentationRatio: {audio: 1, video: 1},\n                initialBitrate: {audio: -1, video: -1},\n                initialRepresentationRatio: {audio: -1, video: -1},\n                autoSwitchBitrate: {audio: true, video: true}\n            },\n            cmcd: {\n                enabled: false,\n                sid: null,\n                cid: null,\n                did: null\n            }\n        }\n    };\n\n    let settings = Utils.clone(defaultSettings);\n\n    //Merge in the settings. If something exists in the new config that doesn't match the schema of the default config,\n    //regard it as an error and log it.\n    function mixinSettings(source, dest, path) {\n        for (let n in source) {\n            if (source.hasOwnProperty(n)) {\n                if (dest.hasOwnProperty(n)) {\n                    if (typeof source[n] === 'object' && source[n] !== null) {\n                        mixinSettings(source[n], dest[n], path.slice() + n + '.');\n                    } else {\n                        dest[n] = Utils.clone(source[n]);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Return the settings object. Don't copy/store this object, you won't get updates.\n     * @func\n     * @instance\n     */\n    function get() {\n        return settings;\n    }\n\n    /**\n     * @func\n     * @instance\n     * @param {object} settingsObj - This should be a partial object of the Settings.Schema type. That is, fields defined should match the path (e.g.\n     * settingsObj.streaming.abr.autoSwitchBitrate.audio -> defaultSettings.streaming.abr.autoSwitchBitrate.audio). Where an element's path does\n     * not match it is ignored, and a warning is logged.\n     *\n     * Use to change the settings object. Any new values defined will overwrite the settings and anything undefined will not change.\n     * Implementers of new settings should add it in an approriate namespace to the defaultSettings object and give it a default value (that is not undefined).\n     *\n     */\n    function update(settingsObj) {\n        if (typeof settingsObj === 'object') {\n            mixinSettings(settingsObj, settings, '');\n        }\n    }\n\n    /**\n     * Resets the settings object. Everything is set to its default value.\n     * @func\n     * @instance\n     *\n     */\n    function reset() {\n        settings = Utils.clone(defaultSettings);\n    }\n\n    instance = {\n        get: get,\n        update: update,\n        reset: reset\n    };\n\n    return instance;\n}\n\n\nSettings.__dashjs_factory_name = 'Settings';\nlet factory = FactoryMaker.getSingletonFactory(Settings);\nexport default factory;\n"]}