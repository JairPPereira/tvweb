{"version":3,"sources":["../../../../../src/streaming/text/TextController.js"],"names":["TextController","context","instance","textSourceBuffer","errHandler","adapter","manifestModel","mediaController","videoModel","streamController","textTracks","vttParser","ttmlParser","eventBus","defaultLanguage","lastEnabledIndex","textDefaultEnabled","allTracksAreDisabled","forceTextStreaming","previousPeriodSelectedTrack","setup","getInstance","initialize","on","Events","TEXT_TRACKS_QUEUE_INITIALIZED","onTextTracksAdded","PERIOD_SWITCH_STARTED","onPeriodSwitchStarted","STREAM_COMPLETED","onStreamCompleted","PERIOD_SWITCH_COMPLETED","onPeriodSwitchCompleted","resetInitialSettings","e","undefined","fromStreamInfo","getCurrentTrackIdx","setTextTrack","setConfig","config","getTextSourceBuffer","getAllTracksAreDisabled","addEmbeddedTrack","mediaInfo","setTextDefaultLanguage","lang","getTextDefaultLanguage","tracks","index","some","item","idx","trigger","TEXT_TRACKS_ADDED","enabled","isTextEnabled","setTextDefaultEnabled","enable","getTextDefaultEnabled","enableText","enableForcedTextStreaming","getConfig","fragmentModel","fragmentedTracks","mediaInfosArr","streamProcessor","oldTrackIdx","setModeForTrackIdx","Constants","TEXT_HIDDEN","setCurrentTrackIdx","TEXT_SHOWING","currentTrackInfo","getCurrentTrackInfo","isFragmented","isEmbedded","i","length","id","currentFragTrack","getCurrentTrackFor","FRAGMENTED_TEXT","getActiveStreamInfo","abortRequests","removeExecutedRequestsBeforeTime","remove","deleteCuesFromTrackIdx","setTrack","setCurrentFragmentedTrackIdx","streamProcessors","getActiveStreamProcessors","getType","setIndexHandlerTime","getTime","getScheduleController","start","TEXT","getMediaInfoArr","selectMediaInfo","reset","resetEmbedded","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"TextController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport TextSourceBuffer from './TextSourceBuffer';\nimport TextTracks from './TextTracks';\nimport VTTParser from '../utils/VTTParser';\nimport TTMLParser from '../utils/TTMLParser';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport { checkParameterType } from '../utils/SupervisorTools';\n\nfunction TextController() {\n\n    let context = this.context;\n\n    let instance,\n        textSourceBuffer,\n        errHandler,\n        adapter,\n        manifestModel,\n        mediaController,\n        videoModel,\n        streamController,\n        textTracks,\n        vttParser,\n        ttmlParser,\n        eventBus,\n        defaultLanguage,\n        lastEnabledIndex,\n        textDefaultEnabled, // this is used for default settings (each time a file is loaded, we check value of this settings )\n        allTracksAreDisabled, // this is used for one session (when a file has been loaded, we use this settings to enable/disable text)\n        forceTextStreaming,\n        previousPeriodSelectedTrack;\n\n    function setup() {\n\n        defaultLanguage = '';\n        lastEnabledIndex = -1;\n        textDefaultEnabled = true;\n        forceTextStreaming = false;\n        textTracks = TextTracks(context).getInstance();\n        vttParser = VTTParser(context).getInstance();\n        ttmlParser = TTMLParser(context).getInstance();\n        textSourceBuffer = TextSourceBuffer(context).getInstance();\n        eventBus = EventBus(context).getInstance();\n\n        textTracks.initialize();\n        eventBus.on(Events.TEXT_TRACKS_QUEUE_INITIALIZED, onTextTracksAdded, instance);\n\n        /*\n        * register those event callbacks in order to detect switch of periods and set\n        * correctly the selected track index in the new period.\n        * there is different cases :\n        *   - switch occurs after a seek command from the user\n        *   - switch occurs but codecs in streams are different\n        *   - switch occurs and codecs in streams are not different\n        */\n        eventBus.on(Events.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, instance);\n        eventBus.on(Events.STREAM_COMPLETED, onStreamCompleted, instance);\n        eventBus.on(Events.PERIOD_SWITCH_COMPLETED, onPeriodSwitchCompleted, instance);\n\n        resetInitialSettings();\n    }\n\n    function onPeriodSwitchStarted(e) {\n        if (previousPeriodSelectedTrack === undefined && e.fromStreamInfo !== null /* test if this is the first period */) {\n            previousPeriodSelectedTrack = this.getCurrentTrackIdx();\n        }\n    }\n\n    function onStreamCompleted() {\n        if (previousPeriodSelectedTrack === undefined) {\n            previousPeriodSelectedTrack = this.getCurrentTrackIdx();\n        }\n    }\n\n    function onPeriodSwitchCompleted() {\n        if (previousPeriodSelectedTrack !== undefined) {\n            this.setTextTrack(previousPeriodSelectedTrack);\n            previousPeriodSelectedTrack = undefined;\n        }\n    }\n\n    function setConfig(config) {\n        if (!config) {\n            return;\n        }\n        if (config.errHandler) {\n            errHandler = config.errHandler;\n        }\n        if (config.adapter) {\n            adapter = config.adapter;\n        }\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.mediaController) {\n            mediaController = config.mediaController;\n        }\n        if (config.videoModel) {\n            videoModel = config.videoModel;\n        }\n        if (config.streamController) {\n            streamController = config.streamController;\n        }\n        if (config.textTracks) {\n            textTracks = config.textTracks;\n        }\n        if (config.vttParser) {\n            vttParser = config.vttParser;\n        }\n        if (config.ttmlParser) {\n            ttmlParser = config.ttmlParser;\n        }\n\n        // create config for source buffer\n        textSourceBuffer.setConfig({\n            errHandler: errHandler,\n            adapter: adapter,\n            manifestModel: manifestModel,\n            mediaController: mediaController,\n            videoModel: videoModel,\n            streamController: streamController,\n            textTracks: textTracks,\n            vttParser: vttParser,\n            ttmlParser: ttmlParser\n        });\n    }\n\n    function getTextSourceBuffer() {\n        return textSourceBuffer;\n    }\n\n    function getAllTracksAreDisabled() {\n        return allTracksAreDisabled;\n    }\n\n    function addEmbeddedTrack(mediaInfo) {\n        textSourceBuffer.addEmbeddedTrack(mediaInfo);\n    }\n\n    function setTextDefaultLanguage(lang) {\n        checkParameterType(lang, 'string');\n        defaultLanguage = lang;\n    }\n\n    function getTextDefaultLanguage() {\n        return defaultLanguage;\n    }\n\n    function onTextTracksAdded(e) {\n        let tracks = e.tracks;\n        let index = e.index;\n\n        tracks.some((item, idx) => {\n            if (item.lang === defaultLanguage) {\n                this.setTextTrack(idx);\n                index = idx;\n                return true;\n            }\n        });\n\n        if (!textDefaultEnabled) {\n            // disable text at startup\n            this.setTextTrack(-1);\n        }\n\n        lastEnabledIndex = index;\n        eventBus.trigger(Events.TEXT_TRACKS_ADDED, {\n            enabled: isTextEnabled(),\n            index: index,\n            tracks: tracks\n        });\n    }\n\n    function setTextDefaultEnabled(enable) {\n        checkParameterType(enable,'boolean');\n        textDefaultEnabled = enable;\n\n        if (!textDefaultEnabled) {\n            // disable text at startup\n            this.setTextTrack(-1);\n        }\n    }\n\n    function getTextDefaultEnabled() {\n        return textDefaultEnabled;\n    }\n\n    function enableText(enable) {\n        checkParameterType(enable,'boolean');\n\n        if (isTextEnabled() !== enable) {\n            // change track selection\n            if (enable) {\n                // apply last enabled tractk\n                this.setTextTrack(lastEnabledIndex);\n            }\n\n            if (!enable) {\n                // keep last index and disable text track\n                lastEnabledIndex = this.getCurrentTrackIdx();\n                this.setTextTrack(-1);\n            }\n        }\n    }\n\n    function isTextEnabled() {\n        let enabled = true;\n        if (allTracksAreDisabled && !forceTextStreaming) {\n            enabled = false;\n        }\n        return enabled;\n    }\n\n    // when set to true NextFragmentRequestRule will allow schedule of chunks even if tracks are all disabled. Allowing streaming to hidden track for external players to work with.\n    function enableForcedTextStreaming(enable) {\n        checkParameterType(enable,'boolean');\n        forceTextStreaming = enable;\n    }\n\n    function setTextTrack(idx) {\n        //For external time text file,  the only action needed to change a track is marking the track mode to showing.\n        // Fragmented text tracks need the additional step of calling TextController.setTextTrack();\n        let config = textSourceBuffer.getConfig();\n        let fragmentModel = config.fragmentModel;\n        let fragmentedTracks = config.fragmentedTracks;\n        let videoModel = config.videoModel;\n        let mediaInfosArr,\n            streamProcessor;\n\n        allTracksAreDisabled = idx === -1 ? true : false;\n\n        let oldTrackIdx = textTracks.getCurrentTrackIdx();\n        if (oldTrackIdx !== idx) {\n            textTracks.setModeForTrackIdx(oldTrackIdx, Constants.TEXT_HIDDEN);\n            textTracks.setCurrentTrackIdx(idx);\n            textTracks.setModeForTrackIdx(idx, Constants.TEXT_SHOWING);\n\n            let currentTrackInfo = textTracks.getCurrentTrackInfo();\n\n            if (currentTrackInfo && currentTrackInfo.isFragmented && !currentTrackInfo.isEmbedded) {\n                for (let i = 0; i < fragmentedTracks.length; i++) {\n                    let mediaInfo = fragmentedTracks[i];\n                    if (currentTrackInfo.lang === mediaInfo.lang && currentTrackInfo.index === mediaInfo.index &&\n                        (mediaInfo.id ? currentTrackInfo.id === mediaInfo.id : currentTrackInfo.id === mediaInfo.index)) {\n                        let currentFragTrack = mediaController.getCurrentTrackFor(Constants.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());\n                        if (mediaInfo !== currentFragTrack) {\n                            fragmentModel.abortRequests();\n                            fragmentModel.removeExecutedRequestsBeforeTime();\n                            textSourceBuffer.remove();\n                            textTracks.deleteCuesFromTrackIdx(oldTrackIdx);\n                            mediaController.setTrack(mediaInfo);\n                            textSourceBuffer.setCurrentFragmentedTrackIdx(i);\n                        } else if (oldTrackIdx === -1) {\n                            //in fragmented use case, if the user selects the older track (the one selected before disabled text track)\n                            //no CURRENT_TRACK_CHANGED event will be trigger, so dashHandler current time has to be updated and the scheduleController\n                            //has to be restarted.\n                            const streamProcessors = streamController.getActiveStreamProcessors();\n                            for (let i = 0; i < streamProcessors.length; i++) {\n                                if (streamProcessors[i].getType() === Constants.FRAGMENTED_TEXT) {\n                                    streamProcessor = streamProcessors[i];\n                                    break;\n                                }\n                            }\n                            streamProcessor.setIndexHandlerTime(videoModel.getTime());\n                            streamProcessor.getScheduleController().start();\n                        }\n                    }\n                }\n            } else if (currentTrackInfo && !currentTrackInfo.isFragmented) {\n                const streamProcessors = streamController.getActiveStreamProcessors();\n                for (let i = 0; i < streamProcessors.length; i++) {\n                    if (streamProcessors[i].getType() === Constants.TEXT) {\n                        streamProcessor = streamProcessors[i];\n                        mediaInfosArr = streamProcessor.getMediaInfoArr();\n                        break;\n                    }\n                }\n\n                if (streamProcessor && mediaInfosArr) {\n                    for (let i = 0; i < mediaInfosArr.length; i++) {\n                        if (mediaInfosArr[i].index === currentTrackInfo.index && mediaInfosArr[i].lang === currentTrackInfo.lang) {\n                            streamProcessor.selectMediaInfo(mediaInfosArr[i]);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function getCurrentTrackIdx() {\n        return textTracks.getCurrentTrackIdx();\n    }\n\n    function resetInitialSettings() {\n        allTracksAreDisabled = false;\n    }\n\n    function reset() {\n        resetInitialSettings();\n        textSourceBuffer.resetEmbedded();\n        textSourceBuffer.reset();\n    }\n\n    instance = {\n        setConfig: setConfig,\n        getTextSourceBuffer: getTextSourceBuffer,\n        getAllTracksAreDisabled: getAllTracksAreDisabled,\n        addEmbeddedTrack: addEmbeddedTrack,\n        getTextDefaultLanguage: getTextDefaultLanguage,\n        setTextDefaultLanguage: setTextDefaultLanguage,\n        setTextDefaultEnabled: setTextDefaultEnabled,\n        getTextDefaultEnabled: getTextDefaultEnabled,\n        enableText: enableText,\n        isTextEnabled: isTextEnabled,\n        setTextTrack: setTextTrack,\n        getCurrentTrackIdx: getCurrentTrackIdx,\n        enableForcedTextStreaming: enableForcedTextStreaming,\n        reset: reset\n    };\n    setup();\n    return instance;\n}\n\nTextController.__dashjs_factory_name = 'TextController';\nexport default FactoryMaker.getSingletonFactory(TextController);\n"]}