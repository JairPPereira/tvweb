{"version":3,"sources":["../../../../src/streaming/MediaPlayer.js"],"names":["MediaPlayer","STREAMING_NOT_INITIALIZED_ERROR","PLAYBACK_NOT_INITIALIZED_ERROR","ELEMENT_NOT_ATTACHED_ERROR","SOURCE_NOT_ATTACHED_ERROR","MEDIA_PLAYER_NOT_INITIALIZED_ERROR","context","eventBus","getInstance","settings","debug","instance","logger","source","protectionData","mediaPlayerInitialized","streamingInitialized","playbackInitialized","autoPlay","abrController","timelineConverter","mediaController","protectionController","metricsReportingController","mssHandler","adapter","mediaPlayerModel","errHandler","capabilities","streamController","playbackController","dashMetrics","manifestModel","cmcdModel","videoModel","textController","uriFragmentModel","domStorage","setup","getLogger","Events","extend","MediaPlayerEvents","setConfig","config","initialize","view","AutoPlay","supportsMediaSource","error","DashJSError","Errors","CAPABILITY_MEDIASOURCE_ERROR_CODE","CAPABILITY_MEDIASOURCE_ERROR_MESSAGE","constants","Constants","cea608parser","BASE64","restoreDefaultUTCTimingSources","setAutoPlay","undefined","attachView","attachSource","info","getVersion","reset","isReady","getElement","on","type","listener","scope","off","getDebug","preload","initializePlayback","play","isPaused","pause","seek","value","isNaN","BAD_ARGUMENT_ERROR","s","getIsDynamic","getDVRSeekOffset","isSeeking","isDynamic","setPlaybackRate","getVideoElement","playbackRate","getPlaybackRate","setMute","muted","isMuted","setVolume","volume","getVolume","getBufferLength","types","VIDEO","AUDIO","FRAGMENTED_TEXT","buffer","map","getTracksFor","t","length","getDashMetrics","getCurrentBufferLevel","Number","MAX_VALUE","reduce","p","c","Math","min","NaN","indexOf","warn","getDVRWindowSize","metric","getCurrentDVRInfo","manifestInfo","DVRWindowSize","liveDelay","getLiveDelay","val","range","start","end","time","streamId","currentTime","getTimeRelativeToStreamId","duration","d","timeAsUTC","getAsUTC","durationAsUTC","getTopBitrateInfoFor","getQualityFor","IMAGE","activeStream","getActiveStream","thumbnailController","getThumbnailController","getCurrentTrackIndex","setQualityFor","setTrackByIndex","setPlaybackQuality","getActiveStreamInfo","updatePortalSize","setElementSize","setWindowResizeEventCalled","getAutoPlay","getCurrentLiveLatency","addABRCustomRule","rulename","rule","removeABRCustomRule","removeAllABRCustomRule","addUTCTimingSource","schemeIdUri","removeUTCTimingSource","clearDefaultUTCTimingSources","getAverageThroughput","throughputHistory","getThroughputHistory","setXHRWithCredentialsForType","getXHRWithCredentialsForType","setTextDefaultLanguage","lang","getTextDefaultLanguage","setTextDefaultEnabled","enable","getTextDefaultEnabled","enableText","enableForcedTextStreaming","isTextEnabled","setTextTrack","idx","getCurrentTextTrackIndex","getCurrentTrackIdx","displayCaptionsOnTop","textTracks","setDisplayCConTop","element","setElement","detectProtection","detectMetricsReporting","detectMss","switchToVideoElement","resetPlaybackControllers","getTTMLRenderingDiv","attachTTMLRenderingDiv","div","setTTMLRenderingDiv","getBitrateInfoListFor","stream","getBitrateListFor","getStreamsFromManifest","manifest","getStreamsInfo","streamInfo","getTracksForTypeFromManifest","getAllMediaInfoForType","getCurrentTrackFor","setQualityForSettingsFor","setInitialSettings","getInitialMediaSettingsFor","getInitialSettings","setCurrentTrack","track","setTrack","getTrackSwitchModeFor","getSwitchMode","setTrackSwitchModeFor","mode","setSwitchMode","setSelectionModeForInitialTrack","getSelectionModeForInitialTrack","getProtectionController","attachProtectionController","setProtectionData","getThumbnail","callback","getStreamForTime","timeInPeriod","getId","get","retrieveManifest","url","manifestLoader","createManifestLoader","self","handler","e","INTERNAL_MANIFEST_LOADED","load","getSource","urlOrManifest","getSettings","updateSettings","settingsObj","update","resetSettings","formatUTC","locales","hour12","withDate","dt","Date","toLocaleDateString","toLocaleTimeString","convertToTimeCode","max","h","floor","m","toString","parentNameString","childInstance","override","FactoryMaker","getStreamById","id","streaming","keepProtectionMediaKeys","stop","createPlaybackControllers","createAbrRulesCollection","create","requestModifier","Protection","dashjs","protection","events","publicOnly","errors","createProtectionSystem","MetricsReporting","metricsReporting","createMetricsReporting","mediaElement","metricsConstants","MetricsConstants","MssHandler","baseURLController","initSegmentType","HTTPRequest","INIT_SEGMENT_TYPE","ISOBoxer","valToConvert","availableFrom","utcValue","getTime","loadWithManifest","getDashAdapter","setInitialMediaSettingsFor","__dashjs_factory_name","factory","getClassFactory","updateClassFactory"],"mappings":"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","file":"MediaPlayer.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport cea608parser from '../../externals/cea608-parser';\nimport Constants from './constants/Constants';\nimport MetricsConstants from './constants/MetricsConstants';\nimport PlaybackController from './controllers/PlaybackController';\nimport StreamController from './controllers/StreamController';\nimport MediaController from './controllers/MediaController';\nimport BaseURLController from './controllers/BaseURLController';\nimport ManifestLoader from './ManifestLoader';\nimport ErrorHandler from './utils/ErrorHandler';\nimport Capabilities from './utils/Capabilities';\nimport TextTracks from './text/TextTracks';\nimport RequestModifier from './utils/RequestModifier';\nimport TextController from './text/TextController';\nimport URIFragmentModel from './models/URIFragmentModel';\nimport ManifestModel from './models/ManifestModel';\nimport MediaPlayerModel from './models/MediaPlayerModel';\nimport AbrController from './controllers/AbrController';\nimport VideoModel from './models/VideoModel';\nimport CmcdModel from './models/CmcdModel';\nimport DOMStorage from './utils/DOMStorage';\nimport Debug from './../core/Debug';\nimport Errors from './../core/errors/Errors';\nimport EventBus from './../core/EventBus';\nimport Events from './../core/events/Events';\nimport MediaPlayerEvents from './MediaPlayerEvents';\nimport FactoryMaker from '../core/FactoryMaker';\nimport Settings from '../core/Settings';\nimport {\n    getVersionString\n}\nfrom './../core/Version';\n\n//Dash\nimport DashAdapter from '../dash/DashAdapter';\nimport DashMetrics from '../dash/DashMetrics';\nimport TimelineConverter from '../dash/utils/TimelineConverter';\nimport {\n    HTTPRequest\n} from './vo/metrics/HTTPRequest';\nimport BASE64 from '../../externals/base64';\nimport ISOBoxer from 'codem-isoboxer';\nimport DashJSError from './vo/DashJSError';\nimport { checkParameterType } from './utils/SupervisorTools';\n\n/**\n * @module MediaPlayer\n * @description The MediaPlayer is the primary dash.js Module and a Facade to build your player around.\n * It will allow you access to all the important dash.js properties/methods via the public API and all the\n * events to build a robust DASH media player.\n */\nfunction MediaPlayer() {\n    /**\n    * @constant {string} STREAMING_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized\n    * @inner\n    */\n    const STREAMING_NOT_INITIALIZED_ERROR = 'You must first call initialize() and set a source before calling this method';\n    /**\n    * @constant {string} PLAYBACK_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized\n    * @inner\n    */\n    const PLAYBACK_NOT_INITIALIZED_ERROR = 'You must first call initialize() and set a valid source and view before calling this method';\n    /**\n    * @constant {string} ELEMENT_NOT_ATTACHED_ERROR error string thrown when a function is called before the dash.js has received a reference of an HTML5 video element\n    * @inner\n    */\n    const ELEMENT_NOT_ATTACHED_ERROR = 'You must first call attachView() to set the video element before calling this method';\n    /**\n    * @constant {string} SOURCE_NOT_ATTACHED_ERROR error string thrown when a function is called before the dash.js has received a valid source stream.\n    * @inner\n    */\n    const SOURCE_NOT_ATTACHED_ERROR = 'You must first call attachSource() with a valid source before calling this method';\n    /**\n    * @constant {string} MEDIA_PLAYER_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized.\n    * @inner\n    */\n    const MEDIA_PLAYER_NOT_INITIALIZED_ERROR = 'MediaPlayer not initialized!';\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    let settings = Settings(context).getInstance();\n    const debug = Debug(context).getInstance({settings: settings});\n\n    let instance,\n        logger,\n        source,\n        protectionData,\n        mediaPlayerInitialized,\n        streamingInitialized,\n        playbackInitialized,\n        autoPlay,\n        abrController,\n        timelineConverter,\n        mediaController,\n        protectionController,\n        metricsReportingController,\n        mssHandler,\n        adapter,\n        mediaPlayerModel,\n        errHandler,\n        capabilities,\n        streamController,\n        playbackController,\n        dashMetrics,\n        manifestModel,\n        cmcdModel,\n        videoModel,\n        textController,\n        uriFragmentModel,\n        domStorage;\n\n    /*\n    ---------------------------------------------------------------------------\n\n        INIT FUNCTIONS\n\n    ---------------------------------------------------------------------------\n    */\n    function setup() {\n        logger = debug.getLogger(instance);\n        mediaPlayerInitialized = false;\n        playbackInitialized = false;\n        streamingInitialized = false;\n        autoPlay = true;\n        protectionController = null;\n        protectionData = null;\n        adapter = null;\n        Events.extend(MediaPlayerEvents);\n        mediaPlayerModel = MediaPlayerModel(context).getInstance();\n        videoModel = VideoModel(context).getInstance();\n        uriFragmentModel = URIFragmentModel(context).getInstance();\n    }\n\n    /**\n     * Configure media player with customs controllers. Helpful for tests\n     *\n     * @param {object=} config controllers configuration\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function setConfig(config) {\n        if (!config) {\n            return;\n        }\n        if (config.capabilities) {\n            capabilities = config.capabilities;\n        }\n        if (config.streamController) {\n            streamController = config.streamController;\n        }\n        if (config.playbackController) {\n            playbackController = config.playbackController;\n        }\n        if (config.mediaPlayerModel) {\n            mediaPlayerModel = config.mediaPlayerModel;\n        }\n        if (config.abrController) {\n            abrController = config.abrController;\n        }\n        if (config.mediaController) {\n            mediaController = config.mediaController;\n        }\n        if (config.settings) {\n            settings = config.settings;\n        }\n    }\n\n    /**\n     * Upon creating the MediaPlayer you must call initialize before you call anything else.\n     * There is one exception to this rule. It is crucial to call {@link module:MediaPlayer#extend extend()}\n     * with all your extensions prior to calling initialize.\n     *\n     * ALL arguments are optional and there are individual methods to set each argument later on.\n     * The args in this method are just for convenience and should only be used for a simple player setup.\n     *\n     * @param {HTML5MediaElement=} view - Optional arg to set the video element. {@link module:MediaPlayer#attachView attachView()}\n     * @param {string=} source - Optional arg to set the media source. {@link module:MediaPlayer#attachSource attachSource()}\n     * @param {boolean=} AutoPlay - Optional arg to set auto play. {@link module:MediaPlayer#setAutoPlay setAutoPlay()}\n     * @see {@link module:MediaPlayer#attachView attachView()}\n     * @see {@link module:MediaPlayer#attachSource attachSource()}\n     * @see {@link module:MediaPlayer#setAutoPlay setAutoPlay()}\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function initialize(view, source, AutoPlay) {\n        if (!capabilities) {\n            capabilities = Capabilities(context).getInstance();\n        }\n        errHandler = ErrorHandler(context).getInstance();\n\n        if (!capabilities.supportsMediaSource()) {\n            errHandler.error(new DashJSError(Errors.CAPABILITY_MEDIASOURCE_ERROR_CODE, Errors.CAPABILITY_MEDIASOURCE_ERROR_MESSAGE));\n            return;\n        }\n\n        if (mediaPlayerInitialized) return;\n        mediaPlayerInitialized = true;\n\n        // init some controllers and models\n        timelineConverter = TimelineConverter(context).getInstance();\n        if (!abrController) {\n            abrController = AbrController(context).getInstance();\n        }\n\n        if (!playbackController) {\n            playbackController = PlaybackController(context).getInstance();\n        }\n\n        if (!mediaController) {\n            mediaController = MediaController(context).getInstance();\n        }\n\n        adapter = DashAdapter(context).getInstance();\n\n        manifestModel = ManifestModel(context).getInstance();\n\n        cmcdModel = CmcdModel(context).getInstance();\n\n        dashMetrics = DashMetrics(context).getInstance({\n            settings: settings\n        });\n        textController = TextController(context).getInstance();\n        domStorage = DOMStorage(context).getInstance({\n            settings: settings\n        });\n\n        adapter.setConfig({\n            constants: Constants,\n            cea608parser: cea608parser,\n            errHandler: errHandler,\n            BASE64: BASE64\n        });\n\n        restoreDefaultUTCTimingSources();\n        setAutoPlay(AutoPlay !== undefined ? AutoPlay : true);\n\n        if (view) {\n            attachView(view);\n        }\n\n        if (source) {\n            attachSource(source);\n        }\n\n        logger.info('[dash.js ' + getVersion() + '] ' + 'MediaPlayer has been initialized');\n    }\n\n    /**\n     * Sets the MPD source and the video element to null. You can also reset the MediaPlayer by\n     * calling attachSource with a new source file.\n     *\n     * Calling this method is all that is necessary to destroy a MediaPlayer instance.\n     *\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function reset() {\n        attachSource(null);\n        attachView(null);\n        protectionData = null;\n        if (protectionController) {\n            protectionController.reset();\n            protectionController = null;\n        }\n        if (metricsReportingController) {\n            metricsReportingController.reset();\n            metricsReportingController = null;\n        }\n\n        settings.reset();\n    }\n\n    /**\n     * The ready state of the MediaPlayer based on both the video element and MPD source being defined.\n     *\n     * @returns {boolean} The current ready state of the MediaPlayer\n     * @see {@link module:MediaPlayer#attachView attachView()}\n     * @see {@link module:MediaPlayer#attachSource attachSource()}\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function isReady() {\n        return (!!source && !!videoModel.getElement());\n    }\n\n    /**\n     * Use the on method to listen for public events found in MediaPlayer.events. {@link MediaPlayerEvents}\n     *\n     * @param {string} type - {@link MediaPlayerEvents}\n     * @param {Function} listener - callback method when the event fires.\n     * @param {Object} scope - context of the listener so it can be removed properly.\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function on(type, listener, scope) {\n        eventBus.on(type, listener, scope);\n    }\n\n    /**\n     * Use the off method to remove listeners for public events found in MediaPlayer.events. {@link MediaPlayerEvents}\n     *\n     * @param {string} type - {@link MediaPlayerEvents}\n     * @param {Function} listener - callback method when the event fires.\n     * @param {Object} scope - context of the listener so it can be removed properly.\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function off(type, listener, scope) {\n        eventBus.off(type, listener, scope);\n    }\n\n    /**\n     * Current version of Dash.js\n     * @returns {string} the current dash.js version string.\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getVersion() {\n        return getVersionString();\n    }\n\n    /**\n     * Use this method to access the dash.js logging class.\n     *\n     * @returns {Debug}\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getDebug() {\n        return debug;\n    }\n\n    /*\n    ---------------------------------------------------------------------------\n\n        PLAYBACK FUNCTIONS\n\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Causes the player to begin streaming the media as set by the {@link module:MediaPlayer#attachSource attachSource()}\n     * method in preparation for playing. It specifically does not require a view to be attached with {@link module:MediaPlayer#attachSource attachView()} to begin preloading.\n     * When a view is attached after preloading, the buffered data is transferred to the attached mediaSource buffers.\n     *\n     * @see {@link module:MediaPlayer#attachSource attachSource()}\n     * @see {@link module:MediaPlayer#attachView attachView()}\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~SOURCE_NOT_ATTACHED_ERROR SOURCE_NOT_ATTACHED_ERROR} if called before attachSource function\n     * @instance\n     */\n    function preload() {\n        if (videoModel.getElement() || streamingInitialized) {\n            return false;\n        }\n        if (source) {\n            initializePlayback();\n        } else {\n            throw SOURCE_NOT_ATTACHED_ERROR;\n        }\n    }\n\n    /**\n     * The play method initiates playback of the media defined by the {@link module:MediaPlayer#attachSource attachSource()} method.\n     * This method will call play on the native Video Element.\n     *\n     * @see {@link module:MediaPlayer#attachSource attachSource()}\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function play() {\n        if (!playbackInitialized) {\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\n        }\n        if (!autoPlay || (isPaused() && playbackInitialized)) {\n            playbackController.play();\n        }\n    }\n\n    /**\n     * This method will call pause on the native Video Element.\n     *\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function pause() {\n        if (!playbackInitialized) {\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\n        }\n        playbackController.pause();\n    }\n\n    /**\n     * Returns a Boolean that indicates whether the Video Element is paused.\n     * @return {boolean}\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function isPaused() {\n        if (!playbackInitialized) {\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\n        }\n        return playbackController.isPaused();\n    }\n\n    /**\n     * Sets the currentTime property of the attached video element.  If it is a live stream with a\n     * timeShiftBufferLength, then the DVR window offset will be automatically calculated.\n     *\n     * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected\n     * @see {@link module:MediaPlayer#getDVRSeekOffset getDVRSeekOffset()}\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type or is NaN.\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function seek(value) {\n        if (!playbackInitialized) {\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\n        }\n\n        checkParameterType(value, 'number');\n\n        if (isNaN(value)) {\n            throw Constants.BAD_ARGUMENT_ERROR;\n        }\n\n        let s = playbackController.getIsDynamic() ? getDVRSeekOffset(value) : value;\n        playbackController.seek(s);\n    }\n\n    /**\n     * Returns a Boolean that indicates whether the media is in the process of seeking to a new position.\n     * @return {boolean}\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function isSeeking() {\n        if (!playbackInitialized) {\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\n        }\n        return playbackController.isSeeking();\n    }\n\n    /**\n     * Returns a Boolean that indicates whether the media is in the process of dynamic.\n     * @return {boolean}\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function isDynamic() {\n        if (!playbackInitialized) {\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\n        }\n        return playbackController.getIsDynamic();\n    }\n\n    /**\n     * Use this method to set the native Video Element's playback rate.\n     * @param {number} value\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function setPlaybackRate(value) {\n        getVideoElement().playbackRate = value;\n    }\n\n    /**\n     * Returns the current playback rate.\n     * @returns {number}\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getPlaybackRate() {\n        return getVideoElement().playbackRate;\n    }\n\n    /**\n     * Use this method to set the native Video Element's muted state. Takes a Boolean that determines whether audio is muted. true if the audio is muted and false otherwise.\n     * @param {boolean} value\n     * @memberof module:MediaPlayer\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not boolean type.\n     * @instance\n     */\n    function setMute(value) {\n        checkParameterType(value, 'boolean');\n        getVideoElement().muted = value;\n    }\n\n    /**\n     * A Boolean that determines whether audio is muted.\n     * @returns {boolean}\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function isMuted() {\n        return getVideoElement().muted;\n    }\n\n    /**\n     * A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).\n     * @param {number} value\n     * @memberof module:MediaPlayer\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type, or is NaN or not between 0 and 1.\n     * @instance\n     */\n    function setVolume(value) {\n        if ( typeof value !== 'number' || isNaN(value) || value < 0.0 || value > 1.0) {\n            throw Constants.BAD_ARGUMENT_ERROR;\n        }\n        getVideoElement().volume = value;\n    }\n\n    /**\n     * Returns the current audio volume, from 0.0 (silent) to 1.0 (loudest).\n     * @returns {number}\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getVolume() {\n        return getVideoElement().volume;\n    }\n\n    /**\n     * The length of the buffer for a given media type, in seconds. Valid media\n     * types are \"video\", \"audio\" and \"fragmentedText\". If no type is passed\n     * in, then the minimum of video, audio and fragmentedText buffer length is\n     * returned. NaN is returned if an invalid type is requested, the\n     * presentation does not contain that type, or if no arguments are passed\n     * and the presentation does not include any adaption sets of valid media\n     * type.\n     *\n     * @param {string} type - the media type of the buffer\n     * @returns {number} The length of the buffer for the given media type, in\n     *  seconds, or NaN\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getBufferLength(type) {\n        const types = [Constants.VIDEO, Constants.AUDIO, Constants.FRAGMENTED_TEXT];\n        if (!type) {\n            const buffer = types.map(\n                t => getTracksFor(t).length > 0 ? getDashMetrics().getCurrentBufferLevel(t) : Number.MAX_VALUE\n            ).reduce(\n                (p, c) => Math.min(p, c)\n            );\n            return buffer === Number.MAX_VALUE ? NaN : buffer;\n        } else {\n            if (types.indexOf(type) !== -1) {\n                const buffer = getDashMetrics().getCurrentBufferLevel(type);\n                return buffer ? buffer : NaN;\n            } else {\n                logger.warn('getBufferLength requested for invalid type');\n                return NaN;\n            }\n        }\n    }\n\n    /**\n     * The timeShiftBufferLength (DVR Window), in seconds.\n     *\n     * @returns {number} The window of allowable play time behind the live point of a live stream.\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getDVRWindowSize() {\n        let metric = dashMetrics.getCurrentDVRInfo();\n        if (!metric) {\n            return 0;\n        }\n        return metric.manifestInfo.DVRWindowSize;\n    }\n\n    /**\n     * This method should only be used with a live stream that has a valid timeShiftBufferLength (DVR Window).\n     * NOTE - If you do not need the raw offset value (i.e. media analytics, tracking, etc) consider using the {@link module:MediaPlayer#seek seek()} method\n     * which will calculate this value for you and set the video element's currentTime property all in one simple call.\n     *\n     * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected.\n     * @returns {number} A value that is relative the available range within the timeShiftBufferLength (DVR Window).\n     * @see {@link module:MediaPlayer#seek seek()}\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getDVRSeekOffset(value) {\n        let metric = dashMetrics.getCurrentDVRInfo();\n        if (!metric) {\n            return 0;\n        }\n\n        let liveDelay = playbackController.getLiveDelay();\n\n        let val = metric.range.start + value;\n\n        if (val > (metric.range.end - liveDelay)) {\n            val = metric.range.end - liveDelay;\n        }\n\n        return val;\n    }\n\n    /**\n     * Current time of the playhead, in seconds.\n     *\n     * If called with no arguments then the returned time value is time elapsed since the start point of the first stream, or if it is a live stream, then the time will be based on the return value of the {@link module:MediaPlayer#duration duration()} method.\n     * However if a stream ID is supplied then time is relative to the start of that stream, or is null if there is no such stream id in the manifest.\n     *\n     * @param {string} streamId - The ID of a stream that the returned playhead time must be relative to the start of. If undefined, then playhead time is relative to the first stream.\n     * @returns {number} The current playhead time of the media, or null.\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function time(streamId) {\n        if (!playbackInitialized) {\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\n        }\n        let t = getVideoElement().currentTime;\n\n        if (streamId !== undefined) {\n            t = streamController.getTimeRelativeToStreamId(t, streamId);\n        } else if (playbackController.getIsDynamic()) {\n            let metric = dashMetrics.getCurrentDVRInfo();\n            t = (metric === null) ? 0 : duration() - (metric.range.end - metric.time);\n        }\n\n        return t;\n    }\n\n    /**\n     * Duration of the media's playback, in seconds.\n     *\n     * @returns {number} The current duration of the media.\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @instance\n     */\n    function duration() {\n        if (!playbackInitialized) {\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\n        }\n        let d = getVideoElement().duration;\n\n        if (playbackController.getIsDynamic()) {\n\n            let metric = dashMetrics.getCurrentDVRInfo();\n            let range;\n\n            if (!metric) {\n                return 0;\n            }\n\n            range = metric.range.end - metric.range.start;\n            d = range < metric.manifestInfo.DVRWindowSize ? range : metric.manifestInfo.DVRWindowSize;\n        }\n        return d;\n    }\n\n    /**\n     * Use this method to get the current playhead time as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.\n     * Note - this property only has meaning for live streams. If called before play() has begun, it will return a value of NaN.\n     *\n     * @returns {number} The current playhead time as UTC timestamp.\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function timeAsUTC() {\n        if (!playbackInitialized) {\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\n        }\n        if (time() < 0) {\n            return NaN;\n        }\n        return getAsUTC(time());\n    }\n\n    /**\n     * Use this method to get the current duration as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.\n     * Note - this property only has meaning for live streams.\n     *\n     * @returns {number} The current duration as UTC timestamp.\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function durationAsUTC() {\n        if (!playbackInitialized) {\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\n        }\n        return getAsUTC(duration());\n    }\n\n    /*\n    ---------------------------------------------------------------------------\n\n        AUTO BITRATE\n\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Gets the top quality BitrateInfo checking portal limit and max allowed.\n     *\n     * It calls getTopQualityIndexFor internally\n     *\n     * @param {string} type - 'video' or 'audio' are the type options.\n     * @memberof module:MediaPlayer\n     * @returns {BitrateInfo | null}\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @instance\n     */\n    function getTopBitrateInfoFor(type) {\n        if (!streamingInitialized) {\n            throw STREAMING_NOT_INITIALIZED_ERROR;\n        }\n        return abrController.getTopBitrateInfoFor(type);\n    }\n\n    /**\n     * Gets the current download quality for media type video, audio or images. For video and audio types the ABR\n     * rules update this value before every new download unless setAutoSwitchQualityFor(type, false) is called. For 'image'\n     * type, thumbnails, there is no ABR algorithm and quality is set manually.\n     *\n     * @param {string} type - 'video', 'audio' or 'image' (thumbnails)\n     * @returns {number} the quality index, 0 corresponding to the lowest bitrate\n     * @memberof module:MediaPlayer\n     * @see {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}\n     * @see {@link module:MediaPlayer#setQualityFor setQualityFor()}\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @instance\n     */\n    function getQualityFor(type) {\n        if (!streamingInitialized) {\n            throw STREAMING_NOT_INITIALIZED_ERROR;\n        }\n        if (type === Constants.IMAGE) {\n            const activeStream = getActiveStream();\n            if (!activeStream) {\n                return -1;\n            }\n            const thumbnailController = activeStream.getThumbnailController();\n\n            return !thumbnailController ? -1 : thumbnailController.getCurrentTrackIndex();\n        }\n        return abrController.getQualityFor(type);\n    }\n\n    /**\n     * Sets the current quality for media type instead of letting the ABR Heuristics automatically selecting it.\n     * This value will be overwritten by the ABR rules unless setAutoSwitchQualityFor(type, false) is called.\n     *\n     * @param {string} type - 'video', 'audio' or 'image'\n     * @param {number} value - the quality index, 0 corresponding to the lowest bitrate\n     * @memberof module:MediaPlayer\n     * @see {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}\n     * @see {@link module:MediaPlayer#getQualityFor getQualityFor()}\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @instance\n     */\n    function setQualityFor(type, value) {\n        if (!streamingInitialized) {\n            throw STREAMING_NOT_INITIALIZED_ERROR;\n        }\n        if (type === Constants.IMAGE) {\n            const activeStream = getActiveStream();\n            if (!activeStream) {\n                return;\n            }\n            const thumbnailController = activeStream.getThumbnailController();\n            if (thumbnailController) {\n                thumbnailController.setTrackByIndex(value);\n            }\n        }\n        abrController.setPlaybackQuality(type, streamController.getActiveStreamInfo(), value);\n    }\n\n    /**\n     * Update the video element size variables\n     * Should be called on window resize (or any other time player is resized). Fullscreen does trigger a window resize event.\n     *\n     * Once windowResizeEventCalled = true, abrController.checkPortalSize() will use element size variables rather than querying clientWidth every time.\n     *\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function updatePortalSize() {\n        abrController.setElementSize();\n        abrController.setWindowResizeEventCalled(true);\n    }\n\n    /*\n    ---------------------------------------------------------------------------\n\n        MEDIA PLAYER CONFIGURATION\n\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * <p>Set to false to prevent stream from auto-playing when the view is attached.</p>\n     *\n     * @param {boolean} value\n     * @default true\n     * @memberof module:MediaPlayer\n     * @see {@link module:MediaPlayer#attachView attachView()}\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not boolean type.\n     * @instance\n     *\n     */\n    function setAutoPlay(value) {\n        checkParameterType(value, 'boolean');\n        autoPlay = value;\n    }\n\n    /**\n     * @returns {boolean} The current autoPlay state.\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getAutoPlay() {\n        return autoPlay;\n    }\n\n    /**\n     * @memberof module:MediaPlayer\n     * @instance\n     * @returns {number|NaN} Current live stream latency in seconds. It is the difference between current time and time position at the playback head.\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n     */\n    function getCurrentLiveLatency() {\n        if (!mediaPlayerInitialized) {\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\n        }\n\n        if (!playbackInitialized) {\n            return NaN;\n        }\n\n        return playbackController.getCurrentLiveLatency();\n    }\n\n    /**\n     * Add a custom ABR Rule\n     * Rule will be apply on next stream if a stream is being played\n     *\n     * @param {string} type - rule type (one of ['qualitySwitchRules','abandonFragmentRules'])\n     * @param {string} rulename - name of rule (used to identify custom rule). If one rule of same name has been added, then existing rule will be updated\n     * @param {object} rule - the rule object instance\n     * @memberof module:MediaPlayer\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments.\n     * @instance\n     */\n    function addABRCustomRule(type, rulename, rule) {\n        mediaPlayerModel.addABRCustomRule(type, rulename, rule);\n    }\n\n    /**\n     * Remove a custom ABR Rule\n     *\n     * @param {string} rulename - name of the rule to be removed\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function removeABRCustomRule(rulename) {\n        mediaPlayerModel.removeABRCustomRule(rulename);\n    }\n\n    /**\n     * Remove all custom rules\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function removeAllABRCustomRule() {\n        mediaPlayerModel.removeABRCustomRule();\n    }\n\n    /**\n     * <p>Allows you to set a scheme and server source for UTC live edge detection for dynamic streams.\n     * If UTCTiming is defined in the manifest, it will take precedence over any time source manually added.</p>\n     * <p>If you have exposed the Date header, use the method {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}.\n     * This will allow the date header on the manifest to be used instead of a time server</p>\n     * @param {string} schemeIdUri - <ul>\n     * <li>urn:mpeg:dash:utc:http-head:2014</li>\n     * <li>urn:mpeg:dash:utc:http-xsdate:2014</li>\n     * <li>urn:mpeg:dash:utc:http-iso:2014</li>\n     * <li>urn:mpeg:dash:utc:direct:2014</li>\n     * </ul>\n     * <p>Some specs referencing early ISO23009-1 drafts incorrectly use\n     * 2012 in the URI, rather than 2014. support these for now.</p>\n     * <ul>\n     * <li>urn:mpeg:dash:utc:http-head:2012</li>\n     * <li>urn:mpeg:dash:utc:http-xsdate:2012</li>\n     * <li>urn:mpeg:dash:utc:http-iso:2012</li>\n     * <li>urn:mpeg:dash:utc:direct:2012</li>\n     * </ul>\n     * @param {string} value - Path to a time source.\n     * @default\n     * <ul>\n     *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>\n     *     <li>value:http://time.akamai.com/?iso&ms/li>\n     * </ul>\n     * @memberof module:MediaPlayer\n     * @see {@link module:MediaPlayer#removeUTCTimingSource removeUTCTimingSource()}\n     * @instance\n     */\n    function addUTCTimingSource(schemeIdUri, value) {\n        mediaPlayerModel.addUTCTimingSource(schemeIdUri, value);\n    }\n\n    /**\n     * <p>Allows you to remove a UTC time source. Both schemeIdUri and value need to match the Dash.vo.UTCTiming properties in order for the\n     * entry to be removed from the array</p>\n     * @param {string} schemeIdUri - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}\n     * @param {string} value - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}\n     * @memberof module:MediaPlayer\n     * @see {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments, schemeIdUri and value are not string type.\n     * @instance\n     */\n    function removeUTCTimingSource(schemeIdUri, value) {\n        mediaPlayerModel.removeUTCTimingSource(schemeIdUri, value);\n    }\n\n    /**\n     * <p>Allows you to clear the stored array of time sources.</p>\n     * <p>Example use: If you have exposed the Date header, calling this method\n     * will allow the date header on the manifest to be used instead of the time server.</p>\n     * <p>Example use: Calling this method, assuming there is not an exposed date header on the manifest,  will default back\n     * to using a binary search to discover the live edge</p>\n     *\n     * @memberof module:MediaPlayer\n     * @see {@link module:MediaPlayer#restoreDefaultUTCTimingSources restoreDefaultUTCTimingSources()}\n     * @instance\n     */\n    function clearDefaultUTCTimingSources() {\n        mediaPlayerModel.clearDefaultUTCTimingSources();\n    }\n\n    /**\n     * <p>Allows you to restore the default time sources after calling {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}</p>\n     *\n     * @default\n     * <ul>\n     *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>\n     *     <li>value:http://time.akamai.com/?iso&ms</li>\n     * </ul>\n     *\n     * @memberof module:MediaPlayer\n     * @see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}\n     * @instance\n     */\n    function restoreDefaultUTCTimingSources() {\n        mediaPlayerModel.restoreDefaultUTCTimingSources();\n    }\n\n    /**\n     * Returns the average throughput computed in the ABR logic\n     *\n     * @param {string} type\n     * @return {number} value\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getAverageThroughput(type) {\n        const throughputHistory = abrController.getThroughputHistory();\n        return throughputHistory ? throughputHistory.getAverageThroughput(type) : 0;\n    }\n\n    /**\n     * Sets whether withCredentials on XHR requests for a particular request\n     * type is true or false\n     *\n     * @default false\n     * @param {string} type - one of HTTPRequest.*_TYPE\n     * @param {boolean} value\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function setXHRWithCredentialsForType(type, value) {\n        mediaPlayerModel.setXHRWithCredentialsForType(type, value);\n    }\n\n    /**\n     * Gets whether withCredentials on XHR requests for a particular request\n     * type is true or false\n     *\n     * @param {string} type - one of HTTPRequest.*_TYPE\n     * @return {boolean}\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getXHRWithCredentialsForType(type) {\n        return mediaPlayerModel.getXHRWithCredentialsForType(type);\n    }\n\n    /*\n    ---------------------------------------------------------------------------\n\n        METRICS\n\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Returns the DashMetrics.js Module. You use this Module to get access to all the public metrics\n     * stored in dash.js\n     *\n     * @see {@link module:DashMetrics}\n     * @returns {Object}\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getDashMetrics() {\n        return dashMetrics;\n    }\n\n    /*\n    ---------------------------------------------------------------------------\n\n        TEXT MANAGEMENT\n\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Set default language for text. If default language is not one of text tracks, dash will choose the first one.\n     *\n     * @param {string} lang - default language\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function setTextDefaultLanguage(lang) {\n        if (textController === undefined) {\n            textController = TextController(context).getInstance();\n        }\n\n        textController.setTextDefaultLanguage(lang);\n    }\n\n    /**\n     * Get default language for text.\n     *\n     * @return {string} the default language if it has been set using setTextDefaultLanguage\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getTextDefaultLanguage() {\n        if (textController === undefined) {\n            textController = TextController(context).getInstance();\n        }\n\n        return textController.getTextDefaultLanguage();\n    }\n\n    /**\n     * Set enabled default state.\n     * This is used to enable/disable text when a file is loaded.\n     * During playback, use enableText to enable text for the file\n     *\n     * @param {boolean} enable - true to enable text, false otherwise\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function setTextDefaultEnabled(enable) {\n        if (textController === undefined) {\n            textController = TextController(context).getInstance();\n        }\n\n        textController.setTextDefaultEnabled(enable);\n    }\n\n    /**\n     * Get enabled default state.\n     *\n     * @return {boolean}  default enable state\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getTextDefaultEnabled() {\n        if (textController === undefined) {\n            textController = TextController(context).getInstance();\n        }\n\n        return textController.getTextDefaultEnabled();\n    }\n\n    /**\n     * Enable/disable text\n     * When enabling text, dash will choose the previous selected text track\n     *\n     * @param {boolean} enable - true to enable text, false otherwise (same as setTextTrack(-1))\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function enableText(enable) {\n        if (textController === undefined) {\n            textController = TextController(context).getInstance();\n        }\n\n        textController.enableText(enable);\n    }\n\n    /**\n     * Enable/disable text\n     * When enabling dash will keep downloading and process fragmented text tracks even if all tracks are in mode \"hidden\"\n     *\n     * @param {boolean} enable - true to enable text streaming even if all text tracks are hidden.\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function enableForcedTextStreaming(enable) {\n        if (textController === undefined) {\n            textController = TextController(context).getInstance();\n        }\n\n        textController.enableForcedTextStreaming(enable);\n    }\n\n    /**\n     * Return if text is enabled\n     *\n     * @return {boolean} return true if text is enabled, false otherwise\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function isTextEnabled() {\n        if (textController === undefined) {\n            textController = TextController(context).getInstance();\n        }\n\n        return textController.isTextEnabled();\n    }\n\n    /**\n     * Use this method to change the current text track for both external time text files and fragmented text tracks. There is no need to\n     * set the track mode on the video object to switch a track when using this method.\n     * @param {number} idx - Index of track based on the order of the order the tracks are added Use -1 to disable all tracks. (turn captions off).  Use module:MediaPlayer#dashjs.MediaPlayer.events.TEXT_TRACK_ADDED.\n     * @see {@link MediaPlayerEvents#event:TEXT_TRACK_ADDED dashjs.MediaPlayer.events.TEXT_TRACK_ADDED}\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function setTextTrack(idx) {\n        if (!playbackInitialized) {\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\n        }\n\n        if (textController === undefined) {\n            textController = TextController(context).getInstance();\n        }\n\n        textController.setTextTrack(idx);\n    }\n\n    function getCurrentTextTrackIndex() {\n        let idx = NaN;\n        if (textController) {\n            idx = textController.getCurrentTrackIdx();\n        }\n        return idx;\n    }\n\n    /**\n     * This method serves to control captions z-index value. If 'true' is passed, the captions will have the highest z-index and be\n     * displayed on top of other html elements. Default value is 'false' (z-index is not set).\n     * @param {boolean} value\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function displayCaptionsOnTop(value) {\n        let textTracks = TextTracks(context).getInstance();\n        textTracks.setConfig({\n            videoModel: videoModel\n        });\n        textTracks.initialize();\n        textTracks.setDisplayCConTop(value);\n    }\n\n    /*\n    ---------------------------------------------------------------------------\n\n        VIDEO ELEMENT MANAGEMENT\n\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns instance of Video Element that was attached by calling attachView()\n     * @returns {Object}\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~ELEMENT_NOT_ATTACHED_ERROR ELEMENT_NOT_ATTACHED_ERROR} if called before attachView function\n     * @instance\n     */\n    function getVideoElement() {\n        if (!videoModel.getElement()) {\n            throw ELEMENT_NOT_ATTACHED_ERROR;\n        }\n        return videoModel.getElement();\n    }\n\n    /**\n     * Use this method to attach an HTML5 VideoElement for dash.js to operate upon.\n     *\n     * @param {Object} element - An HTMLMediaElement that has already been defined in the DOM (or equivalent stub).\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n     * @instance\n     */\n    function attachView(element) {\n        if (!mediaPlayerInitialized) {\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\n        }\n\n        videoModel.setElement(element);\n\n        if (element) {\n            detectProtection();\n            detectMetricsReporting();\n            detectMss();\n\n            if (streamController) {\n                streamController.switchToVideoElement();\n            }\n        }\n\n        if (playbackInitialized) { //Reset if we have been playing before, so this is a new element.\n            resetPlaybackControllers();\n        }\n\n        initializePlayback();\n    }\n\n    /**\n     * Returns instance of Div that was attached by calling attachTTMLRenderingDiv()\n     * @returns {Object}\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getTTMLRenderingDiv() {\n        return videoModel ? videoModel.getTTMLRenderingDiv() : null;\n    }\n\n    /**\n     * Use this method to attach an HTML5 div for dash.js to render rich TTML subtitles.\n     *\n     * @param {HTMLDivElement} div - An unstyled div placed after the video element. It will be styled to match the video size and overlay z-order.\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~ELEMENT_NOT_ATTACHED_ERROR ELEMENT_NOT_ATTACHED_ERROR} if called before attachView function\n     * @instance\n     */\n    function attachTTMLRenderingDiv(div) {\n        if (!videoModel.getElement()) {\n            throw ELEMENT_NOT_ATTACHED_ERROR;\n        }\n        videoModel.setTTMLRenderingDiv(div);\n    }\n\n    /*\n    ---------------------------------------------------------------------------\n\n        STREAM AND TRACK MANAGEMENT\n\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * @param {string} type\n     * @returns {Array}\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @instance\n     */\n    function getBitrateInfoListFor(type) {\n        if (!streamingInitialized) {\n            throw STREAMING_NOT_INITIALIZED_ERROR;\n        }\n        let stream = getActiveStream();\n        return stream ? stream.getBitrateListFor(type) : [];\n    }\n\n    /**\n     * This method returns the list of all available streams from a given manifest\n     * @param {Object} manifest\n     * @returns {Array} list of {@link StreamInfo}\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @instance\n     */\n    function getStreamsFromManifest(manifest) {\n        if (!streamingInitialized) {\n            throw STREAMING_NOT_INITIALIZED_ERROR;\n        }\n        return adapter.getStreamsInfo(manifest);\n    }\n\n    /**\n     * This method returns the list of all available tracks for a given media type\n     * @param {string} type\n     * @returns {Array} list of {@link MediaInfo}\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @instance\n     */\n    function getTracksFor(type) {\n        if (!streamingInitialized) {\n            throw STREAMING_NOT_INITIALIZED_ERROR;\n        }\n        let streamInfo = streamController.getActiveStreamInfo();\n        return mediaController.getTracksFor(type, streamInfo);\n    }\n\n    /**\n     * This method returns the list of all available tracks for a given media type and streamInfo from a given manifest\n     * @param {string} type\n     * @param {Object} manifest\n     * @param {Object} streamInfo\n     * @returns {Array}  list of {@link MediaInfo}\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @instance\n     */\n    function getTracksForTypeFromManifest(type, manifest, streamInfo) {\n        if (!streamingInitialized) {\n            throw STREAMING_NOT_INITIALIZED_ERROR;\n        }\n\n        streamInfo = streamInfo || adapter.getStreamsInfo(manifest, 1)[0];\n\n        return streamInfo ? adapter.getAllMediaInfoForType(streamInfo, type, manifest) : [];\n    }\n\n    /**\n     * @param {string} type\n     * @returns {Object|null} {@link MediaInfo}\n     *\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @instance\n     */\n    function getCurrentTrackFor(type) {\n        if (!streamingInitialized) {\n            throw STREAMING_NOT_INITIALIZED_ERROR;\n        }\n        let streamInfo = streamController.getActiveStreamInfo();\n        return mediaController.getCurrentTrackFor(type, streamInfo);\n    }\n\n    /**\n     * This method allows to set media settings that will be used to pick the initial track. Format of the settings\n     * is following: <br />\n     * {lang: langValue (can be either a string or a regex to match),\n     *  viewpoint: viewpointValue,\n     *  audioChannelConfiguration: audioChannelConfigurationValue,\n     *  accessibility: accessibilityValue,\n     *  role: roleValue}\n     *\n     * @param {string} type\n     * @param {Object} value\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n     * @instance\n     */\n    function setQualityForSettingsFor(type, value) {\n        if (!mediaPlayerInitialized) {\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\n        }\n        mediaController.setInitialSettings(type, value);\n    }\n\n    /**\n     * This method returns media settings that is used to pick the initial track. Format of the settings\n     * is following:\n     * {lang: langValue,\n     *  viewpoint: viewpointValue,\n     *  audioChannelConfiguration: audioChannelConfigurationValue,\n     *  accessibility: accessibilityValue,\n     *  role: roleValue}\n     * @param {string} type\n     * @returns {Object}\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n     * @instance\n     */\n    function getInitialMediaSettingsFor(type) {\n        if (!mediaPlayerInitialized) {\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\n        }\n        return mediaController.getInitialSettings(type);\n    }\n\n    /**\n     * @param {MediaInfo} track - instance of {@link MediaInfo}\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @instance\n     */\n    function setCurrentTrack(track) {\n        if (!streamingInitialized) {\n            throw STREAMING_NOT_INITIALIZED_ERROR;\n        }\n        mediaController.setTrack(track);\n    }\n\n    /**\n     * This method returns the current track switch mode.\n     *\n     * @param {string} type\n     * @returns {string} mode\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n     * @instance\n     */\n    function getTrackSwitchModeFor(type) {\n        if (!mediaPlayerInitialized) {\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\n        }\n        return mediaController.getSwitchMode(type);\n    }\n\n    /**\n     * This method sets the current track switch mode. Available options are:\n     *\n     * MediaController.TRACK_SWITCH_MODE_NEVER_REPLACE\n     * (used to forbid clearing the buffered data (prior to current playback position) after track switch.\n     * Defers to fastSwitchEnabled for placement of new data. Default for video)\n     *\n     * MediaController.TRACK_SWITCH_MODE_ALWAYS_REPLACE\n     * (used to clear the buffered data (prior to current playback position) after track switch. Default for audio)\n     *\n     * @param {string} type\n     * @param {string} mode\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n     * @instance\n     */\n    function setTrackSwitchModeFor(type, mode) {\n        if (!mediaPlayerInitialized) {\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\n        }\n        mediaController.setSwitchMode(type, mode);\n    }\n\n    /**\n     * This method sets the selection mode for the initial track. This mode defines how the initial track will be selected\n     * if no initial media settings are set. If initial media settings are set this parameter will be ignored. Available options are:\n     *\n     * MediaController.TRACK_SELECTION_MODE_HIGHEST_BITRATE\n     * this mode makes the player select the track with a highest bitrate. This mode is a default mode.\n     *\n     * MediaController.TRACK_SELECTION_MODE_WIDEST_RANGE\n     * this mode makes the player select the track with a widest range of bitrates\n     *\n     * @param {string} mode\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n     * @instance\n     */\n    function setSelectionModeForInitialTrack(mode) {\n        if (!mediaPlayerInitialized) {\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\n        }\n        mediaController.setSelectionModeForInitialTrack(mode);\n    }\n\n    /**\n     * This method returns the track selection mode.\n     *\n     * @returns {string} mode\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n     * @instance\n     */\n    function getSelectionModeForInitialTrack() {\n        if (!mediaPlayerInitialized) {\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\n        }\n        return mediaController.getSelectionModeForInitialTrack();\n    }\n\n    /*\n    ---------------------------------------------------------------------------\n\n        PROTECTION MANAGEMENT\n\n    ---------------------------------------------------------------------------\n    /**\n     * Detects if Protection is included and returns an instance of ProtectionController.js\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getProtectionController() {\n        return detectProtection();\n    }\n\n    /**\n     * Will override dash.js protection controller.\n     * @param {ProtectionController} value - valid protection controller instance.\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function attachProtectionController(value) {\n        protectionController = value;\n    }\n\n    /**\n     * Sets Protection Data required to setup the Protection Module (DRM). Protection Data must\n     * be set before initializing MediaPlayer or, once initialized, before PROTECTION_CREATED event is fired.\n     * @see {@link module:MediaPlayer#initialize initialize()}\n     * @see {@link ProtectionEvents#event:PROTECTION_CREATED dashjs.Protection.events.PROTECTION_CREATED}\n     * @param {ProtectionData} value - object containing\n     * property names corresponding to key system name strings and associated\n     * values being instances of.\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function setProtectionData(value) {\n        protectionData = value;\n\n        // Propagate changes in case StreamController is already created\n        if (streamController) {\n            streamController.setProtectionData(protectionData);\n        }\n    }\n\n    /*\n    ---------------------------------------------------------------------------\n\n        THUMBNAILS MANAGEMENT\n\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Return the thumbnail at time position.\n     * @returns {Thumbnail|null} - Thumbnail for the given time position. It returns null in case there are is not a thumbnails representation or\n     * if it doesn't contain a thumbnail for the given time position.\n     * @param {number} time - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected\n     * @param {function} callback - A Callback function provided when retrieving thumbnail\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getThumbnail(time, callback) {\n        if (time < 0) {\n            return null;\n        }\n        const s = playbackController.getIsDynamic() ? getDVRSeekOffset(time) : time;\n        const stream = streamController.getStreamForTime(s);\n        if (stream === null) {\n            return null;\n        }\n\n        const thumbnailController = stream.getThumbnailController();\n        if (!thumbnailController) {\n            return null;\n        }\n\n        const timeInPeriod = streamController.getTimeRelativeToStreamId(s, stream.getId());\n        return thumbnailController.get(timeInPeriod, callback);\n    }\n\n    /*\n    ---------------------------------------------------------------------------\n\n        TOOLS AND OTHERS FUNCTIONS\n\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Allows application to retrieve a manifest.  Manifest loading is asynchro\n     * nous and\n     * requires the app-provided callback function\n     *\n     * @param {string} url - url the manifest url\n     * @param {function} callback - A Callback function provided when retrieving manifests\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function retrieveManifest(url, callback) {\n        let manifestLoader = createManifestLoader();\n        let self = this;\n\n        const handler = function (e) {\n            if (!e.error) {\n                callback(e.manifest);\n            } else {\n                callback(null, e.error);\n            }\n            eventBus.off(Events.INTERNAL_MANIFEST_LOADED, handler, self);\n            manifestLoader.reset();\n        };\n\n        eventBus.on(Events.INTERNAL_MANIFEST_LOADED, handler, self);\n\n        uriFragmentModel.initialize(url);\n        manifestLoader.load(url);\n    }\n\n    /**\n     * Returns the source string or manifest that was attached by calling attachSource()\n     * @returns {string | manifest}\n     * @memberof module:MediaPlayer\n     * @throws {@link module:MediaPlayer~SOURCE_NOT_ATTACHED_ERROR SOURCE_NOT_ATTACHED_ERROR} if called before attachSource function\n     * @instance\n     */\n    function getSource() {\n        if (!source) {\n            throw SOURCE_NOT_ATTACHED_ERROR;\n        }\n        return source;\n    }\n\n    /**\n     * Use this method to set a source URL to a valid MPD manifest file OR\n     * a previously downloaded and parsed manifest object.  Optionally, can\n     * also provide protection information\n     *\n     * @param {string|Object} urlOrManifest - A URL to a valid MPD manifest file, or a\n     * parsed manifest object.\n     *\n     *\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\n     *\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function attachSource(urlOrManifest) {\n        if (!mediaPlayerInitialized) {\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\n        }\n\n        if (typeof urlOrManifest === 'string') {\n            uriFragmentModel.initialize(urlOrManifest);\n        }\n\n        source = urlOrManifest;\n\n        if (streamingInitialized || playbackInitialized) {\n            resetPlaybackControllers();\n        }\n\n        if (isReady()) {\n            initializePlayback();\n        }\n    }\n\n    /**\n     * Get the current settings object being used on the player.\n     * @returns {PlayerSettings} The settings object being used.\n     *\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getSettings() {\n        return settings.get();\n    }\n\n    /**\n     * @summary Update the current settings object being used on the player. Anything left unspecified is not modified.\n     * @param {PlayerSettings} settingsObj - An object corresponding to the settings definition.\n     * @description This function does not update the entire object, only properties in the passed in object are updated.\n     *\n     * This means that updateSettings({a: x}) and updateSettings({b: y}) are functionally equivalent to\n     * updateSettings({a: x, b: y}). If the default values are required again, @see{@link resetSettings}.\n     * @example\n     * player.updateSettings({\n     *      streaming: {\n     *          liveDelayFragmentCount: 8\n     *          abr: {\n     *              maxBitrate: { audio: 100, video: 1000 }\n     *          }\n     *      }\n     *  });\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function updateSettings(settingsObj) {\n        settings.update(settingsObj);\n    }\n\n    /**\n     * Resets the settings object back to the default.\n     *\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function resetSettings() {\n        settings.reset();\n    }\n\n    /**\n     * A utility methods which converts UTC timestamp value into a valid time and date string.\n     *\n     * @param {number} time - UTC timestamp to be converted into date and time.\n     * @param {string} locales - a region identifier (i.e. en_US).\n     * @param {boolean} hour12 - 12 vs 24 hour. Set to true for 12 hour time formatting.\n     * @param {boolean} withDate - default is false. Set to true to append current date to UTC time format.\n     * @returns {string} A formatted time and date string.\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function formatUTC(time, locales, hour12, withDate = false) {\n        const dt = new Date(time * 1000);\n        const d = dt.toLocaleDateString(locales);\n        const t = dt.toLocaleTimeString(locales, {\n            hour12: hour12\n        });\n        return withDate ? t + ' ' + d : t;\n    }\n\n    /**\n     * A utility method which converts seconds into TimeCode (i.e. 300 --> 05:00).\n     *\n     * @param {number} value - A number in seconds to be converted into a formatted time code.\n     * @returns {string} A formatted time code string.\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function convertToTimeCode(value) {\n        value = Math.max(value, 0);\n\n        let h = Math.floor(value / 3600);\n        let m = Math.floor((value % 3600) / 60);\n        let s = Math.floor((value % 3600) % 60);\n        return (h === 0 ? '' : (h < 10 ? '0' + h.toString() + ':' : h.toString() + ':')) + (m < 10 ? '0' + m.toString() : m.toString()) + ':' + (s < 10 ? '0' + s.toString() : s.toString());\n    }\n\n    /**\n     * This method should be used to extend or replace internal dash.js objects.\n     * There are two ways to extend dash.js (determined by the override argument):\n     * <ol>\n     * <li>If you set override to true any public method or property in your custom object will\n     * override the dash.js parent object's property(ies) and will be used instead but the\n     * dash.js parent module will still be created.</li>\n     *\n     * <li>If you set override to false your object will completely replace the dash.js object.\n     * (Note: This is how it was in 1.x of Dash.js with Dijon).</li>\n     * </ol>\n     * <b>When you extend you get access to this.context, this.factory and this.parent to operate with in your custom object.</b>\n     * <ul>\n     * <li><b>this.context</b> - can be used to pass context for singleton access.</li>\n     * <li><b>this.factory</b> - can be used to call factory.getSingletonInstance().</li>\n     * <li><b>this.parent</b> - is the reference of the parent object to call other public methods. (this.parent is excluded if you extend with override set to false or option 2)</li>\n     * </ul>\n     * <b>You must call extend before you call initialize</b>\n     * @see {@link module:MediaPlayer#initialize initialize()}\n     * @param {string} parentNameString - name of parent module\n     * @param {Object} childInstance - overriding object\n     * @param {boolean} override - replace only some methods (true) or the whole object (false)\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function extend(parentNameString, childInstance, override) {\n        FactoryMaker.extend(parentNameString, childInstance, override, context);\n    }\n\n    /**\n     * This method returns the active stream\n     *\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getActiveStream() {\n        if (!streamingInitialized) {\n            throw STREAMING_NOT_INITIALIZED_ERROR;\n        }\n        let streamInfo = streamController.getActiveStreamInfo();\n        return streamInfo ? streamController.getStreamById(streamInfo.id) : null;\n    }\n\n    //***********************************\n    // PRIVATE METHODS\n    //***********************************\n\n    function resetPlaybackControllers() {\n        playbackInitialized = false;\n        streamingInitialized = false;\n        adapter.reset();\n        streamController.reset();\n        playbackController.reset();\n        abrController.reset();\n        mediaController.reset();\n        textController.reset();\n        if (protectionController) {\n            if (settings.get().streaming.keepProtectionMediaKeys) {\n                protectionController.stop();\n            } else {\n                protectionController.reset();\n                protectionController = null;\n                detectProtection();\n            }\n        }\n        cmcdModel.reset();\n    }\n\n    function createPlaybackControllers() {\n        // creates or get objects instances\n        const manifestLoader = createManifestLoader();\n\n        if (!streamController) {\n            streamController = StreamController(context).getInstance();\n        }\n\n        // configure controllers\n        mediaController.setConfig({\n            domStorage: domStorage\n        });\n\n        streamController.setConfig({\n            capabilities: capabilities,\n            manifestLoader: manifestLoader,\n            manifestModel: manifestModel,\n            mediaPlayerModel: mediaPlayerModel,\n            protectionController: protectionController,\n            adapter: adapter,\n            dashMetrics: dashMetrics,\n            errHandler: errHandler,\n            timelineConverter: timelineConverter,\n            videoModel: videoModel,\n            playbackController: playbackController,\n            abrController: abrController,\n            mediaController: mediaController,\n            textController: textController,\n            settings: settings\n        });\n\n        playbackController.setConfig({\n            streamController: streamController,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            adapter: adapter,\n            videoModel: videoModel,\n            timelineConverter: timelineConverter,\n            uriFragmentModel: uriFragmentModel,\n            settings: settings\n        });\n\n        abrController.setConfig({\n            streamController: streamController,\n            domStorage: domStorage,\n            mediaPlayerModel: mediaPlayerModel,\n            dashMetrics: dashMetrics,\n            adapter: adapter,\n            videoModel: videoModel,\n            settings: settings\n        });\n        abrController.createAbrRulesCollection();\n\n        textController.setConfig({\n            errHandler: errHandler,\n            manifestModel: manifestModel,\n            adapter: adapter,\n            mediaController: mediaController,\n            streamController: streamController,\n            videoModel: videoModel\n        });\n\n        cmcdModel.setConfig({\n            abrController,\n            dashMetrics,\n            playbackController\n        });\n\n        // initialises controller\n        streamController.initialize(autoPlay, protectionData);\n        cmcdModel.initialize();\n    }\n\n    function createManifestLoader() {\n        return ManifestLoader(context).create({\n            errHandler: errHandler,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            requestModifier: RequestModifier(context).getInstance(),\n            mssHandler: mssHandler,\n            settings: settings\n        });\n    }\n\n    function detectProtection() {\n        if (protectionController) {\n            return protectionController;\n        }\n        // do not require Protection as dependencies as this is optional and intended to be loaded separately\n        let Protection = dashjs.Protection; /* jshint ignore:line */\n        if (typeof Protection === 'function') { //TODO need a better way to register/detect plugin components\n            let protection = Protection(context).create();\n            Events.extend(Protection.events);\n            MediaPlayerEvents.extend(Protection.events, {\n                publicOnly: true\n            });\n            Errors.extend(Protection.errors);\n            if (!capabilities) {\n                capabilities = Capabilities(context).getInstance();\n            }\n            protectionController = protection.createProtectionSystem({\n                debug: debug,\n                errHandler: errHandler,\n                videoModel: videoModel,\n                capabilities: capabilities,\n                eventBus: eventBus,\n                events: Events,\n                BASE64: BASE64,\n                constants: Constants\n            });\n            return protectionController;\n        }\n\n        return null;\n    }\n\n    function detectMetricsReporting() {\n        if (metricsReportingController) {\n            return;\n        }\n        // do not require MetricsReporting as dependencies as this is optional and intended to be loaded separately\n        let MetricsReporting = dashjs.MetricsReporting; /* jshint ignore:line */\n        if (typeof MetricsReporting === 'function') { //TODO need a better way to register/detect plugin components\n            let metricsReporting = MetricsReporting(context).create();\n\n            metricsReportingController = metricsReporting.createMetricsReporting({\n                debug: debug,\n                eventBus: eventBus,\n                mediaElement: getVideoElement(),\n                adapter: adapter,\n                dashMetrics: dashMetrics,\n                events: Events,\n                constants: Constants,\n                metricsConstants: MetricsConstants\n            });\n        }\n    }\n\n    function detectMss() {\n        if (mssHandler) {\n            return;\n        }\n        // do not require MssHandler as dependencies as this is optional and intended to be loaded separately\n        let MssHandler = dashjs.MssHandler; /* jshint ignore:line */\n        if (typeof MssHandler === 'function') { //TODO need a better way to register/detect plugin components\n            Errors.extend(MssHandler.errors);\n            mssHandler = MssHandler(context).create({\n                eventBus: eventBus,\n                mediaPlayerModel: mediaPlayerModel,\n                dashMetrics: dashMetrics,\n                manifestModel: manifestModel,\n                playbackController: playbackController,\n                protectionController: protectionController,\n                baseURLController: BaseURLController(context).getInstance(),\n                errHandler: errHandler,\n                events: Events,\n                constants: Constants,\n                debug: debug,\n                initSegmentType: HTTPRequest.INIT_SEGMENT_TYPE,\n                BASE64: BASE64,\n                ISOBoxer: ISOBoxer,\n                settings: settings\n            });\n        }\n    }\n\n    function getAsUTC(valToConvert) {\n        let metric = dashMetrics.getCurrentDVRInfo();\n        let availableFrom,\n            utcValue;\n\n        if (!metric) {\n            return 0;\n        }\n        availableFrom = metric.manifestInfo.availableFrom.getTime() / 1000;\n        utcValue = valToConvert + (availableFrom + metric.range.start);\n        return utcValue;\n    }\n\n    function initializePlayback() {\n        if (!streamingInitialized && source) {\n            streamingInitialized = true;\n            logger.info('Streaming Initialized');\n            createPlaybackControllers();\n\n            if (typeof source === 'string') {\n                streamController.load(source);\n            } else {\n                streamController.loadWithManifest(source);\n            }\n        }\n\n        if (!playbackInitialized && isReady()) {\n            playbackInitialized = true;\n            logger.info('Playback Initialized');\n        }\n    }\n\n    /**\n     * Returns the DashAdapter.js Module.\n     *\n     * @see {@link module:DashAdapter}\n     * @returns {Object}\n     * @memberof module:MediaPlayer\n     * @instance\n     */\n    function getDashAdapter() {\n        return adapter;\n    }\n\n    instance = {\n        initialize: initialize,\n        setConfig: setConfig,\n        on: on,\n        off: off,\n        extend: extend,\n        attachView: attachView,\n        attachSource: attachSource,\n        isReady: isReady,\n        preload: preload,\n        play: play,\n        isPaused: isPaused,\n        pause: pause,\n        isSeeking: isSeeking,\n        isDynamic: isDynamic,\n        seek: seek,\n        setPlaybackRate: setPlaybackRate,\n        getPlaybackRate: getPlaybackRate,\n        setMute: setMute,\n        isMuted: isMuted,\n        setVolume: setVolume,\n        getVolume: getVolume,\n        time: time,\n        duration: duration,\n        timeAsUTC: timeAsUTC,\n        durationAsUTC: durationAsUTC,\n        getActiveStream: getActiveStream,\n        getDVRWindowSize: getDVRWindowSize,\n        getDVRSeekOffset: getDVRSeekOffset,\n        convertToTimeCode: convertToTimeCode,\n        formatUTC: formatUTC,\n        getVersion: getVersion,\n        getDebug: getDebug,\n        getBufferLength: getBufferLength,\n        getTTMLRenderingDiv: getTTMLRenderingDiv,\n        getVideoElement: getVideoElement,\n        getSource: getSource,\n        getCurrentLiveLatency: getCurrentLiveLatency,\n        getTopBitrateInfoFor: getTopBitrateInfoFor,\n        setAutoPlay: setAutoPlay,\n        getAutoPlay: getAutoPlay,\n        getDashMetrics: getDashMetrics,\n        getQualityFor: getQualityFor,\n        setQualityFor: setQualityFor,\n        updatePortalSize: updatePortalSize,\n        setTextDefaultLanguage: setTextDefaultLanguage,\n        getTextDefaultLanguage: getTextDefaultLanguage,\n        setTextDefaultEnabled: setTextDefaultEnabled,\n        getTextDefaultEnabled: getTextDefaultEnabled,\n        enableText: enableText,\n        enableForcedTextStreaming: enableForcedTextStreaming,\n        isTextEnabled: isTextEnabled,\n        setTextTrack: setTextTrack,\n        getBitrateInfoListFor: getBitrateInfoListFor,\n        getStreamsFromManifest: getStreamsFromManifest,\n        getTracksFor: getTracksFor,\n        getTracksForTypeFromManifest: getTracksForTypeFromManifest,\n        getCurrentTrackFor: getCurrentTrackFor,\n        setInitialMediaSettingsFor: setQualityForSettingsFor,\n        getInitialMediaSettingsFor: getInitialMediaSettingsFor,\n        setCurrentTrack: setCurrentTrack,\n        getTrackSwitchModeFor: getTrackSwitchModeFor,\n        setTrackSwitchModeFor: setTrackSwitchModeFor,\n        setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,\n        getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,\n        addABRCustomRule: addABRCustomRule,\n        removeABRCustomRule: removeABRCustomRule,\n        removeAllABRCustomRule: removeAllABRCustomRule,\n        getAverageThroughput: getAverageThroughput,\n        retrieveManifest: retrieveManifest,\n        addUTCTimingSource: addUTCTimingSource,\n        removeUTCTimingSource: removeUTCTimingSource,\n        clearDefaultUTCTimingSources: clearDefaultUTCTimingSources,\n        restoreDefaultUTCTimingSources: restoreDefaultUTCTimingSources,\n        setXHRWithCredentialsForType: setXHRWithCredentialsForType,\n        getXHRWithCredentialsForType: getXHRWithCredentialsForType,\n        getProtectionController: getProtectionController,\n        attachProtectionController: attachProtectionController,\n        setProtectionData: setProtectionData,\n        displayCaptionsOnTop: displayCaptionsOnTop,\n        attachTTMLRenderingDiv: attachTTMLRenderingDiv,\n        getCurrentTextTrackIndex: getCurrentTextTrackIndex,\n        getThumbnail: getThumbnail,\n        getDashAdapter: getDashAdapter,\n        getSettings: getSettings,\n        updateSettings: updateSettings,\n        resetSettings: resetSettings,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nMediaPlayer.__dashjs_factory_name = 'MediaPlayer';\nconst factory = FactoryMaker.getClassFactory(MediaPlayer);\nfactory.events = MediaPlayerEvents;\nfactory.errors = Errors;\nFactoryMaker.updateClassFactory(MediaPlayer.__dashjs_factory_name, factory);\n\nexport default factory;\n"]}