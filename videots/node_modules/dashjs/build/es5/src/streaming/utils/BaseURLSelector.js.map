{"version":3,"sources":["../../../../../src/streaming/utils/BaseURLSelector.js"],"names":["BaseURLSelector","context","eventBus","getInstance","instance","serviceLocationBlacklistController","basicSelector","dvbSelector","selector","setup","create","updateEventName","Events","SERVICE_LOCATION_BLACKLIST_CHANGED","addBlacklistEventName","SERVICE_LOCATION_BLACKLIST_ADD","blacklistController","setConfig","config","chooseSelector","isDVB","select","data","baseUrls","selectedIdx","isNaN","selectedBaseUrl","trigger","URL_RESOLUTION_FAILED","error","DashJSError","Errors","URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE","URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE","reset","indexOf","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"sEA+BA,gD,6CACA,6C,iDACA,gD,6CACA,uE,uEACA,4D,uDACA,gE,2DACA,qD,yDACA,8C,uDACA,yD,mFAEA,QAASA,gBAAT,EAA2B,CAEvB,GAAMC,SAAU,KAAKA,OAArB,CACA,GAAMC,UAAW,uBAASD,OAAT,EAAkBE,WAAlB,EAAjB,CAEA,GAAIC,gBAAJ,CACIC,yCADJ,CAEIC,oBAFJ,CAGIC,kBAHJ,CAIIC,eAJJ,CAMA,QAASC,MAAT,EAAiB,CACbJ,mCAAqC,kCAAoBJ,OAApB,EAA6BS,MAA7B,CAAoC,CACrEC,gBAAwBC,iBAAOC,kCADsC,CAErEC,sBAA0BF,iBAAOG,8BAFoC,CAApC,CAArC,CAKAT,cAAgB,4BAAcL,OAAd,EAAuBS,MAAvB,CAA8B,CAC1CM,oBAAqBX,kCADqB,CAA9B,CAAhB,CAIAE,YAAc,0BAAYN,OAAZ,EAAqBS,MAArB,CAA4B,CACtCM,oBAAqBX,kCADiB,CAA5B,CAAd,CAIAG,SAAWF,aAAX,CACH,CAED,QAASW,UAAT,CAAmBC,MAAnB,CAA2B,CACvB,GAAIA,OAAOV,QAAX,CAAqB,CACjBA,SAAWU,OAAOV,QAAlB,CACH,CACJ,CAED,QAASW,eAAT,CAAwBC,KAAxB,CAA+B,CAC3B,wCAAmBA,KAAnB,CAA0B,SAA1B,EACAZ,SAAWY,MAAQb,WAAR,CAAsBD,aAAjC,CACH,CAED,QAASe,OAAT,CAAgBC,IAAhB,CAAsB,CAClB,GAAI,CAACA,IAAL,CAAW,CACP,OACH,CACD,GAAMC,UAAWD,KAAKC,QAAtB,CACA,GAAMC,aAAcF,KAAKE,WAAzB,CAEA;AACA;AACA;AACA,GAAI,CAACC,MAAMD,WAAN,CAAL,CAAyB,CACrB,MAAOD,UAASC,WAAT,CAAP,CACH,CAED,GAAIE,iBAAkBlB,SAASa,MAAT,CAAgBE,QAAhB,CAAtB,CAEA,GAAI,CAACG,eAAL,CAAsB,CAClBxB,SAASyB,OAAT,CACIf,iBAAOgB,qBADX,CACkC,CAC1BC,MAAO,GAAIC,sBAAJ,CACHC,iBAAOC,wCADJ,CAEHD,iBAAOE,2CAFJ,CADmB,CADlC,EAQA,GAAIzB,WAAaF,aAAjB,CAAgC,CAC5B4B,QACH,CACD,OACH,CAEDZ,KAAKE,WAAL,CAAmBD,SAASY,OAAT,CAAiBT,eAAjB,CAAnB,CAEA,MAAOA,gBAAP,CACH,CAED,QAASQ,MAAT,EAAiB,CACb7B,mCAAmC6B,KAAnC,GACH,CAED9B,SAAW,CACPe,eAAgBA,cADT,CAEPE,OAAQA,MAFD,CAGPa,MAAOA,KAHA,CAIPjB,UAAWA,SAJJ,CAAX,CAOAR,QAEA,MAAOL,SAAP,CACH,CAlID;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoIAJ,gBAAgBoC,qBAAhB,CAAwC,iBAAxC,C,gBACeC,uBAAaC,eAAb,CAA6BtC,eAA7B,C","file":"BaseURLSelector.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport Errors from '../../core/errors/Errors';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport BlacklistController from '../controllers/BlacklistController';\nimport DVBSelector from './baseUrlResolution/DVBSelector';\nimport BasicSelector from './baseUrlResolution/BasicSelector';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport DashJSError from '../vo/DashJSError';\nimport { checkParameterType } from '../utils/SupervisorTools';\n\nfunction BaseURLSelector() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        serviceLocationBlacklistController,\n        basicSelector,\n        dvbSelector,\n        selector;\n\n    function setup() {\n        serviceLocationBlacklistController = BlacklistController(context).create({\n            updateEventName:        Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            addBlacklistEventName:    Events.SERVICE_LOCATION_BLACKLIST_ADD\n        });\n\n        basicSelector = BasicSelector(context).create({\n            blacklistController: serviceLocationBlacklistController\n        });\n\n        dvbSelector = DVBSelector(context).create({\n            blacklistController: serviceLocationBlacklistController\n        });\n\n        selector = basicSelector;\n    }\n\n    function setConfig(config) {\n        if (config.selector) {\n            selector = config.selector;\n        }\n    }\n\n    function chooseSelector(isDVB) {\n        checkParameterType(isDVB, 'boolean');\n        selector = isDVB ? dvbSelector : basicSelector;\n    }\n\n    function select(data) {\n        if (!data) {\n            return;\n        }\n        const baseUrls = data.baseUrls;\n        const selectedIdx = data.selectedIdx;\n\n        // Once a random selection has been carried out amongst a group of BaseURLs with the same\n        // @priority attribute value, then that choice should be re-used if the selection needs to be made again\n        // unless the blacklist has been modified or the available BaseURLs have changed.\n        if (!isNaN(selectedIdx)) {\n            return baseUrls[selectedIdx];\n        }\n\n        let selectedBaseUrl = selector.select(baseUrls);\n\n        if (!selectedBaseUrl) {\n            eventBus.trigger(\n                Events.URL_RESOLUTION_FAILED, {\n                    error: new DashJSError(\n                        Errors.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE,\n                        Errors.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE\n                    )\n                }\n            );\n            if (selector === basicSelector) {\n                reset();\n            }\n            return;\n        }\n\n        data.selectedIdx = baseUrls.indexOf(selectedBaseUrl);\n\n        return selectedBaseUrl;\n    }\n\n    function reset() {\n        serviceLocationBlacklistController.reset();\n    }\n\n    instance = {\n        chooseSelector: chooseSelector,\n        select: select,\n        reset: reset,\n        setConfig: setConfig\n    };\n\n    setup();\n\n    return instance;\n}\n\nBaseURLSelector.__dashjs_factory_name = 'BaseURLSelector';\nexport default FactoryMaker.getClassFactory(BaseURLSelector);\n"]}