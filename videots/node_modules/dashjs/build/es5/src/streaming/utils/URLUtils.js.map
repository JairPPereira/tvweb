{"version":3,"sources":["../../../../../src/streaming/utils/URLUtils.js"],"names":["URLUtils","resolveFunction","schemeRegex","httpUrlRegex","httpsUrlRegex","originRegex","nativeURLResolver","url","baseUrl","window","URL","toString","e","dumbURLResolver","baseUrlParseFunc","parseBaseUrl","isRelative","isPathAbsolute","parseOrigin","isSchemeRelative","parseScheme","base","joinChar","charAt","length","join","setup","u","slashIndex","indexOf","lastSlashIndex","lastIndexOf","substring","matches","match","test","isHTTPURL","isHTTPS","resolve","instance","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"sEA+BA,qD,4IAEA;;;;;;;GAQA,QAASA,SAAT,EAAoB,CAEhB,GAAIC,uBAAJ,CAEA,GAAMC,aAAc,uBAApB,CACA,GAAMC,cAAe,eAArB,CACA,GAAMC,eAAgB,cAAtB,CACA,GAAMC,aAAc,sCAApB,CAEA;;;;;;;;;;OAWA,GAAMC,mBAAoB,QAApBA,kBAAoB,CAACC,GAAD,CAAMC,OAAN,CAAkB,CACxC,GAAI,CACA;AACA,MAAO,IAAIC,QAAOC,GAAX,CAAeH,GAAf,CAAoBC,OAApB,EAA6BG,QAA7B,EAAP,CACH,CAAC,MAAOC,CAAP,CAAU,CACR,MAAOL,IAAP,CACH,CACJ,CAPD,CASA;;;;;;;;;;;;OAaA,GAAMM,iBAAkB,QAAlBA,gBAAkB,CAACN,GAAD,CAAMC,OAAN,CAAkB,CACtC,GAAIM,kBAAmBC,YAAvB,CAEA,GAAI,CAACP,OAAL,CAAc,CACV,MAAOD,IAAP,CACH,CAED,GAAI,CAACS,WAAWT,GAAX,CAAL,CAAsB,CAClB,MAAOA,IAAP,CACH,CAED,GAAIU,eAAeV,GAAf,CAAJ,CAAyB,CACrBO,iBAAmBI,WAAnB,CACH,CAED,GAAIC,iBAAiBZ,GAAjB,CAAJ,CAA2B,CACvBO,iBAAmBM,WAAnB,CACH,CAED,GAAMC,MAAOP,iBAAiBN,OAAjB,CAAb,CACA,GAAMc,UACAD,KAAKE,MAAL,CAAYF,KAAKG,MAAL,CAAc,CAA1B,IAAiC,GAAjC,EACAjB,IAAIgB,MAAJ,CAAW,CAAX,IAAkB,GADlB,CAEA,GAFA,CAEM,EAHZ,CAKA,MAAO,CAACF,IAAD,CAAOd,GAAP,EAAYkB,IAAZ,CAAiBH,QAAjB,CAAP,CACH,CA1BD,CA4BA,QAASI,MAAT,EAAiB,CACb,GAAI,CACA,GAAMC,GAAI,GAAIlB,QAAOC,GAAX,CAAe,GAAf,CAAoB,UAApB,CAAV,CAA2C;AAC3CT,gBAAkBK,iBAAlB,CACH,CAAC,MAAOM,CAAP,CAAU,CACR;AACH,CALD,OAKU,CACNX,gBAAkBA,iBAAmBY,eAArC,CACH,CACJ,CAED;;;;;;OAOA,QAASE,aAAT,CAAsBR,GAAtB,CAA2B,CACvB,GAAMqB,YAAarB,IAAIsB,OAAJ,CAAY,GAAZ,CAAnB,CACA,GAAMC,gBAAiBvB,IAAIwB,WAAJ,CAAgB,GAAhB,CAAvB,CAEA,GAAIH,aAAe,CAAC,CAApB,CAAuB,CACnB;AACA,GAAIE,iBAAmBF,WAAa,CAApC,CAAuC,CACnC,MAAOrB,IAAP,CACH,CAED,GAAIA,IAAIsB,OAAJ,CAAY,GAAZ,IAAqB,CAAC,CAA1B,CAA6B,CACzBtB,IAAMA,IAAIyB,SAAJ,CAAc,CAAd,CAAiBzB,IAAIsB,OAAJ,CAAY,GAAZ,CAAjB,CAAN,CACH,CAED,MAAOtB,KAAIyB,SAAJ,CAAc,CAAd,CAAiBF,eAAiB,CAAlC,CAAP,CACH,CAED,MAAO,EAAP,CACH,CAED;;;;;;;OAQA,QAASZ,YAAT,CAAqBX,GAArB,CAA0B,CACtB,GAAM0B,SAAU1B,IAAI2B,KAAJ,CAAU7B,WAAV,CAAhB,CAEA,GAAI4B,OAAJ,CAAa,CACT,MAAOA,SAAQ,CAAR,CAAP,CACH,CAED,MAAO,EAAP,CACH,CAED;;;;;;OAOA,QAASb,YAAT,CAAqBb,GAArB,CAA0B,CACtB,GAAM0B,SAAU1B,IAAI2B,KAAJ,CAAUhC,WAAV,CAAhB,CAEA,GAAI+B,OAAJ,CAAa,CACT,MAAOA,SAAQ,CAAR,CAAP,CACH,CAED,MAAO,EAAP,CACH,CAED;;;;;;OAOA,QAASjB,WAAT,CAAoBT,GAApB,CAAyB,CACrB,MAAO,CAACL,YAAYiC,IAAZ,CAAiB5B,GAAjB,CAAR,CACH,CAED;;;;;;OAOA,QAASU,eAAT,CAAwBV,GAAxB,CAA6B,CACzB,MAAOS,YAAWT,GAAX,GAAmBA,IAAIgB,MAAJ,CAAW,CAAX,IAAkB,GAA5C,CACH,CAED;;;;;;OAOA,QAASJ,iBAAT,CAA0BZ,GAA1B,CAA+B,CAC3B,MAAOA,KAAIsB,OAAJ,CAAY,IAAZ,IAAsB,CAA7B,CACH,CAED;;;;;;;OAQA,QAASO,UAAT,CAAmB7B,GAAnB,CAAwB,CACpB,MAAOJ,cAAagC,IAAb,CAAkB5B,GAAlB,CAAP,CACH,CAED;;;;;;OAOA,QAAS8B,QAAT,CAAiB9B,GAAjB,CAAsB,CAClB,MAAOH,eAAc+B,IAAd,CAAmB5B,GAAnB,CAAP,CACH,CAED;;;;;;;OAQA,QAAS+B,QAAT,CAAiB/B,GAAjB,CAAsBC,OAAtB,CAA+B,CAC3B,MAAOP,iBAAgBM,GAAhB,CAAqBC,OAArB,CAAP,CACH,CAEDkB,QAEA,GAAMa,UAAW,CACbxB,aAAoBA,YADP,CAEbG,YAAoBA,WAFP,CAGbE,YAAoBA,WAHP,CAIbJ,WAAoBA,UAJP,CAKbC,eAAoBA,cALP,CAMbE,iBAAoBA,gBANP,CAObiB,UAAoBA,SAPP,CAQbC,QAAoBA,OARP,CASbC,QAAoBA,OATP,CAAjB,CAYA,MAAOC,SAAP,CACH,CA3QD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6QAvC,SAASwC,qBAAT,CAAiC,UAAjC,C,gBACeC,uBAAaC,mBAAb,CAAiC1C,QAAjC,C","file":"URLUtils.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\n\n/**\n * @module URLUtils\n * @ignore\n * @description Provides utility functions for operating on URLs.\n * Initially this is simply a method to determine the Base URL of a URL, but\n * should probably include other things provided all over the place such as\n * determining whether a URL is relative/absolute, resolving two paths etc.\n */\nfunction URLUtils() {\n\n    let resolveFunction;\n\n    const schemeRegex = /^[a-z][a-z0-9+\\-.]*:/i;\n    const httpUrlRegex = /^https?:\\/\\//i;\n    const httpsUrlRegex = /^https:\\/\\//i;\n    const originRegex = /^([a-z][a-z0-9+\\-.]*:\\/\\/[^\\/]+)\\/?/i;\n\n    /**\n     * Resolves a url given an optional base url\n     * Uses window.URL to do the resolution.\n     *\n     * @param {string} url\n     * @param {string} [baseUrl]\n     * @return {string}\n     * @memberof module:URLUtils\n     * @instance\n     * @private\n     */\n    const nativeURLResolver = (url, baseUrl) => {\n        try {\n            // this will throw if baseurl is undefined, invalid etc\n            return new window.URL(url, baseUrl).toString();\n        } catch (e) {\n            return url;\n        }\n    };\n\n    /**\n     * Resolves a url given an optional base url\n     * Does not resolve ./, ../ etc but will do enough to construct something\n     * which will satisfy XHR etc when window.URL is not available ie\n     * IE11/node etc.\n     *\n     * @param {string} url\n     * @param {string} [baseUrl]\n     * @return {string}\n     * @memberof module:URLUtils\n     * @instance\n     * @private\n     */\n    const dumbURLResolver = (url, baseUrl) => {\n        let baseUrlParseFunc = parseBaseUrl;\n\n        if (!baseUrl) {\n            return url;\n        }\n\n        if (!isRelative(url)) {\n            return url;\n        }\n\n        if (isPathAbsolute(url)) {\n            baseUrlParseFunc = parseOrigin;\n        }\n\n        if (isSchemeRelative(url)) {\n            baseUrlParseFunc = parseScheme;\n        }\n\n        const base = baseUrlParseFunc(baseUrl);\n        const joinChar =\n              base.charAt(base.length - 1) !== '/' &&\n              url.charAt(0) !== '/' ?\n              '/' : '';\n\n        return [base, url].join(joinChar);\n    };\n\n    function setup() {\n        try {\n            const u = new window.URL('x', 'http://y'); //jshint ignore:line\n            resolveFunction = nativeURLResolver;\n        } catch (e) {\n            // must be IE11/Node etc\n        } finally {\n            resolveFunction = resolveFunction || dumbURLResolver;\n        }\n    }\n\n    /**\n     * Returns a string that contains the Base URL of a URL, if determinable.\n     * @param {string} url - full url\n     * @return {string}\n     * @memberof module:URLUtils\n     * @instance\n     */\n    function parseBaseUrl(url) {\n        const slashIndex = url.indexOf('/');\n        const lastSlashIndex = url.lastIndexOf('/');\n\n        if (slashIndex !== -1) {\n            // if there is only '//'\n            if (lastSlashIndex === slashIndex + 1) {\n                return url;\n            }\n\n            if (url.indexOf('?') !== -1) {\n                url = url.substring(0, url.indexOf('?'));\n            }\n\n            return url.substring(0, lastSlashIndex + 1);\n        }\n\n        return '';\n    }\n\n    /**\n     * Returns a string that contains the scheme and origin of a URL,\n     * if determinable.\n     * @param {string} url - full url\n     * @return {string}\n     * @memberof module:URLUtils\n     * @instance\n     */\n    function parseOrigin(url) {\n        const matches = url.match(originRegex);\n\n        if (matches) {\n            return matches[1];\n        }\n\n        return '';\n    }\n\n    /**\n     * Returns a string that contains the scheme of a URL, if determinable.\n     * @param {string} url - full url\n     * @return {string}\n     * @memberof module:URLUtils\n     * @instance\n     */\n    function parseScheme(url) {\n        const matches = url.match(schemeRegex);\n\n        if (matches) {\n            return matches[0];\n        }\n\n        return '';\n    }\n\n    /**\n     * Determines whether the url is relative.\n     * @return {bool}\n     * @param {string} url\n     * @memberof module:URLUtils\n     * @instance\n     */\n    function isRelative(url) {\n        return !schemeRegex.test(url);\n    }\n\n    /**\n     * Determines whether the url is path-absolute.\n     * @return {bool}\n     * @param {string} url\n     * @memberof module:URLUtils\n     * @instance\n     */\n    function isPathAbsolute(url) {\n        return isRelative(url) && url.charAt(0) === '/';\n    }\n\n    /**\n     * Determines whether the url is scheme-relative.\n     * @return {bool}\n     * @param {string} url\n     * @memberof module:URLUtils\n     * @instance\n     */\n    function isSchemeRelative(url) {\n        return url.indexOf('//') === 0;\n    }\n\n    /**\n     * Determines whether the url is an HTTP-URL as defined in ISO/IEC\n     * 23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https\n     * @return {bool}\n     * @param {string} url\n     * @memberof module:URLUtils\n     * @instance\n     */\n    function isHTTPURL(url) {\n        return httpUrlRegex.test(url);\n    }\n\n    /**\n     * Determines whether the supplied url has https scheme\n     * @return {bool}\n     * @param {string} url\n     * @memberof module:URLUtils\n     * @instance\n     */\n    function isHTTPS(url) {\n        return httpsUrlRegex.test(url);\n    }\n\n    /**\n     * Resolves a url given an optional base url\n     * @return {string}\n     * @param {string} url\n     * @param {string} [baseUrl]\n     * @memberof module:URLUtils\n     * @instance\n     */\n    function resolve(url, baseUrl) {\n        return resolveFunction(url, baseUrl);\n    }\n\n    setup();\n\n    const instance = {\n        parseBaseUrl:       parseBaseUrl,\n        parseOrigin:        parseOrigin,\n        parseScheme:        parseScheme,\n        isRelative:         isRelative,\n        isPathAbsolute:     isPathAbsolute,\n        isSchemeRelative:   isSchemeRelative,\n        isHTTPURL:          isHTTPURL,\n        isHTTPS:            isHTTPS,\n        resolve:            resolve\n    };\n\n    return instance;\n}\n\nURLUtils.__dashjs_factory_name = 'URLUtils';\nexport default FactoryMaker.getSingletonFactory(URLUtils);\n"]}