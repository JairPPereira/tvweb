{"version":3,"sources":["../../../../../src/streaming/utils/EBMLParser.js"],"names":["EBMLParser","config","instance","data","DataView","pos","getPos","setPos","value","consumeTag","tag","test","found","bytesConsumed","p1","p2","undefined","getUint32","getUint16","getUint8","required","Error","consumeTagAndSize","getMatroskaCodedNum","parseTag","size","parse","skipOverElement","headerSize","retainMSB","bytesUsed","mask","maxBytes","extraBytes","num","ch","i","getMatroskaFloat","outFloat","getFloat32","getFloat64","getMatroskaUint","val","moreData","byteLength","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"EBMLParser.js","sourcesContent":["import FactoryMaker from '../../core/FactoryMaker';\n\n/**\n * Creates an instance of an EBMLParser class which implements a large subset\n * of the functionality required to parse Matroska EBML\n *\n * @param {Object} config object with data member which is the buffer to parse\n * @ignore\n */\nfunction EBMLParser(config) {\n\n    config = config || {};\n    let instance;\n\n    let data = new DataView(config.data);\n    let pos = 0;\n\n    function getPos() {\n        return pos;\n    }\n\n    function setPos(value) {\n        pos = value;\n    }\n\n    /**\n     * Consumes an EBML tag from the data stream.\n     *\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and\n     * {boolean} required flag.\n     * @param {boolean} test whether or not the function should throw if a required\n     * tag is not found\n     * @return {boolean} whether or not the tag was found\n     * @throws will throw an exception if a required tag is not found and test\n     * param is false or undefined, or if the stream is malformed.\n     * @memberof EBMLParser\n     */\n    function consumeTag(tag, test) {\n        let found = true;\n        let bytesConsumed = 0;\n        let p1,\n            p2;\n\n        if (test === undefined) {\n            test = false;\n        }\n\n        if (tag.tag > 0xFFFFFF) {\n            if (data.getUint32(pos) !== tag.tag) {\n                found = false;\n            }\n            bytesConsumed = 4;\n        } else if (tag.tag > 0xFFFF) {\n            // 3 bytes\n            p1 = data.getUint16(pos);\n            p2 = data.getUint8(pos + 2);\n\n            // shift p1 over a byte and add p2\n            if (p1 * 256 + p2 !== tag.tag) {\n                found = false;\n            }\n            bytesConsumed = 3;\n        } else if (tag.tag > 0xFF) {\n            if (data.getUint16(pos) !== tag.tag) {\n                found = false;\n            }\n            bytesConsumed = 2;\n        } else {\n            if (data.getUint8(pos) !== tag.tag) {\n                found = false;\n            }\n            bytesConsumed = 1;\n        }\n\n        if (!found && tag.required && !test) {\n            throw new Error('required tag not found');\n        }\n\n        if (found) {\n            pos += bytesConsumed;\n        }\n\n        return found;\n    }\n\n    /**\n     * Consumes an EBML tag from the data stream.   If the tag is found then this\n     * function will also remove the size field which follows the tag from the\n     * data stream.\n     *\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and\n     * {boolean} required flag.\n     * @param {boolean} test whether or not the function should throw if a required\n     * tag is not found\n     * @return {boolean} whether or not the tag was found\n     * @throws will throw an exception if a required tag is not found and test\n     * param is false or undefined, or if the stream is malformedata.\n     * @memberof EBMLParser\n     */\n    function consumeTagAndSize(tag, test) {\n        let found = consumeTag(tag, test);\n\n        if (found) {\n            getMatroskaCodedNum();\n        }\n\n        return found;\n    }\n\n    /**\n     * Consumes an EBML tag from the data stream.   If the tag is found then this\n     * function will also remove the size field which follows the tag from the\n     * data stream.  It will use the value of the size field to parse a binary\n     * field, using a parser defined in the tag itself\n     *\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag,\n     * {boolean} required flag, and a parse function which takes a size parameter\n     * @return {boolean} whether or not the tag was found\n     * @throws will throw an exception if a required tag is not found,\n     * or if the stream is malformed\n     * @memberof EBMLParser\n     */\n    function parseTag(tag) {\n        let size;\n\n        consumeTag(tag);\n        size = getMatroskaCodedNum();\n        return instance[tag.parse](size);\n    }\n\n    /**\n     * Consumes an EBML tag from the data stream.   If the tag is found then this\n     * function will also remove the size field which follows the tag from the\n     * data stream.  It will use the value of the size field to skip over the\n     * entire section of EBML encapsulated by the tag.\n     *\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag, and\n     * {boolean} required flag\n     * @param {boolean} test a flag to indicate if an exception should be thrown\n     * if a required tag is not found\n     * @return {boolean} whether or not the tag was found\n     * @throws will throw an exception if a required tag is not found and test is\n     * false or undefined or if the stream is malformed\n     * @memberof EBMLParser\n     */\n    function skipOverElement(tag, test) {\n        let found = consumeTag(tag, test);\n        let headerSize;\n\n        if (found) {\n            headerSize = getMatroskaCodedNum();\n            pos += headerSize;\n        }\n\n        return found;\n    }\n\n    /**\n     * Returns and consumes a number encoded according to the Matroska EBML\n     * specification from the bitstream.\n     *\n     * @param {boolean} retainMSB whether or not to retain the Most Significant Bit (the\n     * first 1). this is usually true when reading Tag IDs.\n     * @return {number} the decoded number\n     * @throws will throw an exception if the bit stream is malformed or there is\n     * not enough data\n     * @memberof EBMLParser\n     */\n    function getMatroskaCodedNum(retainMSB) {\n        let bytesUsed = 1;\n        let mask = 0x80;\n        let maxBytes = 8;\n        let extraBytes = -1;\n        let num = 0;\n        let ch = data.getUint8(pos);\n        let i = 0;\n\n        for (i = 0; i < maxBytes; i += 1) {\n            if ((ch & mask) === mask) {\n                num = (retainMSB === undefined) ? ch & ~mask : ch;\n                extraBytes = i;\n                break;\n            }\n            mask >>= 1;\n        }\n\n        for (i = 0; i < extraBytes; i += 1, bytesUsed += 1) {\n            num = (num << 8) | (0xff & data.getUint8(pos + bytesUsed));\n        }\n\n        pos += bytesUsed;\n\n        return num;\n    }\n\n    /**\n     * Returns and consumes a float from the bitstream.\n     *\n     * @param {number} size 4 or 8 byte floats are supported\n     * @return {number} the decoded number\n     * @throws will throw an exception if the bit stream is malformed or there is\n     * not enough data\n     * @memberof EBMLParser\n     */\n    function getMatroskaFloat(size) {\n        let outFloat;\n\n        switch (size) {\n        case 4:\n            outFloat = data.getFloat32(pos);\n            pos += 4;\n            break;\n        case 8:\n            outFloat = data.getFloat64(pos);\n            pos += 8;\n            break;\n        }\n        return outFloat;\n    }\n\n    /**\n     * Consumes and returns an unsigned int from the bitstream.\n     *\n     * @param {number} size 1 to 8 bytes\n     * @return {number} the decoded number\n     * @throws will throw an exception if the bit stream is malformed or there is\n     * not enough data\n     * @memberof EBMLParser\n     */\n    function getMatroskaUint(size) {\n        let val = 0;\n\n        for (let i = 0; i < size; i += 1) {\n            val <<= 8;\n            val |= data.getUint8(pos + i) & 0xff;\n        }\n\n        pos += size;\n        return val;\n    }\n\n    /**\n     * Tests whether there is more data in the bitstream for parsing\n     *\n     * @return {boolean} whether there is more data to parse\n     * @memberof EBMLParser\n     */\n    function moreData() {\n        return pos < data.byteLength;\n    }\n\n    instance = {\n        getPos: getPos,\n        setPos: setPos,\n        consumeTag: consumeTag,\n        consumeTagAndSize: consumeTagAndSize,\n        parseTag: parseTag,\n        skipOverElement: skipOverElement,\n        getMatroskaCodedNum: getMatroskaCodedNum,\n        getMatroskaFloat: getMatroskaFloat,\n        getMatroskaUint: getMatroskaUint,\n        moreData: moreData\n    };\n\n    return instance;\n}\n\nEBMLParser.__dashjs_factory_name = 'EBMLParser';\nexport default FactoryMaker.getClassFactory(EBMLParser);"]}