{"version":3,"sources":["../../../../src/streaming/MediaPlayerFactory.js"],"names":["MediaPlayerFactory","SUPPORTED_MIME_TYPE","logger","create","video","source","context","test","nodeName","_dashjs_player","player","videoID","id","name","slice","call","querySelectorAll","filter","s","type","src","document","createElement","initialize","autoplay","getDebug","getLogger","debug","createAll","selector","scope","aPlayers","videos","i","length","push","sources","findVideo","el","parentNode","instance","loadInterval","loadHandler","window","removeEventListener","loadIntervalHandler","dashjs","clearInterval","avoidAutoCreate","skipAutoCreate","addEventListener","readyState","setInterval"],"mappings":"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","file":"MediaPlayerFactory.js","sourcesContent":["import MediaPlayer from './MediaPlayer';\n\nfunction MediaPlayerFactory() {\n    /**\n     * mime-type identifier for any source content to be accepted as a dash manifest by the create() method.\n     * @type {string}\n     */\n    const SUPPORTED_MIME_TYPE = 'application/dash+xml';\n\n    let logger;\n\n    /**\n     *  A new MediaPlayer is instantiated for the supplied videoElement and optional source and context.  If no context is provided,\n     *  a default DashContext is used. If no source is provided, the videoElement is interrogated to extract the first source whose\n     *  type is application/dash+xml.\n     * The autoplay property of the videoElement is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.\n     * @param {HTMLMediaElement} video\n     * @param {HTMLSourceElement} source\n     * @param {Object} context\n     * @returns {MediaPlayer|null}\n     */\n    function create(video, source, context) {\n        if (!video || !(/^VIDEO$/i).test(video.nodeName)) return null;\n\n        if (video._dashjs_player) return video._dashjs_player;\n\n        let player;\n        let videoID = (video.id || video.name || 'video element');\n\n        source = source || [].slice.call(video.querySelectorAll('source')).filter(function (s) {\n                return s.type == SUPPORTED_MIME_TYPE;\n            })[0];\n        if (!source && video.src) {\n            source = document.createElement('source');\n            source.src = video.src;\n        } else if (!source && !video.src) {\n            return null;\n        }\n\n        context = context || {};\n        player = MediaPlayer(context).create();\n        player.initialize(video, source.src, video.autoplay);\n\n        if (!logger) {\n            logger = player.getDebug().getLogger();\n        }\n        logger.debug('Converted ' + videoID + ' to dash.js player and added content: ' + source.src);\n\n        // Store a reference to the player on the video element so it can be gotten at for debugging and so we know its\n        // already been setup.\n        video._dashjs_player = player;\n\n        return player;\n    }\n\n    /**\n     * Searches the provided scope for all instances of the indicated selector. If no scope is provided, document is used. If no selector is\n     * specified, [data-dashjs-player] is used. The declarative setup also looks for source elements with the type attribute set to 'application/dash+xml'.\n     * It then looks for those video elements which have a source element defined with a type matching 'application/dash+xml'.\n     * A new MediaPlayer is instantiated for each matching video element and the appropriate source is assigned.\n     * The autoplay property of the video element is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.\n     * Returns an array holding all the MediaPlayer instances that were added by this method.\n     * @param {string} selector - CSS selector\n     * @param {Object} scope\n     * @returns {Array} an array of MediaPlayer objects\n     */\n    function createAll(selector, scope) {\n        let aPlayers = [];\n        selector = selector || '[data-dashjs-player]';\n        scope = scope || document;\n        let videos = scope.querySelectorAll(selector);\n        for (let i = 0; i < videos.length; i++) {\n            let player = create(videos[i], null);\n            aPlayers.push(player);\n        }\n\n        let sources = scope.querySelectorAll('source[type=\"' + SUPPORTED_MIME_TYPE + '\"]');\n        for (let i = 0; i < sources.length; i++) {\n            let video = findVideo(sources[i]);\n            let player = create(video, null);\n            aPlayers.push(player);\n        }\n\n        return aPlayers;\n    }\n\n    function findVideo(el) {\n        if ((/^VIDEO$/i).test(el.nodeName)) {\n            return el;\n        } else {\n            return findVideo(el.parentNode);\n        }\n    }\n\n    return {\n        create: create,\n        createAll: createAll\n    };\n}\n\nlet instance = MediaPlayerFactory();\nlet loadInterval;\n\nfunction loadHandler() {\n    window.removeEventListener('load', loadHandler);\n    instance.createAll();\n}\n\nfunction loadIntervalHandler() {\n    if (window.dashjs) {\n        window.clearInterval(loadInterval);\n        instance.createAll();\n    }\n}\n\nlet avoidAutoCreate = typeof window !== 'undefined' && window && window.dashjs && window.dashjs.skipAutoCreate;\n\nif (!avoidAutoCreate && typeof window !== 'undefined' && window && window.addEventListener) {\n    if (window.document.readyState === 'complete') {\n        if (window.dashjs) {\n            instance.createAll();\n        } else {\n            // If loaded asynchronously, window.readyState may be 'complete' even if dashjs hasn't loaded yet\n            loadInterval = window.setInterval(loadIntervalHandler, 500);\n        }\n    } else {\n        window.addEventListener('load', loadHandler);\n    }\n}\n\nexport default instance;\n"]}