{"version":3,"sources":["../../../../src/streaming/StreamProcessor.js"],"names":["StreamProcessor","config","context","eventBus","getInstance","type","errHandler","mimeType","timelineConverter","adapter","manifestModel","mediaPlayerModel","stream","abrController","playbackController","streamController","mediaController","textController","dashMetrics","settings","instance","mediaInfo","mediaInfoArr","bufferController","scheduleController","representationController","fragmentModel","spExternalControllers","indexHandler","setup","resetInitialSettings","on","Events","BUFFER_LEVEL_UPDATED","onBufferLevelUpdated","DATA_UPDATE_COMPLETED","onDataUpdateCompleted","initialize","mediaSource","create","baseURLController","streamInfo","getStreamInfo","getIsDynamic","registerStreamType","getFragmentController","getModel","setStreamProcessor","createBufferControllerForType","streamProcessor","setConfig","streamId","id","registerExternalController","controller","push","unregisterExternalController","index","indexOf","splice","getExternalControllers","unregisterAllExternalController","reset","errored","keepBuffers","unRegisterStreamType","forEach","off","isUpdating","e","sender","getType","getStreamId","error","code","Errors","SEGMENTS_UPDATE_FAILED_ERROR_CODE","addDVRMetric","getStreamProcessor","manifest","getValue","doNotUpdateDVRWindowOnBufferUpdated","manifestInfo","isDynamic","range","calcSegmentAvailabilityRange","getCurrentRepresentation","addDVRInfo","getTime","getRepresentationController","getBuffer","setBuffer","buffer","getBufferController","getFragmentModel","addInbandEvents","events","selectMediaInfo","newMediaInfo","newRealAdaptation","getRealAdaptation","voRepresentations","getVoRepresentations","realAdaptation","getData","maxQuality","getTopQualityIndexFor","minIdx","getMinAllowedIndexFor","quality","averageThroughput","bitrate","Constants","FRAGMENTED_TEXT","getThroughputHistory","getAverageThroughput","getInitialBitrateFor","getQualityForBitrate","getQualityFor","undefined","updateData","addMediaInfo","selectNewMediaInfo","getMediaInfoArr","getMediaInfo","getMediaSource","setMediaSource","dischargePreBuffer","getScheduleController","getRepresentationInfo","voRepresentation","getRepresentationForQuality","convertDataToRepresentationInfo","isBufferingCompleted","getIsBufferingCompleted","getBufferLevel","switchInitData","representationId","bufferResetEnabled","createBuffer","previousBuffers","switchTrackAsked","VIDEO","AUDIO","setIndexHandlerTime","value","setCurrentTime","getIndexHandlerTime","getCurrentTime","NaN","resetIndexHandler","resetIndex","getInitRequest","representation","getFragmentRequest","representationInfo","time","options","fragRequest","getSegmentRequestForTime","getNextSegmentRequest","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"StreamProcessor.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport BufferController from './controllers/BufferController';\nimport TextBufferController from './text/TextBufferController';\nimport ScheduleController from './controllers/ScheduleController';\nimport RepresentationController from '../dash/controllers/RepresentationController';\nimport FactoryMaker from '../core/FactoryMaker';\nimport { checkInteger } from './utils/SupervisorTools';\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport DashHandler from '../dash/DashHandler';\nimport Errors from '../core/errors/Errors';\n\nfunction StreamProcessor(config) {\n\n    config = config || {};\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let type = config.type;\n    let errHandler = config.errHandler;\n    let mimeType = config.mimeType;\n    let timelineConverter = config.timelineConverter;\n    let adapter = config.adapter;\n    let manifestModel = config.manifestModel;\n    let mediaPlayerModel = config.mediaPlayerModel;\n    let stream = config.stream;\n    let abrController = config.abrController;\n    let playbackController = config.playbackController;\n    let streamController = config.streamController;\n    let mediaController = config.mediaController;\n    let textController = config.textController;\n    let dashMetrics = config.dashMetrics;\n    let settings = config.settings;\n\n    let instance,\n        mediaInfo,\n        mediaInfoArr,\n        bufferController,\n        scheduleController,\n        representationController,\n        fragmentModel,\n        spExternalControllers,\n        indexHandler;\n\n    function setup() {\n        resetInitialSettings();\n\n        eventBus.on(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n    }\n\n    function initialize(mediaSource) {\n        indexHandler = DashHandler(context).create({\n            type: type,\n            mimeType: mimeType,\n            timelineConverter: timelineConverter,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            baseURLController: config.baseURLController,\n            errHandler: errHandler,\n            settings: settings,\n            streamInfo: getStreamInfo()\n        });\n\n        // initialize controllers\n        indexHandler.initialize(playbackController.getIsDynamic());\n        abrController.registerStreamType(type, instance);\n\n        fragmentModel = stream.getFragmentController().getModel(type);\n        fragmentModel.setStreamProcessor(instance);\n\n        bufferController = createBufferControllerForType(type);\n        scheduleController = ScheduleController(context).create({\n            type: type,\n            mimeType: mimeType,\n            adapter: adapter,\n            dashMetrics: dashMetrics,\n            timelineConverter: timelineConverter,\n            mediaPlayerModel: mediaPlayerModel,\n            abrController: abrController,\n            playbackController: playbackController,\n            streamController: streamController,\n            textController: textController,\n            streamProcessor: instance,\n            mediaController: mediaController,\n            settings: settings\n        });\n        representationController = RepresentationController(context).create();\n        representationController.setConfig({\n            abrController: abrController,\n            dashMetrics: dashMetrics,\n            manifestModel: manifestModel,\n            playbackController: playbackController,\n            timelineConverter: timelineConverter,\n            streamProcessor: instance,\n            type: type,\n            streamId: getStreamInfo() ? getStreamInfo().id : null\n        });\n        bufferController.initialize(mediaSource);\n        scheduleController.initialize();\n    }\n\n    function registerExternalController(controller) {\n        spExternalControllers.push(controller);\n    }\n\n    function unregisterExternalController(controller) {\n        var index = spExternalControllers.indexOf(controller);\n\n        if (index !== -1) {\n            spExternalControllers.splice(index, 1);\n        }\n    }\n\n    function getExternalControllers() {\n        return spExternalControllers;\n    }\n\n    function unregisterAllExternalController() {\n        spExternalControllers = [];\n    }\n\n    function resetInitialSettings() {\n        mediaInfoArr = [];\n        mediaInfo = null;\n        unregisterAllExternalController();\n    }\n\n    function reset(errored, keepBuffers) {\n        indexHandler.reset();\n\n        if (bufferController) {\n            bufferController.reset(errored, keepBuffers);\n            bufferController = null;\n        }\n\n        if (scheduleController) {\n            scheduleController.reset();\n            scheduleController = null;\n        }\n\n        if (representationController) {\n            representationController.reset();\n            representationController = null;\n        }\n\n        if (abrController) {\n            abrController.unRegisterStreamType(type);\n        }\n        spExternalControllers.forEach(function (controller) {\n            controller.reset();\n        });\n\n        eventBus.off(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n\n        resetInitialSettings();\n        type = null;\n        stream = null;\n    }\n\n    function isUpdating() {\n        return representationController ? representationController.isUpdating() : false;\n    }\n\n    function onDataUpdateCompleted(e) {\n        if (e.sender.getType() !== getType() || e.sender.getStreamId() !== getStreamInfo().id || !e.error || e.error.code !== Errors.SEGMENTS_UPDATE_FAILED_ERROR_CODE) return;\n\n        addDVRMetric();\n    }\n\n    function onBufferLevelUpdated(e) {\n        if (e.sender.getStreamProcessor() !== instance) return;\n        let manifest = manifestModel.getValue();\n        if (!manifest.doNotUpdateDVRWindowOnBufferUpdated) {\n            addDVRMetric();\n        }\n    }\n\n    function addDVRMetric() {\n        const streamInfo = getStreamInfo();\n        const manifestInfo = streamInfo ? streamInfo.manifestInfo : null;\n        const isDynamic = manifestInfo ? manifestInfo.isDynamic : null;\n        const range = timelineConverter.calcSegmentAvailabilityRange(representationController.getCurrentRepresentation(), isDynamic);\n        dashMetrics.addDVRInfo(getType(), playbackController.getTime(), manifestInfo, range);\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function getRepresentationController() {\n        return representationController;\n    }\n\n    function getBuffer() {\n        return bufferController.getBuffer();\n    }\n\n    function setBuffer(buffer) {\n        bufferController.setBuffer(buffer);\n    }\n\n    function getBufferController() {\n        return bufferController;\n    }\n\n    function getFragmentModel() {\n        return fragmentModel;\n    }\n\n    function getStreamInfo() {\n        return stream ? stream.getStreamInfo() : null;\n    }\n\n    function addInbandEvents(events) {\n        if (stream) {\n            stream.addInbandEvents(events);\n        }\n    }\n\n    function selectMediaInfo(newMediaInfo) {\n        if (newMediaInfo !== mediaInfo && (!newMediaInfo || !mediaInfo || (newMediaInfo.type === mediaInfo.type))) {\n            mediaInfo = newMediaInfo;\n        }\n\n        const streamInfo = getStreamInfo();\n        const newRealAdaptation = adapter.getRealAdaptation(streamInfo, mediaInfo);\n        const voRepresentations = adapter.getVoRepresentations(mediaInfo);\n\n        if (representationController) {\n            const realAdaptation = representationController.getData();\n            const maxQuality = abrController.getTopQualityIndexFor(type, streamInfo ? streamInfo.id : null);\n            const minIdx = abrController.getMinAllowedIndexFor(type);\n\n            let quality,\n                averageThroughput;\n            let bitrate = null;\n\n            if ((realAdaptation === null || (realAdaptation.id != newRealAdaptation.id)) && type !== Constants.FRAGMENTED_TEXT) {\n                averageThroughput = abrController.getThroughputHistory().getAverageThroughput(type);\n                bitrate = averageThroughput || abrController.getInitialBitrateFor(type);\n                quality = abrController.getQualityForBitrate(mediaInfo, bitrate);\n            } else {\n                quality = abrController.getQualityFor(type);\n            }\n\n            if (minIdx !== undefined && quality < minIdx) {\n                quality = minIdx;\n            }\n            if (quality > maxQuality) {\n                quality = maxQuality;\n            }\n\n            representationController.updateData(newRealAdaptation, voRepresentations, type, quality);\n        }\n    }\n\n    function addMediaInfo(newMediaInfo, selectNewMediaInfo) {\n        if (mediaInfoArr.indexOf(newMediaInfo) === -1) {\n            mediaInfoArr.push(newMediaInfo);\n        }\n\n        if (selectNewMediaInfo) {\n            this.selectMediaInfo(newMediaInfo);\n        }\n    }\n\n    function getMediaInfoArr() {\n        return mediaInfoArr;\n    }\n\n    function getMediaInfo() {\n        return mediaInfo;\n    }\n\n    function getMediaSource() {\n        return bufferController.getMediaSource();\n    }\n\n    function setMediaSource(mediaSource) {\n        bufferController.setMediaSource(mediaSource, getMediaInfo());\n    }\n\n    function dischargePreBuffer() {\n        bufferController.dischargePreBuffer();\n    }\n\n    function getScheduleController() {\n        return scheduleController;\n    }\n\n    /**\n     * Get a specific voRepresentation. If quality parameter is defined, this function will return the voRepresentation for this quality.\n     * Otherwise, this function will return the current voRepresentation used by the representationController.\n     * @param {number} quality - quality index of the voRepresentaion expected.\n     */\n    function getRepresentationInfo(quality) {\n        let voRepresentation;\n\n        if (quality !== undefined) {\n            checkInteger(quality);\n            voRepresentation = representationController ? representationController.getRepresentationForQuality(quality) : null;\n        } else {\n            voRepresentation = representationController ? representationController.getCurrentRepresentation() : null;\n        }\n\n        return adapter.convertDataToRepresentationInfo(voRepresentation);\n    }\n\n    function isBufferingCompleted() {\n        return bufferController ? bufferController.getIsBufferingCompleted() : false;\n    }\n\n    function getBufferLevel() {\n        return bufferController ? bufferController.getBufferLevel() : 0;\n    }\n\n    function switchInitData(representationId, bufferResetEnabled) {\n        if (bufferController) {\n            const streamInfo = getStreamInfo();\n            bufferController.switchInitData(streamInfo ? streamInfo.id : null, representationId, bufferResetEnabled);\n        }\n    }\n\n    function createBuffer(previousBuffers) {\n        return (bufferController.getBuffer() || bufferController.createBuffer(mediaInfo, previousBuffers));\n    }\n\n    function switchTrackAsked() {\n        scheduleController.switchTrackAsked();\n    }\n\n    function createBufferControllerForType(type) {\n        let controller = null;\n\n        if (type === Constants.VIDEO || type === Constants.AUDIO) {\n            controller = BufferController(context).create({\n                type: type,\n                dashMetrics: dashMetrics,\n                mediaPlayerModel: mediaPlayerModel,\n                manifestModel: manifestModel,\n                errHandler: errHandler,\n                streamController: streamController,\n                mediaController: mediaController,\n                adapter: adapter,\n                textController: textController,\n                abrController: abrController,\n                playbackController: playbackController,\n                streamProcessor: instance,\n                settings: settings\n            });\n        } else {\n            controller = TextBufferController(context).create({\n                type: type,\n                mimeType: mimeType,\n                dashMetrics: dashMetrics,\n                mediaPlayerModel: mediaPlayerModel,\n                manifestModel: manifestModel,\n                errHandler: errHandler,\n                streamController: streamController,\n                mediaController: mediaController,\n                adapter: adapter,\n                textController: textController,\n                abrController: abrController,\n                playbackController: playbackController,\n                streamProcessor: instance,\n                settings: settings\n            });\n        }\n\n        return controller;\n    }\n\n    function setIndexHandlerTime(value) {\n        if (indexHandler) {\n            indexHandler.setCurrentTime(value);\n        }\n    }\n\n    function getIndexHandlerTime() {\n        return indexHandler ? indexHandler.getCurrentTime() : NaN;\n    }\n\n    function resetIndexHandler() {\n        if (indexHandler) {\n            indexHandler.resetIndex();\n        }\n    }\n\n    function getInitRequest(quality) {\n        checkInteger(quality);\n\n        const representation = representationController ? representationController.getRepresentationForQuality(quality) : null;\n\n        return indexHandler ? indexHandler.getInitRequest(getMediaInfo(), representation) : null;\n    }\n\n    function getFragmentRequest(representationInfo, time, options) {\n        let fragRequest = null;\n\n        if (indexHandler) {\n            const representation = representationController && representationInfo ? representationController.getRepresentationForQuality(representationInfo.quality) : null;\n\n            // if time and options are undefined, it means the next segment is requested\n            // otherwise, the segment at this specific time is requested.\n            if (time !== undefined && options !== undefined) {\n                fragRequest = indexHandler.getSegmentRequestForTime(getMediaInfo(), representation, time, options);\n            } else {\n                fragRequest = indexHandler.getNextSegmentRequest(getMediaInfo(), representation);\n            }\n        }\n\n        return fragRequest;\n    }\n\n    instance = {\n        initialize: initialize,\n        isUpdating: isUpdating,\n        getType: getType,\n        getBufferController: getBufferController,\n        getFragmentModel: getFragmentModel,\n        getScheduleController: getScheduleController,\n        getRepresentationController: getRepresentationController,\n        getRepresentationInfo: getRepresentationInfo,\n        getBufferLevel: getBufferLevel,\n        switchInitData: switchInitData,\n        isBufferingCompleted: isBufferingCompleted,\n        createBuffer: createBuffer,\n        getStreamInfo: getStreamInfo,\n        selectMediaInfo: selectMediaInfo,\n        addMediaInfo: addMediaInfo,\n        switchTrackAsked: switchTrackAsked,\n        getMediaInfoArr: getMediaInfoArr,\n        getMediaInfo: getMediaInfo,\n        getMediaSource: getMediaSource,\n        setMediaSource: setMediaSource,\n        dischargePreBuffer: dischargePreBuffer,\n        getBuffer: getBuffer,\n        setBuffer: setBuffer,\n        registerExternalController: registerExternalController,\n        unregisterExternalController: unregisterExternalController,\n        getExternalControllers: getExternalControllers,\n        unregisterAllExternalController: unregisterAllExternalController,\n        addInbandEvents: addInbandEvents,\n        setIndexHandlerTime: setIndexHandlerTime,\n        getIndexHandlerTime: getIndexHandlerTime,\n        resetIndexHandler: resetIndexHandler,\n        getInitRequest: getInitRequest,\n        getFragmentRequest: getFragmentRequest,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\nStreamProcessor.__dashjs_factory_name = 'StreamProcessor';\nexport default FactoryMaker.getClassFactory(StreamProcessor);\n"]}