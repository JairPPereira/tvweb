{"version":3,"sources":["../../../../../src/streaming/models/MetricsModel.js"],"names":["MetricsModel","config","settings","context","eventBus","getInstance","instance","streamMetrics","setup","metricsChanged","trigger","Events","METRICS_CHANGED","metricChanged","mediaType","METRIC_CHANGED","metricUpdated","metricType","vo","METRIC_UPDATED","metric","value","metricAdded","METRIC_ADDED","clearCurrentMetricsForType","type","clearAllCurrentMetrics","getMetricsFor","readOnly","metrics","hasOwnProperty","MetricsList","pushMetrics","list","push","length","get","streaming","metricsMaxListDepth","shift","appendHttpTrace","httpRequest","s","d","b","HTTPRequestTrace","trace","interval","addHttpRequest","tcpid","url","quality","actualurl","serviceLocation","range","trequest","tresponse","tfinish","responsecode","mediaduration","responseHeaders","traces","HTTPRequest","_tfinish","_stream","_mediaduration","_quality","_responseHeaders","_serviceLocation","forEach","pushAndNotify","MetricsConstants","HTTP_REQUEST","addRepresentationSwitch","t","mt","to","lto","TrackSwitch","TRACK_SWITCH","metricObject","addBufferLevel","level","BufferLevel","BUFFER_LEVEL","addBufferState","state","target","BufferState","BUFFER_STATE","addDVRInfo","currentTime","mpd","DVRInfo","time","manifestInfo","DVR_INFO","addDroppedFrames","DroppedFrames","creationTime","droppedFrames","droppedVideoFrames","DROPPED_FRAMES","addSchedulingInfo","startTime","availabilityStartTime","duration","SchedulingInfo","SCHEDULING_INFO","addRequestsQueue","loadingRequests","executedRequests","RequestsQueue","REQUESTS_QUEUE","addManifestUpdate","requestTime","fetchTime","presentationStartTime","clientTimeOffset","buffered","latency","ManifestUpdate","Constants","STREAM","MANIFEST_UPDATE","updateManifestUpdateInfo","manifestUpdate","updatedFields","field","addManifestUpdateStreamInfo","id","index","start","ManifestUpdateStreamInfo","streamInfo","MANIFEST_UPDATE_STREAM_INFO","addManifestUpdateRepresentationInfo","streamIndex","presentationTimeOffset","startNumber","fragmentInfoType","representationInfo","ManifestUpdateRepresentationInfo","MANIFEST_UPDATE_TRACK_INFO","addPlayList","Array","isArray","subreplevel","PLAY_LIST","addDVBErrors","DVB_ERRORS","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"MetricsModel.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport MetricsConstants from '../constants/MetricsConstants';\nimport MetricsList from '../vo/MetricsList';\nimport { HTTPRequest, HTTPRequestTrace } from '../vo/metrics/HTTPRequest';\nimport TrackSwitch from '../vo/metrics/RepresentationSwitch';\nimport BufferLevel from '../vo/metrics/BufferLevel';\nimport BufferState from '../vo/metrics/BufferState';\nimport DVRInfo from '../vo/metrics/DVRInfo';\nimport DroppedFrames from '../vo/metrics/DroppedFrames';\nimport { ManifestUpdate, ManifestUpdateStreamInfo, ManifestUpdateRepresentationInfo } from '../vo/metrics/ManifestUpdate';\nimport SchedulingInfo from '../vo/metrics/SchedulingInfo';\nimport EventBus from '../../core/EventBus';\nimport RequestsQueue from '../vo/metrics/RequestsQueue';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\n\nfunction MetricsModel(config) {\n\n    config = config || {};\n\n    const settings = config.settings;\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        streamMetrics;\n\n    function setup() {\n        streamMetrics = {};\n    }\n\n    function metricsChanged() {\n        eventBus.trigger(Events.METRICS_CHANGED);\n    }\n\n    function metricChanged(mediaType) {\n        eventBus.trigger(Events.METRIC_CHANGED, {mediaType: mediaType});\n        metricsChanged();\n    }\n\n    function metricUpdated(mediaType, metricType, vo) {\n        eventBus.trigger(Events.METRIC_UPDATED, {mediaType: mediaType, metric: metricType, value: vo});\n        metricChanged(mediaType);\n    }\n\n    function metricAdded(mediaType, metricType, vo) {\n        eventBus.trigger(Events.METRIC_ADDED, {mediaType: mediaType, metric: metricType, value: vo});\n        metricChanged(mediaType);\n    }\n\n    function clearCurrentMetricsForType(type) {\n        delete streamMetrics[type];\n        metricChanged(type);\n    }\n\n    function clearAllCurrentMetrics() {\n        streamMetrics = {};\n        metricsChanged();\n    }\n\n    function getMetricsFor(type, readOnly) {\n        let metrics = null;\n\n        if (!type) {\n            return metrics;\n        }\n\n        if (streamMetrics.hasOwnProperty(type)) {\n            metrics = streamMetrics[type];\n        } else if (!readOnly) {\n            metrics = new MetricsList();\n            streamMetrics[type] = metrics;\n        }\n\n        return metrics;\n    }\n\n    function pushMetrics(type, list, value) {\n        let metrics = getMetricsFor(type);\n        if (metrics !== null) {\n            metrics[list].push(value);\n            if ( metrics[list].length > settings.get().streaming.metricsMaxListDepth ) {\n                metrics[list].shift();\n            }\n        }\n    }\n\n    function appendHttpTrace(httpRequest, s, d, b) {\n        let vo = new HTTPRequestTrace();\n\n        vo.s = s;\n        vo.d = d;\n        vo.b = b;\n\n        httpRequest.trace.push(vo);\n\n        if (!httpRequest.interval) {\n            httpRequest.interval = 0;\n        }\n\n        httpRequest.interval += d;\n\n        return vo;\n    }\n\n    function addHttpRequest(mediaType, tcpid, type, url, quality, actualurl, serviceLocation, range, trequest, tresponse, tfinish, responsecode, mediaduration, responseHeaders, traces) {\n        let vo = new HTTPRequest();\n\n        // ISO 23009-1 D.4.3 NOTE 2:\n        // All entries for a given object will have the same URL and range\n        // and so can easily be correlated. If there were redirects or\n        // failures there will be one entry for each redirect/failure.\n        // The redirect-to URL or alternative url (where multiple have been\n        // provided in the MPD) will appear as the actualurl of the next\n        // entry with the same url value.\n        if (actualurl && (actualurl !== url)) {\n\n            // given the above, add an entry for the original request\n            addHttpRequest(\n                mediaType,\n                null,\n                type,\n                url,\n                quality,\n                null,\n                null,\n                range,\n                trequest,\n                null, // unknown\n                null, // unknown\n                null, // unknown, probably a 302\n                mediaduration,\n                null,\n                null\n            );\n\n            vo.actualurl = actualurl;\n        }\n\n        vo.tcpid = tcpid;\n        vo.type = type;\n        vo.url = url;\n        vo.range = range;\n        vo.trequest = trequest;\n        vo.tresponse = tresponse;\n        vo.responsecode = responsecode;\n\n        vo._tfinish = tfinish;\n        vo._stream = mediaType;\n        vo._mediaduration = mediaduration;\n        vo._quality = quality;\n        vo._responseHeaders = responseHeaders;\n        vo._serviceLocation = serviceLocation;\n\n        if (traces) {\n            traces.forEach(trace => {\n                appendHttpTrace(vo, trace.s, trace.d, trace.b);\n            });\n        } else {\n            // The interval and trace shall be absent for redirect and failure records.\n            delete vo.interval;\n            delete vo.trace;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.HTTP_REQUEST, vo);\n    }\n\n    function addRepresentationSwitch(mediaType, t, mt, to, lto) {\n        let vo = new TrackSwitch();\n\n        vo.t = t;\n        vo.mt = mt;\n        vo.to = to;\n\n        if (lto) {\n            vo.lto = lto;\n        } else {\n            delete vo.lto;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.TRACK_SWITCH, vo);\n    }\n\n    function pushAndNotify(mediaType, metricType, metricObject) {\n        pushMetrics(mediaType, metricType, metricObject);\n        metricAdded(mediaType, metricType, metricObject);\n    }\n\n    function addBufferLevel(mediaType, t, level) {\n        let vo = new BufferLevel();\n        vo.t = t;\n        vo.level = level;\n\n        pushAndNotify(mediaType, MetricsConstants.BUFFER_LEVEL, vo);\n    }\n\n    function addBufferState(mediaType, state, target) {\n        let vo = new BufferState();\n        vo.target = target;\n        vo.state = state;\n\n        pushAndNotify(mediaType, MetricsConstants.BUFFER_STATE, vo);\n    }\n\n    function addDVRInfo(mediaType, currentTime, mpd, range) {\n        let vo = new DVRInfo();\n        vo.time = currentTime ;\n        vo.range = range;\n        vo.manifestInfo = mpd;\n\n        pushAndNotify(mediaType, MetricsConstants.DVR_INFO, vo);\n    }\n\n    function addDroppedFrames(mediaType, quality) {\n        let vo = new DroppedFrames();\n        let list = getMetricsFor(mediaType).DroppedFrames;\n\n        if (!quality) {\n            return;\n        }\n\n        vo.time = quality.creationTime;\n        vo.droppedFrames = quality.droppedVideoFrames;\n\n        if (list.length > 0 && list[list.length - 1] == vo) {\n            return;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.DROPPED_FRAMES, vo);\n    }\n\n    function addSchedulingInfo(mediaType, t, type, startTime, availabilityStartTime, duration, quality, range, state) {\n        let vo = new SchedulingInfo();\n\n        vo.mediaType = mediaType;\n        vo.t = t;\n\n        vo.type = type;\n        vo.startTime = startTime;\n        vo.availabilityStartTime = availabilityStartTime;\n        vo.duration = duration;\n        vo.quality = quality;\n        vo.range = range;\n\n        vo.state = state;\n\n        pushAndNotify(mediaType, MetricsConstants.SCHEDULING_INFO, vo);\n    }\n\n    function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\n        let vo = new RequestsQueue();\n\n        vo.loadingRequests = loadingRequests;\n        vo.executedRequests = executedRequests;\n\n        getMetricsFor(mediaType).RequestsQueue = vo;\n        metricAdded(mediaType, MetricsConstants.REQUESTS_QUEUE, vo);\n    }\n\n    function addManifestUpdate(mediaType, type, requestTime, fetchTime, availabilityStartTime, presentationStartTime, clientTimeOffset, currentTime, buffered, latency) {\n        let vo = new ManifestUpdate();\n\n        vo.mediaType = mediaType;\n        vo.type = type;\n        vo.requestTime = requestTime; // when this manifest update was requested\n        vo.fetchTime = fetchTime; // when this manifest update was received\n        vo.availabilityStartTime = availabilityStartTime;\n        vo.presentationStartTime = presentationStartTime; // the seek point (liveEdge for dynamic, Stream[0].startTime for static)\n        vo.clientTimeOffset = clientTimeOffset; // the calculated difference between the server and client wall clock time\n        vo.currentTime = currentTime; // actual element.currentTime\n        vo.buffered = buffered; // actual element.ranges\n        vo.latency = latency; // (static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - currentTime)\n\n        pushMetrics(Constants.STREAM, MetricsConstants.MANIFEST_UPDATE, vo);\n        metricAdded(mediaType, MetricsConstants.MANIFEST_UPDATE, vo);\n    }\n\n    function updateManifestUpdateInfo(manifestUpdate, updatedFields) {\n        if (manifestUpdate) {\n            for (let field in updatedFields) {\n                manifestUpdate[field] = updatedFields[field];\n            }\n\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE, manifestUpdate);\n        }\n    }\n\n    function addManifestUpdateStreamInfo(manifestUpdate, id, index, start, duration) {\n        if (manifestUpdate) {\n            let vo = new ManifestUpdateStreamInfo();\n\n            vo.id = id;\n            vo.index = index;\n            vo.start = start;\n            vo.duration = duration;\n\n            manifestUpdate.streamInfo.push(vo);\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE_STREAM_INFO, manifestUpdate);\n        }\n    }\n\n    function addManifestUpdateRepresentationInfo(manifestUpdate, id, index, streamIndex, mediaType, presentationTimeOffset, startNumber, fragmentInfoType) {\n        if (manifestUpdate && manifestUpdate.representationInfo) {\n\n            const vo = new ManifestUpdateRepresentationInfo();\n            vo.id = id;\n            vo.index = index;\n            vo.streamIndex = streamIndex;\n            vo.mediaType = mediaType;\n            vo.startNumber = startNumber;\n            vo.fragmentInfoType = fragmentInfoType;\n            vo.presentationTimeOffset = presentationTimeOffset;\n\n            manifestUpdate.representationInfo.push(vo);\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE_TRACK_INFO, manifestUpdate);\n        }\n    }\n\n    function addPlayList(vo) {\n        if (vo.trace && Array.isArray(vo.trace)) {\n            vo.trace.forEach(trace => {\n                if (trace.hasOwnProperty('subreplevel') && !trace.subreplevel) {\n                    delete trace.subreplevel;\n                }\n            });\n        } else {\n            delete vo.trace;\n        }\n\n        pushAndNotify(Constants.STREAM, MetricsConstants.PLAY_LIST, vo);\n    }\n\n    function addDVBErrors(vo) {\n        pushAndNotify(Constants.STREAM, MetricsConstants.DVB_ERRORS, vo);\n    }\n\n    instance = {\n        clearCurrentMetricsForType: clearCurrentMetricsForType,\n        clearAllCurrentMetrics: clearAllCurrentMetrics,\n        getMetricsFor: getMetricsFor,\n        addHttpRequest: addHttpRequest,\n        addRepresentationSwitch: addRepresentationSwitch,\n        addBufferLevel: addBufferLevel,\n        addBufferState: addBufferState,\n        addDVRInfo: addDVRInfo,\n        addDroppedFrames: addDroppedFrames,\n        addSchedulingInfo: addSchedulingInfo,\n        addRequestsQueue: addRequestsQueue,\n        addManifestUpdate: addManifestUpdate,\n        updateManifestUpdateInfo: updateManifestUpdateInfo,\n        addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\n        addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\n        addPlayList: addPlayList,\n        addDVBErrors: addDVBErrors\n    };\n\n    setup();\n    return instance;\n}\n\nMetricsModel.__dashjs_factory_name = 'MetricsModel';\nexport default FactoryMaker.getSingletonFactory(MetricsModel);\n"]}