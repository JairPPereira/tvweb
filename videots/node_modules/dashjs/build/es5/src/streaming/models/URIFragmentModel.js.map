{"version":3,"sources":["../../../../../src/streaming/models/URIFragmentModel.js"],"names":["URIFragmentModel","instance","URIFragmentDataVO","initialize","uri","URIFragmentData","hashIndex","indexOf","fragments","substr","split","i","len","length","fragment","equalIndex","key","substring","hasOwnProperty","getURIFragmentData","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"sEA+BA,sD,+DACA,qD,4IAEA;;;GAlCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsCA,QAASA,iBAAT,EAA4B,CAExB,GAAIC,gBAAJ,CACIC,wBADJ,CAGA;;;;OAKA,QAASC,WAAT,CAAoBC,GAApB,CAAyB,CACrBF,kBAAoB,GAAIG,0BAAJ,EAApB,CAEA,GAAI,CAACD,GAAL,CAAU,MAAO,KAAP,CAEV,GAAME,WAAYF,IAAIG,OAAJ,CAAY,GAAZ,CAAlB,CACA,GAAID,YAAc,CAAC,CAAnB,CAAsB,CAClB,GAAME,WAAYJ,IAAIK,MAAJ,CAAWH,UAAY,CAAvB,EAA0BI,KAA1B,CAAgC,GAAhC,CAAlB,CACA,IAAK,GAAIC,GAAI,CAAR,CAAWC,IAAMJ,UAAUK,MAAhC,CAAwCF,EAAIC,GAA5C,CAAiD,EAAED,CAAnD,CAAsD,CAClD,GAAMG,UAAWN,UAAUG,CAAV,CAAjB,CACA,GAAMI,YAAaD,SAASP,OAAT,CAAiB,GAAjB,CAAnB,CACA,GAAIQ,aAAe,CAAC,CAApB,CAAuB,CACnB,GAAMC,KAAMF,SAASG,SAAT,CAAmB,CAAnB,CAAqBF,UAArB,CAAZ,CACA,GAAIb,kBAAkBgB,cAAlB,CAAiCF,GAAjC,CAAJ,CAA2C,CACvCd,kBAAkBc,GAAlB,EAAyBF,SAASL,MAAT,CAAgBM,WAAa,CAA7B,CAAzB,CACH,CACJ,CACJ,CACJ,CACJ,CAED;;;;OAKA,QAASI,mBAAT,EAA8B,CAC1B,MAAOjB,kBAAP,CACH,CAEDD,SAAW,CACPE,WAAYA,UADL,CAEPgB,mBAAoBA,kBAFb,CAAX,CAKA,MAAOlB,SAAP,CACH,CAEDD,iBAAiBoB,qBAAjB,CAAyC,kBAAzC,C,gBACeC,uBAAaC,mBAAb,CAAiCtB,gBAAjC,C","file":"URIFragmentModel.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport URIFragmentData from '../vo/URIFragmentData';\nimport FactoryMaker from '../../core/FactoryMaker';\n\n/**\n * Model class managing URI fragments.\n * @ignore\n */\nfunction URIFragmentModel() {\n\n    let instance,\n        URIFragmentDataVO;\n\n    /**\n     * @param {string} uri The URI to parse for fragment extraction\n     * @memberof module:URIFragmentModel\n     * @instance\n     */\n    function initialize(uri) {\n        URIFragmentDataVO = new URIFragmentData();\n\n        if (!uri) return null;\n\n        const hashIndex = uri.indexOf('#');\n        if (hashIndex !== -1) {\n            const fragments = uri.substr(hashIndex + 1).split('&');\n            for (let i = 0, len = fragments.length; i < len; ++i) {\n                const fragment = fragments[i];\n                const equalIndex = fragment.indexOf('=');\n                if (equalIndex !== -1) {\n                    const key = fragment.substring(0,equalIndex);\n                    if (URIFragmentDataVO.hasOwnProperty(key)) {\n                        URIFragmentDataVO[key] = fragment.substr(equalIndex + 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @returns {URIFragmentData} Object containing supported URI fragments\n     * @memberof module:URIFragmentModel\n     * @instance\n     */\n    function getURIFragmentData() {\n        return URIFragmentDataVO;\n    }\n\n    instance = {\n        initialize: initialize,\n        getURIFragmentData: getURIFragmentData\n    };\n\n    return instance;\n}\n\nURIFragmentModel.__dashjs_factory_name = 'URIFragmentModel';\nexport default FactoryMaker.getSingletonFactory(URIFragmentModel);\n"]}