{"version":3,"sources":["../../../../../../src/streaming/rules/scheduling/NextFragmentRequestRule.js"],"names":["NextFragmentRequestRule","config","context","textController","playbackController","instance","logger","setup","getInstance","getLogger","execute","streamProcessor","seekTarget","requestToReplace","representationInfo","getRepresentationInfo","mediaType","getType","hasSeekTarget","isNaN","bufferController","getBufferController","currentTime","getNormalizedTime","time","getIndexHandlerTime","bufferIsDivided","request","Constants","FRAGMENTED_TEXT","isTextEnabled","range","getRangeAt","playingRange","hasDiscontinuities","getBuffer","hasDiscontinuitiesAfter","start","end","getFragmentModel","removeExecutedRequestsAfterTime","startTime","duration","getFragmentRequest","timeThreshold","ignoreIsFinished","undefined","keepIdx","action","FragmentRequest","ACTION_COMPLETE","isFragmentLoaded","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"NextFragmentRequestRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../../constants/Constants';\nimport Debug from '../../../core/Debug';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport FragmentRequest from '../../../streaming/vo/FragmentRequest';\n\nfunction NextFragmentRequestRule(config) {\n\n    config = config || {};\n    const context = this.context;\n    const textController = config.textController;\n    const playbackController = config.playbackController;\n\n    let instance,\n        logger;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function execute(streamProcessor, seekTarget, requestToReplace) {\n        if (!streamProcessor) {\n            return null;\n        }\n        const representationInfo = streamProcessor.getRepresentationInfo();\n        const mediaType = streamProcessor.getType();\n        const hasSeekTarget = !isNaN(seekTarget);\n        const bufferController = streamProcessor.getBufferController();\n        const currentTime = playbackController.getNormalizedTime();\n        let time = hasSeekTarget ? seekTarget : streamProcessor.getIndexHandlerTime();\n        let bufferIsDivided = false;\n        let request;\n\n        if (isNaN(time) || (mediaType === Constants.FRAGMENTED_TEXT && !textController.isTextEnabled())) {\n            return null;\n        }\n        /**\n         * This is critical for IE/Safari/EDGE\n         * */\n        if (bufferController) {\n            let range = bufferController.getRangeAt(time);\n            const playingRange = bufferController.getRangeAt(currentTime);\n            const hasDiscontinuities = bufferController.getBuffer().hasDiscontinuitiesAfter(currentTime);\n            if ((range !== null || playingRange !== null) && !hasSeekTarget) {\n                if (!range || (playingRange && playingRange.start != range.start && playingRange.end != range.end)) {\n                    if (hasDiscontinuities && mediaType !== Constants.FRAGMENTED_TEXT) {\n                        streamProcessor.getFragmentModel().removeExecutedRequestsAfterTime(playingRange.end);\n                        bufferIsDivided = true;\n                    }\n                    range = playingRange;\n                }\n            }\n        }\n\n        if (requestToReplace) {\n            time = requestToReplace.startTime + (requestToReplace.duration / 2);\n            request = streamProcessor.getFragmentRequest(representationInfo, time, {\n                timeThreshold: 0,\n                ignoreIsFinished: true\n            });\n        } else {\n            // Use time just whenever is strictly needed\n            request = streamProcessor.getFragmentRequest(representationInfo,\n                hasSeekTarget || bufferIsDivided ? time : undefined, {\n                keepIdx: !hasSeekTarget && !bufferIsDivided\n            });\n\n            // Then, check if this request was downloaded or not\n            while (request && request.action !== FragmentRequest.ACTION_COMPLETE && streamProcessor.getFragmentModel().isFragmentLoaded(request)) {\n                // loop until we found not loaded fragment, or no fragment\n                request = streamProcessor.getFragmentRequest(representationInfo);\n            }\n        }\n\n        return request;\n    }\n\n    instance = {\n        execute: execute\n    };\n\n    setup();\n\n    return instance;\n}\n\nNextFragmentRequestRule.__dashjs_factory_name = 'NextFragmentRequestRule';\nexport default FactoryMaker.getClassFactory(NextFragmentRequestRule);\n"]}