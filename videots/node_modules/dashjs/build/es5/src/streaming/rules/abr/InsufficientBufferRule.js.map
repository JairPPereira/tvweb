{"version":3,"sources":["../../../../../../src/streaming/rules/abr/InsufficientBufferRule.js"],"names":["InsufficientBufferRule","config","INSUFFICIENT_BUFFER_SAFETY_FACTOR","context","eventBus","getInstance","dashMetrics","instance","logger","bufferStateDict","setup","getLogger","resetInitialSettings","on","Events","PLAYBACK_SEEKING","onPlaybackSeeking","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getMaxIndex","rulesContext","switchRequest","create","mediaType","getMediaType","lastBufferStateVO","getLatestBufferInfoVO","MetricsConstants","BUFFER_STATE","representationInfo","getRepresentationInfo","fragmentDuration","wasFirstBufferLoadedEventTriggered","state","BUFFER_EMPTY","debug","quality","reason","mediaInfo","getMediaInfo","abrController","getAbrController","throughputHistory","getThroughputHistory","bufferLevel","getCurrentBufferLevel","throughput","getAverageThroughput","latency","getAverageLatency","bitrate","getQualityForBitrate","currentBufferState","wasTriggered","firstBufferLoadedEvent","BUFFER_LOADED","reset","off","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"InsufficientBufferRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from '../../../core/EventBus';\nimport Events from '../../../core/events/Events';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\nimport SwitchRequest from '../SwitchRequest';\nimport Constants from '../../constants/Constants';\nimport MetricsConstants from '../../constants/MetricsConstants';\n\nfunction InsufficientBufferRule(config) {\n\n    config = config || {};\n    const INSUFFICIENT_BUFFER_SAFETY_FACTOR = 0.5;\n\n    const context = this.context;\n\n    const eventBus = EventBus(context).getInstance();\n    const dashMetrics = config.dashMetrics;\n\n    let instance,\n        logger,\n        bufferStateDict;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        resetInitialSettings();\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\n    }\n\n    function checkConfig() {\n        if (!dashMetrics || !dashMetrics.hasOwnProperty('getCurrentBufferLevel') || !dashMetrics.hasOwnProperty('getLatestBufferInfoVO')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n    /*\n     * InsufficientBufferRule does not kick in before the first BUFFER_LOADED event happens. This is reset at every seek.\n     *\n     * If a BUFFER_EMPTY event happens, then InsufficientBufferRule returns switchRequest.quality=0 until BUFFER_LOADED happens.\n     *\n     * Otherwise InsufficientBufferRule gives a maximum bitrate depending on throughput and bufferLevel such that\n     * a whole fragment can be downloaded before the buffer runs out, subject to a conservative safety factor of 0.5.\n     * If the bufferLevel is low, then InsufficientBufferRule avoids rebuffering risk.\n     * If the bufferLevel is high, then InsufficientBufferRule give a high MaxIndex allowing other rules to take over.\n     */\n    function getMaxIndex (rulesContext) {\n        const switchRequest = SwitchRequest(context).create();\n\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaType')) {\n            return switchRequest;\n        }\n\n        checkConfig();\n\n        const mediaType = rulesContext.getMediaType();\n        const lastBufferStateVO = dashMetrics.getLatestBufferInfoVO(mediaType, true, MetricsConstants.BUFFER_STATE);\n        const representationInfo = rulesContext.getRepresentationInfo();\n        const fragmentDuration = representationInfo.fragmentDuration;\n\n        // Don't ask for a bitrate change if there is not info about buffer state or if fragmentDuration is not defined\n        if (!lastBufferStateVO || !wasFirstBufferLoadedEventTriggered(mediaType, lastBufferStateVO) || !fragmentDuration) {\n            return switchRequest;\n        }\n\n        if (lastBufferStateVO.state === MetricsConstants.BUFFER_EMPTY) {\n            logger.debug('[' + mediaType + '] Switch to index 0; buffer is empty.');\n            switchRequest.quality = 0;\n            switchRequest.reason = 'InsufficientBufferRule: Buffer is empty';\n        } else {\n            const mediaInfo = rulesContext.getMediaInfo();\n            const abrController = rulesContext.getAbrController();\n            const throughputHistory = abrController.getThroughputHistory();\n\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType, true);\n            const throughput = throughputHistory.getAverageThroughput(mediaType);\n            const latency = throughputHistory.getAverageLatency(mediaType);\n            const bitrate = throughput * (bufferLevel / fragmentDuration) * INSUFFICIENT_BUFFER_SAFETY_FACTOR;\n\n            switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, bitrate, latency);\n            switchRequest.reason = 'InsufficientBufferRule: being conservative to avoid immediate rebuffering';\n        }\n\n        return switchRequest;\n    }\n\n    function wasFirstBufferLoadedEventTriggered(mediaType, currentBufferState) {\n        bufferStateDict[mediaType] = bufferStateDict[mediaType] || {};\n\n        let wasTriggered = false;\n        if (bufferStateDict[mediaType].firstBufferLoadedEvent) {\n            wasTriggered = true;\n        } else if (currentBufferState && currentBufferState.state === MetricsConstants.BUFFER_LOADED) {\n            bufferStateDict[mediaType].firstBufferLoadedEvent = true;\n            wasTriggered = true;\n        }\n        return wasTriggered;\n    }\n\n    function resetInitialSettings() {\n        bufferStateDict = {};\n    }\n\n    function onPlaybackSeeking() {\n        resetInitialSettings();\n    }\n\n    function reset() {\n        resetInitialSettings();\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\n    }\n\n    instance = {\n        getMaxIndex: getMaxIndex,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nInsufficientBufferRule.__dashjs_factory_name = 'InsufficientBufferRule';\nexport default FactoryMaker.getClassFactory(InsufficientBufferRule);\n"]}