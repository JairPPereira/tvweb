{"version":3,"sources":["../../../../../src/streaming/rules/SwitchRequestHistory.js"],"names":["SWITCH_REQUEST_HISTORY_DEPTH","SwitchRequestHistory","switchRequests","srHistory","push","switchRequest","newValue","SwitchRequest","NO_CHANGE","oldValue","noDrops","drops","dropSize","indexDiff","drop","noDrop","idx","length","srHistoryFirst","shift","getSwitchRequests","reset","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"sEA+BA,qD,yDACA,8C,8IAhCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCA,GAAMA,8BAA+B,CAArC,CAAwC;AAExC,QAASC,qBAAT,EAAgC,CAC5B,GAAIC,gBAAiB,EAArB,CAAyB;AACzB,GAAIC,WAAY,EAAhB,CAAoB;AAEpB,QAASC,KAAT,CAAcC,aAAd,CAA6B,CACzB,GAAIA,cAAcC,QAAd,GAA2BC,wBAAcC,SAA7C,CAAwD,CACpDH,cAAcC,QAAd,CAAyBD,cAAcI,QAAvC,CACH,CACD,GAAI,CAACP,eAAeG,cAAcI,QAA7B,CAAL,CAA6C,CACzCP,eAAeG,cAAcI,QAA7B,EAAyC,CAACC,QAAS,CAAV,CAAaC,MAAO,CAApB,CAAuBC,SAAU,CAAjC,CAAzC,CACH,CAED;AACA,GAAIC,WAAYR,cAAcC,QAAd,CAAyBD,cAAcI,QAAvD,CACA,GAAIK,MAAQD,UAAY,CAAb,CAAkB,CAAlB,CAAsB,CAAjC,CACA,GAAID,UAAWE,KAAO,CAACD,SAAR,CAAoB,CAAnC,CACA,GAAIE,QAASD,KAAO,CAAP,CAAW,CAAxB,CAEA;AACAZ,eAAeG,cAAcI,QAA7B,EAAuCE,KAAvC,EAAgDG,IAAhD,CACAZ,eAAeG,cAAcI,QAA7B,EAAuCG,QAAvC,EAAmDA,QAAnD,CACAV,eAAeG,cAAcI,QAA7B,EAAuCC,OAAvC,EAAkDK,MAAlD,CAEA;AACAZ,UAAUC,IAAV,CAAe,CAACY,IAAKX,cAAcI,QAApB,CAA8BM,OAAQA,MAAtC,CAA8CD,KAAMA,IAApD,CAA0DF,SAAUA,QAApE,CAAf,EAEA;AACA,GAAKT,UAAUc,MAAV,CAAmBjB,4BAAxB,CAAuD,CACnD,GAAIkB,gBAAiBf,UAAUgB,KAAV,EAArB,CACAjB,eAAegB,eAAeF,GAA9B,EAAmCL,KAAnC,EAA4CO,eAAeJ,IAA3D,CACAZ,eAAegB,eAAeF,GAA9B,EAAmCJ,QAAnC,EAA+CM,eAAeN,QAA9D,CACAV,eAAegB,eAAeF,GAA9B,EAAmCN,OAAnC,EAA8CQ,eAAeH,MAA7D,CACH,CACJ,CAED,QAASK,kBAAT,EAA6B,CACzB,MAAOlB,eAAP,CACH,CAED,QAASmB,MAAT,EAAiB,CACbnB,eAAiB,EAAjB,CACAC,UAAY,EAAZ,CACH,CAED,MAAO,CACHC,KAAMA,IADH,CAEHgB,kBAAmBA,iBAFhB,CAGHC,MAAOA,KAHJ,CAAP,CAKH,CAEDpB,qBAAqBqB,qBAArB,CAA6C,sBAA7C,CACA,GAAMC,SAAUC,uBAAaC,eAAb,CAA6BxB,oBAA7B,CAAhB,C,gBACesB,O","file":"SwitchRequestHistory.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport SwitchRequest from './SwitchRequest';\n\nconst SWITCH_REQUEST_HISTORY_DEPTH = 8; // must be > SwitchHistoryRule SAMPLE_SIZE to enable rule\n\nfunction SwitchRequestHistory() {\n    let switchRequests = []; // running total\n    let srHistory = []; // history of each switch\n\n    function push(switchRequest) {\n        if (switchRequest.newValue === SwitchRequest.NO_CHANGE) {\n            switchRequest.newValue = switchRequest.oldValue;\n        }\n        if (!switchRequests[switchRequest.oldValue]) {\n            switchRequests[switchRequest.oldValue] = {noDrops: 0, drops: 0, dropSize: 0};\n        }\n\n        // Set switch details\n        let indexDiff = switchRequest.newValue - switchRequest.oldValue;\n        let drop = (indexDiff < 0) ? 1 : 0;\n        let dropSize = drop ? -indexDiff : 0;\n        let noDrop = drop ? 0 : 1;\n\n        // Update running totals\n        switchRequests[switchRequest.oldValue].drops += drop;\n        switchRequests[switchRequest.oldValue].dropSize += dropSize;\n        switchRequests[switchRequest.oldValue].noDrops += noDrop;\n\n        // Save to history\n        srHistory.push({idx: switchRequest.oldValue, noDrop: noDrop, drop: drop, dropSize: dropSize});\n\n        // Shift earliest switch off srHistory and readjust to keep depth of running totals constant\n        if ( srHistory.length > SWITCH_REQUEST_HISTORY_DEPTH ) {\n            let srHistoryFirst = srHistory.shift();\n            switchRequests[srHistoryFirst.idx].drops -= srHistoryFirst.drop;\n            switchRequests[srHistoryFirst.idx].dropSize -= srHistoryFirst.dropSize;\n            switchRequests[srHistoryFirst.idx].noDrops -= srHistoryFirst.noDrop;\n        }\n    }\n\n    function getSwitchRequests() {\n        return switchRequests;\n    }\n\n    function reset() {\n        switchRequests = [];\n        srHistory = [];\n    }\n\n    return {\n        push: push,\n        getSwitchRequests: getSwitchRequests,\n        reset: reset\n    };\n}\n\nSwitchRequestHistory.__dashjs_factory_name = 'SwitchRequestHistory';\nconst factory = FactoryMaker.getClassFactory(SwitchRequestHistory);\nexport default factory;\n"]}