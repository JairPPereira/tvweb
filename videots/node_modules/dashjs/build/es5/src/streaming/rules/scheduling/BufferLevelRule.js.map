{"version":3,"sources":["../../../../../../src/streaming/rules/scheduling/BufferLevelRule.js"],"names":["BufferLevelRule","config","dashMetrics","mediaPlayerModel","textController","abrController","settings","setup","execute","streamProcessor","videoTrackPresent","bufferLevel","getCurrentBufferLevel","getType","getBufferTarget","bufferTarget","NaN","type","representationInfo","getRepresentationInfo","Constants","FRAGMENTED_TEXT","isTextEnabled","isNaN","fragmentDuration","bufferInfo","getLatestBufferInfoVO","MetricsConstants","SCHEDULING_INFO","duration","AUDIO","videoBufferLevel","VIDEO","Math","max","streamInfo","mediaInfo","isPlayingAtTopQuality","isLongFormContent","manifestInfo","get","streaming","longFormContentDurationThreshold","bufferTimeAtTopQualityLongForm","bufferTimeAtTopQuality","getStableBufferTime","instance","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"sEA8BA,oD,mDACA,wD,yDACA,kE,oJAEA,QAASA,gBAAT,CAAyBC,MAAzB,CAAiC,CAE7BA,OAASA,QAAU,EAAnB,CACA,GAAMC,aAAcD,OAAOC,WAA3B,CACA,GAAMC,kBAAmBF,OAAOE,gBAAhC,CACA,GAAMC,gBAAiBH,OAAOG,cAA9B,CACA,GAAMC,eAAgBJ,OAAOI,aAA7B,CACA,GAAMC,UAAWL,OAAOK,QAAxB,CAEA,QAASC,MAAT,EAAiB,CAChB,CAED,QAASC,QAAT,CAAiBC,eAAjB,CAAkCC,iBAAlC,CAAqD,CACjD,GAAI,CAACD,eAAL,CAAsB,CAClB,MAAO,KAAP,CACH,CACD,GAAME,aAAcT,YAAYU,qBAAZ,CAAkCH,gBAAgBI,OAAhB,EAAlC,CAA6D,IAA7D,CAApB,CACA,MAAOF,aAAcG,gBAAgBL,eAAhB,CAAiCC,iBAAjC,CAArB,CACH,CAED,QAASI,gBAAT,CAAyBL,eAAzB,CAA0CC,iBAA1C,CAA6D,CACzD,GAAIK,cAAeC,GAAnB,CAEA,GAAI,CAACP,eAAL,CAAsB,CAClB,MAAOM,aAAP,CACH,CACD,GAAME,MAAOR,gBAAgBI,OAAhB,EAAb,CACA,GAAMK,oBAAqBT,gBAAgBU,qBAAhB,EAA3B,CACA,GAAIF,OAASG,oBAAUC,eAAvB,CAAwC,CACpC,GAAIjB,eAAekB,aAAf,EAAJ,CAAoC,CAChC,GAAIC,MAAML,mBAAmBM,gBAAzB,CAAJ,CAAgD,CAAE;AAC9C;AACA;AACA,GAAMC,YAAavB,YAAYwB,qBAAZ,CAAkCN,oBAAUC,eAA5C,CAA6D,IAA7D,CAAmEM,2BAAiBC,eAApF,CAAnB,CACAb,aAAeU,WAAaA,WAAWI,QAAxB,CAAmC,CAAlD,CACH,CALD,IAKO,CACHd,aAAeG,mBAAmBM,gBAAlC,CACH,CACJ,CATD,IASO,CAAE;AACLT,aAAe,CAAf,CACH,CACJ,CAbD,IAaO,IAAIE,OAASG,oBAAUU,KAAnB,EAA4BpB,iBAAhC,CAAmD,CACtD,GAAMqB,kBAAmB7B,YAAYU,qBAAZ,CAAkCQ,oBAAUY,KAA5C,CAAmD,IAAnD,CAAzB,CACA,GAAIT,MAAML,mBAAmBM,gBAAzB,CAAJ,CAAgD,CAC5CT,aAAegB,gBAAf,CACH,CAFD,IAEO,CACHhB,aAAekB,KAAKC,GAAL,CAASH,gBAAT,CAA2Bb,mBAAmBM,gBAA9C,CAAf,CACH,CACJ,CAPM,IAOA,CACH,GAAMW,YAAajB,mBAAmBkB,SAAnB,CAA6BD,UAAhD,CACA,GAAI9B,cAAcgC,qBAAd,CAAoCF,UAApC,CAAJ,CAAqD,CACjD,GAAMG,mBAAoBH,WAAWI,YAAX,CAAwBV,QAAxB,EAAoCvB,SAASkC,GAAT,GAAeC,SAAf,CAAyBC,gCAAvF,CACA3B,aAAeuB,kBAAoBhC,SAASkC,GAAT,GAAeC,SAAf,CAAyBE,8BAA7C,CAA8ErC,SAASkC,GAAT,GAAeC,SAAf,CAAyBG,sBAAtH,CACH,CAHD,IAGO,CACH7B,aAAeZ,iBAAiB0C,mBAAjB,EAAf,CACH,CACJ,CACD,MAAO9B,aAAP,CACH,CAED,GAAM+B,UAAW,CACbtC,QAASA,OADI,CAEbM,gBAAiBA,eAFJ,CAAjB,CAKAP,QACA,MAAOuC,SAAP,CACH,CArGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuGA9C,gBAAgB+C,qBAAhB,CAAwC,iBAAxC,C,gBACeC,uBAAaC,eAAb,CAA6BjD,eAA7B,C","file":"BufferLevelRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../../constants/Constants';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport MetricsConstants from '../../constants/MetricsConstants';\n\nfunction BufferLevelRule(config) {\n\n    config = config || {};\n    const dashMetrics = config.dashMetrics;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const textController = config.textController;\n    const abrController = config.abrController;\n    const settings = config.settings;\n\n    function setup() {\n    }\n\n    function execute(streamProcessor, videoTrackPresent) {\n        if (!streamProcessor) {\n            return true;\n        }\n        const bufferLevel = dashMetrics.getCurrentBufferLevel(streamProcessor.getType(), true);\n        return bufferLevel < getBufferTarget(streamProcessor, videoTrackPresent);\n    }\n\n    function getBufferTarget(streamProcessor, videoTrackPresent) {\n        let bufferTarget = NaN;\n\n        if (!streamProcessor) {\n            return bufferTarget;\n        }\n        const type = streamProcessor.getType();\n        const representationInfo = streamProcessor.getRepresentationInfo();\n        if (type === Constants.FRAGMENTED_TEXT) {\n            if (textController.isTextEnabled()) {\n                if (isNaN(representationInfo.fragmentDuration)) { //fragmentDuration of representationInfo is not defined,\n                    // call metrics function to have data in the latest scheduling info...\n                    // if no metric, returns 0. In this case, rule will return false.\n                    const bufferInfo = dashMetrics.getLatestBufferInfoVO(Constants.FRAGMENTED_TEXT, true, MetricsConstants.SCHEDULING_INFO);\n                    bufferTarget = bufferInfo ? bufferInfo.duration : 0;\n                } else {\n                    bufferTarget = representationInfo.fragmentDuration;\n                }\n            } else { // text is disabled, rule will return false\n                bufferTarget = 0;\n            }\n        } else if (type === Constants.AUDIO && videoTrackPresent) {\n            const videoBufferLevel = dashMetrics.getCurrentBufferLevel(Constants.VIDEO, true);\n            if (isNaN(representationInfo.fragmentDuration)) {\n                bufferTarget = videoBufferLevel;\n            } else {\n                bufferTarget = Math.max(videoBufferLevel, representationInfo.fragmentDuration);\n            }\n        } else {\n            const streamInfo = representationInfo.mediaInfo.streamInfo;\n            if (abrController.isPlayingAtTopQuality(streamInfo)) {\n                const isLongFormContent = streamInfo.manifestInfo.duration >= settings.get().streaming.longFormContentDurationThreshold;\n                bufferTarget = isLongFormContent ? settings.get().streaming.bufferTimeAtTopQualityLongForm : settings.get().streaming.bufferTimeAtTopQuality;\n            } else {\n                bufferTarget = mediaPlayerModel.getStableBufferTime();\n            }\n        }\n        return bufferTarget;\n    }\n\n    const instance = {\n        execute: execute,\n        getBufferTarget: getBufferTarget\n    };\n\n    setup();\n    return instance;\n}\n\nBufferLevelRule.__dashjs_factory_name = 'BufferLevelRule';\nexport default FactoryMaker.getClassFactory(BufferLevelRule);\n"]}