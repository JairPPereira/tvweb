{"version":3,"sources":["../../../../../../src/streaming/rules/abr/SwitchHistoryRule.js"],"names":["SwitchHistoryRule","context","instance","logger","MAX_SWITCH","SAMPLE_SIZE","setup","getInstance","getLogger","getMaxIndex","rulesContext","switchRequestHistory","getSwitchHistory","switchRequests","getSwitchRequests","drops","noDrops","dropSize","switchRequest","create","i","length","undefined","quality","reason","index","debug","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"sEACA,wD,yDACA,0C,2CACA,+C,8IAEA,QAASA,kBAAT,EAA6B,CAEzB,GAAMC,SAAU,KAAKA,OAArB,CAEA,GAAIC,gBAAJ,CACIC,aADJ,CAGA;AACA,GAAMC,YAAa,KAAnB,CAEA;AACA;AACA,GAAMC,aAAc,CAApB,CAEA,QAASC,MAAT,EAAiB,CACbH,OAAS,oBAAMF,OAAN,EAAeM,WAAf,GAA6BC,SAA7B,CAAuCN,QAAvC,CAAT,CACH,CAED,QAASO,YAAT,CAAqBC,YAArB,CAAmC,CAC/B,GAAMC,sBAAuBD,aAAeA,aAAaE,gBAAb,EAAf,CAAiD,IAA9E,CACA,GAAMC,gBAAiBF,qBAAuBA,qBAAqBG,iBAArB,EAAvB,CAAkE,EAAzF,CACA,GAAIC,OAAQ,CAAZ,CACA,GAAIC,SAAU,CAAd,CACA,GAAIC,UAAW,CAAf,CACA,GAAMC,eAAgB,4BAAcjB,OAAd,EAAuBkB,MAAvB,EAAtB,CAEA,IAAK,GAAIC,GAAI,CAAb,CAAgBA,EAAIP,eAAeQ,MAAnC,CAA2CD,GAA3C,CAAgD,CAC5C,GAAIP,eAAeO,CAAf,IAAsBE,SAA1B,CAAqC,CACjCP,OAASF,eAAeO,CAAf,EAAkBL,KAA3B,CACAC,SAAWH,eAAeO,CAAf,EAAkBJ,OAA7B,CACAC,UAAYJ,eAAeO,CAAf,EAAkBH,QAA9B,CAEA,GAAIF,MAAQC,OAAR,EAAmBX,WAAnB,EAAmCU,MAAQC,OAAR,CAAkBZ,UAAzD,CAAsE,CAClEc,cAAcK,OAAd,CAAyBH,EAAI,CAAJ,EAASP,eAAeO,CAAf,EAAkBL,KAAlB,CAA0B,CAApC,CAAyCK,EAAI,CAA7C,CAAiDA,CAAzE,CACAF,cAAcM,MAAd,CAAuB,CAACC,MAAOP,cAAcK,OAAtB,CAA+BR,MAAOA,KAAtC,CAA6CC,QAASA,OAAtD,CAA+DC,SAAUA,QAAzE,CAAvB,CACAd,OAAOuB,KAAP,CAAa,8BAAgCR,cAAcK,OAA9C,CAAwD,YAAxD,EAAwER,MAAQC,OAAhF,EAA2F,UAA3F,CAAwGD,KAArH,EACA,MACH,CACJ,CACJ,CAED,MAAOG,cAAP,CACH,CAEDhB,SAAW,CACPO,YAAaA,WADN,CAAX,CAIAH,QAEA,MAAOJ,SAAP,CACH,CAGDF,kBAAkB2B,qBAAlB,CAA0C,mBAA1C,C,gBACeC,uBAAaC,eAAb,CAA6B7B,iBAA7B,C","file":"SwitchHistoryRule.js","sourcesContent":["\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\nimport SwitchRequest from '../SwitchRequest';\n\nfunction SwitchHistoryRule() {\n\n    const context = this.context;\n\n    let instance,\n        logger;\n\n    //MAX_SWITCH is the number of drops made. It doesn't consider the size of the drop.\n    const MAX_SWITCH = 0.075;\n\n    //Before this number of switch requests(no switch or actual), don't apply the rule.\n    //must be < SwitchRequestHistory SWITCH_REQUEST_HISTORY_DEPTH to enable rule\n    const SAMPLE_SIZE = 6;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function getMaxIndex(rulesContext) {\n        const switchRequestHistory = rulesContext ? rulesContext.getSwitchHistory() : null;\n        const switchRequests = switchRequestHistory ? switchRequestHistory.getSwitchRequests() : [];\n        let drops = 0;\n        let noDrops = 0;\n        let dropSize = 0;\n        const switchRequest = SwitchRequest(context).create();\n\n        for (let i = 0; i < switchRequests.length; i++) {\n            if (switchRequests[i] !== undefined) {\n                drops += switchRequests[i].drops;\n                noDrops += switchRequests[i].noDrops;\n                dropSize += switchRequests[i].dropSize;\n\n                if (drops + noDrops >= SAMPLE_SIZE && (drops / noDrops > MAX_SWITCH)) {\n                    switchRequest.quality = (i > 0 && switchRequests[i].drops > 0) ? i - 1 : i;\n                    switchRequest.reason = {index: switchRequest.quality, drops: drops, noDrops: noDrops, dropSize: dropSize};\n                    logger.debug('Switch history rule index: ' + switchRequest.quality + ' samples: ' + (drops + noDrops) + ' drops: ' + drops);\n                    break;\n                }\n            }\n        }\n\n        return switchRequest;\n    }\n\n    instance = {\n        getMaxIndex: getMaxIndex\n    };\n\n    setup();\n\n    return instance;\n}\n\n\nSwitchHistoryRule.__dashjs_factory_name = 'SwitchHistoryRule';\nexport default FactoryMaker.getClassFactory(SwitchHistoryRule);\n"]}