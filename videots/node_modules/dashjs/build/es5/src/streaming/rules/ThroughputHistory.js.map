{"version":3,"sources":["../../../../../src/streaming/rules/ThroughputHistory.js"],"names":["ThroughputHistory","config","MAX_MEASUREMENTS_TO_KEEP","AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE","AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD","AVERAGE_LATENCY_SAMPLE_AMOUNT","THROUGHPUT_DECREASE_SCALE","THROUGHPUT_INCREASE_SCALE","EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS","EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS","EWMA_LATENCY_SLOW_HALF_LIFE_COUNT","EWMA_LATENCY_FAST_HALF_LIFE_COUNT","settings","throughputDict","latencyDict","ewmaThroughputDict","ewmaLatencyDict","ewmaHalfLife","setup","throughputHalfLife","fast","slow","latencyHalfLife","reset","isCachedResponse","mediaType","latencyMs","downloadTimeMs","Constants","VIDEO","get","streaming","cacheLoadThresholds","AUDIO","push","httpRequest","useDeadTimeLatency","trace","length","latencyTimeInMilliseconds","tresponse","getTime","trequest","downloadTimeInMilliseconds","_tfinish","downloadBytes","reduce","a","b","throughputMeasureTime","lowLatencyEnabled","d","throughput","Math","round","checkSettingsForMediaType","hasCachedEntries","clearSettingsForMediaType","shift","updateEwmaEstimate","ewmaObj","value","weight","halfLife","fastAlpha","pow","fastEstimate","slowAlpha","slowEstimate","totalWeight","getSampleSize","isThroughput","isLive","arr","sampleSize","i","ratio","getAverage","isDynamic","abr","movingAverageMethod","MOVING_AVERAGE_SLIDING_WINDOW","getAverageEwma","getAverageSlidingWindow","dict","NaN","slice","total","elem","min","max","getAverageThroughput","getSafeAverageThroughput","average","isNaN","bandwidthSafetyFactor","getAverageLatency","instance","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"ThroughputHistory.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2017, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport Constants from '../constants/Constants';\nimport FactoryMaker from '../../core/FactoryMaker';\n\n// throughput generally stored in kbit/s\n// latency generally stored in ms\n\nfunction ThroughputHistory(config) {\n\n    config = config || {};\n    // sliding window constants\n    const MAX_MEASUREMENTS_TO_KEEP = 20;\n    const AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE = 3;\n    const AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD = 4;\n    const AVERAGE_LATENCY_SAMPLE_AMOUNT = 4;\n    const THROUGHPUT_DECREASE_SCALE = 1.3;\n    const THROUGHPUT_INCREASE_SCALE = 1.3;\n\n    // EWMA constants\n    const EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS = 8;\n    const EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS = 3;\n    const EWMA_LATENCY_SLOW_HALF_LIFE_COUNT = 2;\n    const EWMA_LATENCY_FAST_HALF_LIFE_COUNT = 1;\n\n    const settings = config.settings;\n\n    let throughputDict,\n        latencyDict,\n        ewmaThroughputDict,\n        ewmaLatencyDict,\n        ewmaHalfLife;\n\n    function setup() {\n        ewmaHalfLife = {\n            throughputHalfLife: { fast: EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS, slow: EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS },\n            latencyHalfLife:    { fast: EWMA_LATENCY_FAST_HALF_LIFE_COUNT,      slow: EWMA_LATENCY_SLOW_HALF_LIFE_COUNT }\n        };\n\n        reset();\n    }\n\n    function isCachedResponse(mediaType, latencyMs, downloadTimeMs) {\n        if (mediaType === Constants.VIDEO) {\n            return downloadTimeMs < settings.get().streaming.cacheLoadThresholds[Constants.VIDEO];\n        } else if (mediaType === Constants.AUDIO) {\n            return downloadTimeMs < settings.get().streaming.cacheLoadThresholds[Constants.AUDIO];\n        }\n    }\n\n    function push(mediaType, httpRequest, useDeadTimeLatency) {\n        if (!httpRequest.trace || !httpRequest.trace.length) {\n            return;\n        }\n\n        const latencyTimeInMilliseconds = (httpRequest.tresponse.getTime() - httpRequest.trequest.getTime()) || 1;\n        const downloadTimeInMilliseconds = (httpRequest._tfinish.getTime() - httpRequest.tresponse.getTime()) || 1; //Make sure never 0 we divide by this value. Avoid infinity!\n        const downloadBytes = httpRequest.trace.reduce((a, b) => a + b.b[0], 0);\n\n        let throughputMeasureTime;\n        if (settings.get().streaming.lowLatencyEnabled) {\n            throughputMeasureTime = httpRequest.trace.reduce((a, b) => a + b.d, 0);\n        } else {\n            throughputMeasureTime = useDeadTimeLatency ? downloadTimeInMilliseconds : latencyTimeInMilliseconds + downloadTimeInMilliseconds;\n        }\n\n        const throughput = Math.round((8 * downloadBytes) / throughputMeasureTime); // bits/ms = kbits/s\n\n        checkSettingsForMediaType(mediaType);\n\n        if (isCachedResponse(mediaType, latencyTimeInMilliseconds, downloadTimeInMilliseconds)) {\n            if (throughputDict[mediaType].length > 0 && !throughputDict[mediaType].hasCachedEntries) {\n                // already have some entries which are not cached entries\n                // prevent cached fragment loads from skewing the average values\n                return;\n            } else { // have no entries || have cached entries\n                // no uncached entries yet, rely on cached entries because ABR rules need something to go by\n                throughputDict[mediaType].hasCachedEntries = true;\n            }\n        } else if (throughputDict[mediaType] && throughputDict[mediaType].hasCachedEntries) {\n            // if we are here then we have some entries already, but they are cached, and now we have a new uncached entry\n            clearSettingsForMediaType(mediaType);\n        }\n\n        throughputDict[mediaType].push(throughput);\n        if (throughputDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {\n            throughputDict[mediaType].shift();\n        }\n\n        latencyDict[mediaType].push(latencyTimeInMilliseconds);\n        if (latencyDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {\n            latencyDict[mediaType].shift();\n        }\n\n        updateEwmaEstimate(ewmaThroughputDict[mediaType], throughput, 0.001 * downloadTimeInMilliseconds, ewmaHalfLife.throughputHalfLife);\n        updateEwmaEstimate(ewmaLatencyDict[mediaType], latencyTimeInMilliseconds, 1, ewmaHalfLife.latencyHalfLife);\n    }\n\n    function updateEwmaEstimate(ewmaObj, value, weight, halfLife) {\n        // Note about startup:\n        // Estimates start at 0, so early values are underestimated.\n        // This effect is countered in getAverageEwma() by dividing the estimates by:\n        //     1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)\n\n        const fastAlpha = Math.pow(0.5, weight / halfLife.fast);\n        ewmaObj.fastEstimate = (1 - fastAlpha) * value + fastAlpha * ewmaObj.fastEstimate;\n\n        const slowAlpha = Math.pow(0.5, weight / halfLife.slow);\n        ewmaObj.slowEstimate = (1 - slowAlpha) * value + slowAlpha * ewmaObj.slowEstimate;\n\n        ewmaObj.totalWeight += weight;\n    }\n\n    function getSampleSize(isThroughput, mediaType, isLive) {\n        let arr,\n            sampleSize;\n\n        if (isThroughput) {\n            arr = throughputDict[mediaType];\n            sampleSize = isLive ? AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE : AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD;\n        } else {\n            arr = latencyDict[mediaType];\n            sampleSize = AVERAGE_LATENCY_SAMPLE_AMOUNT;\n        }\n\n        if (!arr) {\n            sampleSize = 0;\n        } else if (sampleSize >= arr.length) {\n            sampleSize = arr.length;\n        } else if (isThroughput) {\n            // if throughput samples vary a lot, average over a wider sample\n            for (let i = 1; i < sampleSize; ++i) {\n                const ratio = arr[i] / arr[i - 1];\n                if (ratio >= THROUGHPUT_INCREASE_SCALE || ratio <= 1 / THROUGHPUT_DECREASE_SCALE) {\n                    sampleSize += 1;\n                    if (sampleSize === arr.length) { // cannot increase sampleSize beyond arr.length\n                        break;\n                    }\n                }\n            }\n        }\n\n        return sampleSize;\n    }\n\n    function getAverage(isThroughput, mediaType, isDynamic) {\n        // only two moving average methods defined at the moment\n        return settings.get().streaming.abr.movingAverageMethod !== Constants.MOVING_AVERAGE_SLIDING_WINDOW ?\n            getAverageEwma(isThroughput, mediaType) : getAverageSlidingWindow(isThroughput, mediaType, isDynamic);\n    }\n\n    function getAverageSlidingWindow(isThroughput, mediaType, isDynamic) {\n        const sampleSize = getSampleSize(isThroughput, mediaType, isDynamic);\n        const dict = isThroughput ? throughputDict : latencyDict;\n        let arr = dict[mediaType];\n\n        if (sampleSize === 0 || !arr || arr.length === 0) {\n            return NaN;\n        }\n\n        arr = arr.slice(-sampleSize); // still works if sampleSize too large\n        // arr.length >= 1\n        return arr.reduce((total, elem) => total + elem) / arr.length;\n    }\n\n    function getAverageEwma(isThroughput, mediaType) {\n        const halfLife = isThroughput ? ewmaHalfLife.throughputHalfLife : ewmaHalfLife.latencyHalfLife;\n        const ewmaObj = isThroughput ? ewmaThroughputDict[mediaType] : ewmaLatencyDict[mediaType];\n\n        if (!ewmaObj || ewmaObj.totalWeight <= 0) {\n            return NaN;\n        }\n\n        // to correct for startup, divide by zero factor = 1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)\n        const fastEstimate = ewmaObj.fastEstimate / (1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife.fast));\n        const slowEstimate = ewmaObj.slowEstimate / (1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife.slow));\n        return isThroughput ? Math.min(fastEstimate, slowEstimate) : Math.max(fastEstimate, slowEstimate);\n    }\n\n    function getAverageThroughput(mediaType, isDynamic) {\n        return getAverage(true, mediaType, isDynamic);\n    }\n\n    function getSafeAverageThroughput(mediaType, isDynamic) {\n        let average = getAverageThroughput(mediaType, isDynamic);\n        if (!isNaN(average)) {\n            average *= settings.get().streaming.abr.bandwidthSafetyFactor;\n        }\n        return average;\n    }\n\n    function getAverageLatency(mediaType) {\n        return getAverage(false, mediaType);\n    }\n\n    function checkSettingsForMediaType(mediaType) {\n        throughputDict[mediaType] = throughputDict[mediaType] || [];\n        latencyDict[mediaType] = latencyDict[mediaType] || [];\n        ewmaThroughputDict[mediaType] = ewmaThroughputDict[mediaType] || {fastEstimate: 0, slowEstimate: 0, totalWeight: 0};\n        ewmaLatencyDict[mediaType] = ewmaLatencyDict[mediaType] || {fastEstimate: 0, slowEstimate: 0, totalWeight: 0};\n    }\n\n    function clearSettingsForMediaType(mediaType) {\n        delete throughputDict[mediaType];\n        delete latencyDict[mediaType];\n        delete ewmaThroughputDict[mediaType];\n        delete ewmaLatencyDict[mediaType];\n        checkSettingsForMediaType(mediaType);\n    }\n\n    function reset() {\n        throughputDict = {};\n        latencyDict = {};\n        ewmaThroughputDict = {};\n        ewmaLatencyDict = {};\n    }\n\n    const instance = {\n        push: push,\n        getAverageThroughput: getAverageThroughput,\n        getSafeAverageThroughput: getSafeAverageThroughput,\n        getAverageLatency: getAverageLatency,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nThroughputHistory.__dashjs_factory_name = 'ThroughputHistory';\nexport default FactoryMaker.getClassFactory(ThroughputHistory);\n"]}