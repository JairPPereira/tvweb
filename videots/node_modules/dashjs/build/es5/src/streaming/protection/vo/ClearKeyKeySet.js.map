{"version":3,"sources":["../../../../../../src/streaming/protection/vo/ClearKeyKeySet.js"],"names":["ClearKeyKeySet","keyPairs","type","Error","i","numKeys","length","jwk","keys","key","kty","alg","kid","keyID","k","push","jwkString","JSON","stringify","len","buf","ArrayBuffer","bView","Uint8Array","charCodeAt"],"mappings":"qtBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BA;;;;MAKMA,e,YACF;;;;;;OAOA,wBAAYC,QAAZ,CAAsBC,IAAtB,CAA4B,sCACxB,GAAIA,MAAQA,OAAS,YAAjB,EAAiCA,OAAS,WAA9C,CACI,KAAM,IAAIC,MAAJ,CAAU,gFAAV,CAAN,CACJ,KAAKF,QAAL,CAAgBA,QAAhB,CACA,KAAKC,IAAL,CAAYA,IAAZ,CACH,CAED;;;;uEAKQ,CACJ,GAAIE,SAAJ,CACA,GAAIC,SAAU,KAAKJ,QAAL,CAAcK,MAA5B,CACA,GAAIC,KAAM,CAACC,KAAM,EAAP,CAAV,CAEA,IAAKJ,EAAI,CAAT,CAAYA,EAAIC,OAAhB,CAAyBD,GAAzB,CAA8B,CAC1B,GAAIK,KAAM,CACNC,IAAK,KADC,CAENC,IAAK,QAFC,CAGNC,IAAK,KAAKX,QAAL,CAAcG,CAAd,EAAiBS,KAHhB,CAINC,EAAG,KAAKb,QAAL,CAAcG,CAAd,EAAiBK,GAJd,CAAV,CAMAF,IAAIC,IAAJ,CAASO,IAAT,CAAcN,GAAd,EACH,CACD,GAAI,KAAKP,IAAT,CAAe,CACXK,IAAIL,IAAJ,CAAW,KAAKA,IAAhB,CACH,CACD,GAAIc,WAAYC,KAAKC,SAAL,CAAeX,GAAf,CAAhB,CACA,GAAMY,KAAMH,UAAUV,MAAtB,CAEA;AACA,GAAIc,KAAM,GAAIC,YAAJ,CAAgBF,GAAhB,CAAV,CACA,GAAIG,OAAQ,GAAIC,WAAJ,CAAeH,GAAf,CAAZ,CACA,IAAKhB,EAAI,CAAT,CAAYA,EAAIe,GAAhB,CAAqBf,GAArB,EACIkB,MAAMlB,CAAN,EAAWY,UAAUQ,UAAV,CAAqBpB,CAArB,CAAX,CADJ,CAEA,MAAOgB,IAAP,CACH,C,8CAGUpB,c","file":"ClearKeyKeySet.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\n *  type\n * @ignore\n */\nclass ClearKeyKeySet {\n    /**\n     * @param {Array.<KeyPair>} keyPairs\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\n     * or 'temporary'.  Can also be null or undefined.\n     * @class\n     * @ignore\n     */\n    constructor(keyPairs, type) {\n        if (type && type !== 'persistent' && type !== 'temporary')\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\n        this.keyPairs = keyPairs;\n        this.type = type;\n    }\n\n    /**\n     * Convert this key set to its JSON Web Key (JWK) representation\n     *\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\n     */\n    toJWK() {\n        let i;\n        let numKeys = this.keyPairs.length;\n        let jwk = {keys: []};\n\n        for (i = 0; i < numKeys; i++) {\n            let key = {\n                kty: 'oct',\n                alg: 'A128KW',\n                kid: this.keyPairs[i].keyID,\n                k: this.keyPairs[i].key\n            };\n            jwk.keys.push(key);\n        }\n        if (this.type) {\n            jwk.type = this.type;\n        }\n        let jwkString = JSON.stringify(jwk);\n        const len = jwkString.length;\n\n        // Convert JSON string to ArrayBuffer\n        let buf = new ArrayBuffer(len);\n        let bView = new Uint8Array(buf);\n        for (i = 0; i < len; i++)\n            bView[i] = jwkString.charCodeAt(i);\n        return buf;\n    }\n}\n\nexport default ClearKeyKeySet;\n"]}