{"version":3,"sources":["../../../../../../src/streaming/protection/models/ProtectionModel.js"],"names":["ProtectionModel"],"mappings":"sEAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCA;;;;;;;;;;;;;;;GAiBA,GAAMA,iBAAkB,QAAlBA,gBAAkB,EAAY,CAAG,CAAvC,CAEA;;;;;;;;GAUA;;;;;;;;;;;;;;;;;GAmBA;;;;;;;;;;GAYA;;;;;;;;;;GAYA;;;;;;;;;;;;;;;;GAkBA;;;;;;;;;;;;GAcA;;;;;;;;;;;;;GAeA;;;;;;;;;;;GAaA;;;;;;;;;;GAYA;;;;;;;;GAUA;;;;;;;;;mBAWeA,e","file":"ProtectionModel.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n\n/**\n * Defines the public interface for all ProtectionModel implementations.\n *\n * ProtectionModel implementations provide access to particular versions\n * of the Encrypted Media Extensions (EME) APIs that have been implemented\n * in a user agent.  Developers wishing to add support for a new EME version\n * found in a target user-agent should add a new instance of this interface\n * to the\n *\n * Applications should not need direct access to this object.  All interactions with\n * the protection system should be performed with\n * {@link module:ProtectionController}\n *\n * @interface ProtectionModel\n * @ignore\n */\n\nconst ProtectionModel = function () { };\n\n/**\n * Returns an array of all initialization data currently used by\n * active sessions.\n * @function\n * @instance\n * @name getAllInitData\n * @memberof ProtectionModel\n * @returns {Array.<ArrayBuffer>} an array of initialization data buffers\n */\n\n/**\n * Determine if the user-agent supports one of the given key systems and\n * content type configurations. Sends ENAME_KEY_SYSTEM_ACCESS_COMPLETE event\n * with a KeySystemAccess object as event data\n *\n * @function\n * @instance\n * @name requestKeySystemAccess\n * @memberof ProtectionModel\n *\n * @param {Array.<Object>} ksConfigurations array of desired key system\n * configurations in priority order (highest priority first)\n * @param {MediaPlayer.dependencies.protection.KeySystem} ksConfigurations.ks\n * the key system\n * @param {MediaPlayer.vo.protection.KeySystemConfiguration[]} ksConfigurations.configs\n * array of acceptable key system configurations\n * for this key system in priority order (highest priority first)\n */\n\n/**\n * Selects the key system to use for all future operations on this\n * ProtectionModel.  Sends ENAME_KEY_SYSTEM_SELECTED with no data\n *\n * @function\n * @instance\n * @name selectKeySystem\n * @memberof ProtectionModel\n * @param keySystemAccess {MediaPlayer.vo.protection.KeySystemAccess} the key\n * system access token representing a supported key system\n */\n\n/**\n * Associate this protection model with a HTMLMediaElement\n *\n * @function\n * @instance\n * @name setMediaElement\n * @memberof ProtectionModel\n * @param mediaElement {HTMLMediaElement} the media element to\n * which we should associate this protection model and all current\n * key sessions\n */\n\n/**\n * Creates a new key session using the given initData and type. Sends\n * KEY_SESSION_CREATED event with MediaPlayer.vo.protection.SessionToken\n * as data.\n *\n * @function\n * @instance\n * @name createKeySession\n * @memberof ProtectionModel\n * @param {ArrayBuffer} initData PSSH box for the currently selected\n * key system.\n * @param {ProtectionData} protData Protection data for the currently selected\n * key system.\n * @param {string} sessionType the desired session type.  One of \"temporary\",\n * \"persistent-license\", \"persistent-release-message\".  CDM implementations\n * are not required to support anything except \"temporary\"\n */\n\n/**\n * Update the given key session with a key (or any other message\n * intended for the CDM)\n *\n * @function\n * @instance\n * @name updateKeySession\n * @memberof ProtectionModel\n * @param {MediaPlayer.vo.protection.SessionToken} sessionToken the session\n * token\n * @param {ArrayBuffer} message the message that should be delivered to the CDM\n * for this session\n */\n\n/**\n * Loads the persisted key session data associated with the given sessionID\n * into a new session.  Sends KEY_SESSION_CREATED event with\n * {@MediaPlayer.vo.protection.SessionToken} as data.\n *\n * @function\n * @instance\n * @name loadKeySession\n * @memberof ProtectionModel\n * @param {string} sessionID the session ID corresponding to the persisted\n * session data to be loaded\n * @param {ArrayBuffer} the corresponding initData PSSH box for the currently\n * selected key system.\n */\n\n/**\n * Removes any persisted key session data associated with the given session.\n * Also closes the session.  Sends KEY_SESSION_REMOVED and\n * ENAME_KEY_SESSION_CLOSED with sessionID as data\n *\n * @function\n * @instance\n * @name removeKeySession\n * @memberof ProtectionModel\n * @param {SessionToken} sessionToken the session\n * token\n */\n\n/**\n * Close the given session and release all associated keys.  Following\n * this call, the sessionToken becomes invalid.  Sends KEY_SESSION_CLOSED\n * with sessionID as data\n *\n * @function\n * @instance\n * @name closeKeySession\n * @memberof ProtectionModel\n * @param sessionToken the session token\n */\n\n/**\n * Sets the certificate to be used by the CDM for encrypting messages\n *\n * @function\n * @instance\n * @name setServerCertificate\n * @memberof ProtectionModel\n * @param {ArrayBuffer} serverCertificate\n */\n\n/**\n * Currently selected key system.  Will be null or undefined if no key\n * system has yet been selected\n *\n * @instance\n * @name keySystem\n * @memberof ProtectionModel\n * @readonly\n * @type MediaPlayer.dependencies.protection.KeySystem\n */\n\nexport default ProtectionModel;\n"]}