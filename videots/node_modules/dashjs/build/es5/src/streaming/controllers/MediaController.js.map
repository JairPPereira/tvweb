{"version":3,"sources":["../../../../../src/streaming/controllers/MediaController.js"],"names":["TRACK_SWITCH_MODE_NEVER_REPLACE","TRACK_SWITCH_MODE_ALWAYS_REPLACE","TRACK_SELECTION_MODE_HIGHEST_BITRATE","TRACK_SELECTION_MODE_WIDEST_RANGE","DEFAULT_INIT_TRACK_SELECTION_MODE","MediaController","context","eventBus","getInstance","instance","logger","tracks","initialSettings","selectionMode","switchMode","domStorage","validTrackSwitchModes","validTrackSelectionModes","setup","getLogger","reset","checkInitialMediaSettingsForType","type","streamInfo","settings","getInitialSettings","tracksForType","getTracksFor","Constants","FRAGMENTED_TEXT","setTrack","getSavedMediaSettings","setInitialSettings","length","forEach","track","matchSettings","push","selectInitialTrack","addTrack","mediaType","isMultiTrackSupportedByType","streamId","id","createTrackInfo","mediaTracks","list","i","len","isTracksEqual","initSettings","getCurrentTrackFor","current","isCurrentTrack","trigger","Events","CURRENT_TRACK_CHANGED","oldMediaInfo","newMediaInfo","extractSettings","storeLastSettings","roles","role","accessibility","audioChannelConfiguration","setSavedMediaSettings","value","setSwitchMode","mode","isModeSupported","indexOf","warn","getSwitchMode","setSelectionModeForInitialTrack","getSelectionModeForInitialTrack","AUDIO","VIDEO","TEXT","IMAGE","t1","t2","sameId","sameViewpoint","viewpoint","sameLang","lang","sameRoles","toString","sameAccessibility","sameAudioChannelConfiguration","setConfig","config","resetInitialSettings","resetSwitchMode","mediaInfo","notEmpty","matchLang","match","matchViewPoint","matchRole","filter","item","matchAccessibility","matchAudioChannelConfiguration","audio","video","tmpArr","getTracksWithHighestBitrate","trackArr","max","result","tmp","Math","apply","bitrateList","map","obj","bandwidth","getTracksWithWidestRange","representationCount","text","fragmentedText","image","__dashjs_factory_name","factory","FactoryMaker","getSingletonFactory","updateSingletonFactory"],"mappings":"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","file":"MediaController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport Events from '../../core/events/Events';\nimport EventBus from '../../core/EventBus';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nconst TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace';\nconst TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';\nconst TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';\nconst TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';\nconst DEFAULT_INIT_TRACK_SELECTION_MODE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;\n\nfunction MediaController() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logger,\n        tracks,\n        initialSettings,\n        selectionMode,\n        switchMode,\n        domStorage;\n\n    const validTrackSwitchModes = [\n        TRACK_SWITCH_MODE_ALWAYS_REPLACE,\n        TRACK_SWITCH_MODE_NEVER_REPLACE\n    ];\n\n    const validTrackSelectionModes = [\n        TRACK_SELECTION_MODE_HIGHEST_BITRATE,\n        TRACK_SELECTION_MODE_WIDEST_RANGE\n    ];\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        reset();\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @memberof MediaController#\n     */\n    function checkInitialMediaSettingsForType(type, streamInfo) {\n        let settings = getInitialSettings(type);\n        const tracksForType = getTracksFor(type, streamInfo);\n        const tracks = [];\n\n        if (type === Constants.FRAGMENTED_TEXT) {\n            // Choose the first track\n            setTrack(tracksForType[0]);\n            return;\n        }\n\n        if (!settings) {\n            settings = domStorage.getSavedMediaSettings(type);\n            setInitialSettings(type, settings);\n        }\n\n        if (!tracksForType || (tracksForType.length === 0)) return;\n\n        if (settings) {\n            tracksForType.forEach(function (track) {\n                if (matchSettings(settings, track)) {\n                    tracks.push(track);\n                }\n            });\n        }\n\n        if (tracks.length === 0) {\n            setTrack(selectInitialTrack(tracksForType));\n        } else {\n            if (tracks.length > 1) {\n                setTrack(selectInitialTrack(tracks));\n            } else {\n                setTrack(tracks[0]);\n            }\n        }\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @memberof MediaController#\n     */\n    function addTrack(track) {\n        if (!track) return;\n\n        const mediaType = track.type;\n        if (!isMultiTrackSupportedByType(mediaType)) return;\n\n        let streamId = track.streamInfo.id;\n        if (!tracks[streamId]) {\n            tracks[streamId] = createTrackInfo();\n        }\n\n        const mediaTracks = tracks[streamId][mediaType].list;\n        for (let i = 0, len = mediaTracks.length; i < len; ++i) {\n            //track is already set.\n            if (isTracksEqual(mediaTracks[i], track)) {\n                return;\n            }\n        }\n\n        mediaTracks.push(track);\n\n        let initSettings = getInitialSettings(mediaType);\n        if (initSettings && (matchSettings(initSettings, track)) && !getCurrentTrackFor(mediaType, track.streamInfo)) {\n            setTrack(track);\n        }\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @returns {Array}\n     * @memberof MediaController#\n     */\n    function getTracksFor(type, streamInfo) {\n        if (!type || !streamInfo) return [];\n\n        const id = streamInfo.id;\n\n        if (!tracks[id] || !tracks[id][type]) return [];\n\n        return tracks[id][type].list;\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @returns {Object|null}\n     * @memberof MediaController#\n     */\n    function getCurrentTrackFor(type, streamInfo) {\n        if (!type || !streamInfo || (streamInfo && !tracks[streamInfo.id])) return null;\n        return tracks[streamInfo.id][type].current;\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isCurrentTrack(track) {\n        if (!track) {\n            return false;\n        }\n        const type = track.type;\n        const id = track.streamInfo.id;\n\n        return (tracks[id] && tracks[id][type] && isTracksEqual(tracks[id][type].current, track));\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @memberof MediaController#\n     */\n    function setTrack(track) {\n        if (!track || !track.streamInfo) return;\n\n        const type = track.type;\n        const streamInfo = track.streamInfo;\n        const id = streamInfo.id;\n        const current = getCurrentTrackFor(type, streamInfo);\n\n        if (!tracks[id] || !tracks[id][type] || isTracksEqual(track, current)) return;\n\n        tracks[id][type].current = track;\n\n        if (tracks[id][type].current) {\n            eventBus.trigger(Events.CURRENT_TRACK_CHANGED, {oldMediaInfo: current, newMediaInfo: track, switchMode: switchMode[type]});\n        }\n\n        let settings = extractSettings(track);\n\n        if (!settings || !tracks[id][type].storeLastSettings) return;\n\n        if (settings.roles) {\n            settings.role = settings.roles[0];\n            delete settings.roles;\n        }\n\n        if (settings.accessibility) {\n            settings.accessibility = settings.accessibility[0];\n        }\n\n        if (settings.audioChannelConfiguration) {\n            settings.audioChannelConfiguration = settings.audioChannelConfiguration[0];\n        }\n\n        domStorage.setSavedMediaSettings(type, settings);\n    }\n\n    /**\n     * @param {string} type\n     * @param {Object} value\n     * @memberof MediaController#\n     */\n    function setInitialSettings(type, value) {\n        if (!type || !value) return;\n\n        initialSettings[type] = value;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {Object|null}\n     * @memberof MediaController#\n     */\n    function getInitialSettings(type) {\n        if (!type) return null;\n\n        return initialSettings[type];\n    }\n\n    /**\n     * @param {string} type\n     * @param {string} mode\n     * @memberof MediaController#\n     */\n    function setSwitchMode(type, mode) {\n        const isModeSupported = (validTrackSwitchModes.indexOf(mode) !== -1);\n\n        if (!isModeSupported) {\n            logger.warn('Track switch mode is not supported: ' + mode);\n            return;\n        }\n\n        switchMode[type] = mode;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {string} mode\n     * @memberof MediaController#\n     */\n    function getSwitchMode(type) {\n        return switchMode[type];\n    }\n\n    /**\n     * @param {string} mode\n     * @memberof MediaController#\n     */\n    function setSelectionModeForInitialTrack(mode) {\n        const isModeSupported = (validTrackSelectionModes.indexOf(mode) !== -1);\n\n        if (!isModeSupported) {\n            logger.warn('Track selection mode is not supported: ' + mode);\n            return;\n        }\n        selectionMode = mode;\n    }\n\n    /**\n     * @returns {string} mode\n     * @memberof MediaController#\n     */\n    function getSelectionModeForInitialTrack() {\n        return selectionMode || DEFAULT_INIT_TRACK_SELECTION_MODE;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isMultiTrackSupportedByType(type) {\n        return (type === Constants.AUDIO || type === Constants.VIDEO || type === Constants.TEXT ||\n            type === Constants.FRAGMENTED_TEXT || type === Constants.IMAGE);\n    }\n\n    /**\n     * @param {MediaInfo} t1 - first track to compare\n     * @param {MediaInfo} t2 - second track to compare\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isTracksEqual(t1, t2) {\n        if (!t1 && !t2) {\n            return true;\n        }\n\n        if (!t1 || !t2) {\n            return false;\n        }\n\n        const sameId = t1.id === t2.id;\n        const sameViewpoint = t1.viewpoint === t2.viewpoint;\n        const sameLang = t1.lang === t2.lang;\n        const sameRoles = t1.roles.toString() === t2.roles.toString();\n        const sameAccessibility = t1.accessibility.toString() === t2.accessibility.toString();\n        const sameAudioChannelConfiguration = t1.audioChannelConfiguration.toString() === t2.audioChannelConfiguration.toString();\n\n        return (sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration);\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.domStorage) {\n            domStorage = config.domStorage;\n        }\n    }\n\n    /**\n     * @memberof MediaController#\n     */\n    function reset() {\n        tracks = {};\n        resetInitialSettings();\n        resetSwitchMode();\n    }\n\n    function extractSettings(mediaInfo) {\n        const settings = {\n            lang: mediaInfo.lang,\n            viewpoint: mediaInfo.viewpoint,\n            roles: mediaInfo.roles,\n            accessibility: mediaInfo.accessibility,\n            audioChannelConfiguration: mediaInfo.audioChannelConfiguration\n        };\n        let notEmpty = settings.lang || settings.viewpoint || (settings.role && settings.role.length > 0) ||\n        (settings.accessibility && settings.accessibility.length > 0) || (settings.audioChannelConfiguration && settings.audioChannelConfiguration.length > 0);\n\n        return notEmpty ? settings : null;\n    }\n\n    function matchSettings(settings, track) {\n        const matchLang = !settings.lang || (track.lang.match(settings.lang));\n        const matchViewPoint = !settings.viewpoint || (settings.viewpoint === track.viewpoint);\n        const matchRole = !settings.role || !!track.roles.filter(function (item) {\n            return item === settings.role;\n        })[0];\n        let matchAccessibility = !settings.accessibility || !!track.accessibility.filter(function (item) {\n            return item === settings.accessibility;\n        })[0];\n        let matchAudioChannelConfiguration = !settings.audioChannelConfiguration || !!track.audioChannelConfiguration.filter(function (item) {\n            return item === settings.audioChannelConfiguration;\n        })[0];\n\n        return (matchLang && matchViewPoint && matchRole && matchAccessibility && matchAudioChannelConfiguration);\n    }\n\n    function resetSwitchMode() {\n        switchMode = {\n            audio: TRACK_SWITCH_MODE_ALWAYS_REPLACE,\n            video: TRACK_SWITCH_MODE_NEVER_REPLACE\n        };\n    }\n\n    function resetInitialSettings() {\n        initialSettings = {\n            audio: null,\n            video: null\n        };\n    }\n\n    function selectInitialTrack(tracks) {\n        let mode = getSelectionModeForInitialTrack();\n        let tmpArr = [];\n        const getTracksWithHighestBitrate = function (trackArr) {\n            let max = 0;\n            let result = [];\n            let tmp;\n\n            trackArr.forEach(function (track) {\n                tmp = Math.max.apply(Math, track.bitrateList.map(function (obj) { return obj.bandwidth; }));\n\n                if (tmp > max) {\n                    max = tmp;\n                    result = [track];\n                } else if (tmp === max) {\n                    result.push(track);\n                }\n            });\n\n            return result;\n        };\n        const getTracksWithWidestRange = function (trackArr) {\n            let max = 0;\n            let result = [];\n            let tmp;\n\n            trackArr.forEach(function (track) {\n                tmp = track.representationCount;\n\n                if (tmp > max) {\n                    max = tmp;\n                    result = [track];\n                } else if (tmp === max) {\n                    result.push(track);\n                }\n            });\n\n            return result;\n        };\n\n        switch (mode) {\n            case TRACK_SELECTION_MODE_HIGHEST_BITRATE:\n                tmpArr = getTracksWithHighestBitrate(tracks);\n\n                if (tmpArr.length > 1) {\n                    tmpArr = getTracksWithWidestRange(tmpArr);\n                }\n                break;\n            case TRACK_SELECTION_MODE_WIDEST_RANGE:\n                tmpArr = getTracksWithWidestRange(tracks);\n\n                if (tmpArr.length > 1) {\n                    tmpArr = getTracksWithHighestBitrate(tracks);\n                }\n                break;\n            default:\n                logger.warn('Track selection mode is not supported: ' + mode);\n                break;\n        }\n\n        return tmpArr[0];\n    }\n\n    function createTrackInfo() {\n        return {\n            audio: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            video: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            text: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            fragmentedText: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            image: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            }\n        };\n    }\n\n    instance = {\n        checkInitialMediaSettingsForType: checkInitialMediaSettingsForType,\n        addTrack: addTrack,\n        getTracksFor: getTracksFor,\n        getCurrentTrackFor: getCurrentTrackFor,\n        isCurrentTrack: isCurrentTrack,\n        setTrack: setTrack,\n        setInitialSettings: setInitialSettings,\n        getInitialSettings: getInitialSettings,\n        setSwitchMode: setSwitchMode,\n        getSwitchMode: getSwitchMode,\n        setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,\n        getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,\n        isMultiTrackSupportedByType: isMultiTrackSupportedByType,\n        isTracksEqual: isTracksEqual,\n        setConfig: setConfig,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nMediaController.__dashjs_factory_name = 'MediaController';\nconst factory = FactoryMaker.getSingletonFactory(MediaController);\nfactory.TRACK_SWITCH_MODE_NEVER_REPLACE = TRACK_SWITCH_MODE_NEVER_REPLACE;\nfactory.TRACK_SWITCH_MODE_ALWAYS_REPLACE = TRACK_SWITCH_MODE_ALWAYS_REPLACE;\nfactory.TRACK_SELECTION_MODE_HIGHEST_BITRATE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;\nfactory.TRACK_SELECTION_MODE_WIDEST_RANGE = TRACK_SELECTION_MODE_WIDEST_RANGE;\nfactory.DEFAULT_INIT_TRACK_SELECTION_MODE = DEFAULT_INIT_TRACK_SELECTION_MODE;\nFactoryMaker.updateSingletonFactory(MediaController.__dashjs_factory_name, factory);\nexport default factory;\n"]}