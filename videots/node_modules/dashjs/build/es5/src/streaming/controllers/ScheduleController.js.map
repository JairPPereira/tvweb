{"version":3,"sources":["../../../../../src/streaming/controllers/ScheduleController.js"],"names":["ScheduleController","config","context","eventBus","getInstance","adapter","dashMetrics","timelineConverter","mediaPlayerModel","abrController","playbackController","streamController","textController","type","streamProcessor","mediaController","settings","instance","logger","fragmentModel","currentRepresentationInfo","initialRequest","isStopped","isFragmentProcessingInProgress","timeToLoadDelay","scheduleTimeout","seekTarget","bufferLevelRule","nextFragmentRequestRule","lastFragmentRequest","topQualityIndex","lastInitQuality","replaceRequestArray","switchTrack","bufferResetInProgress","mediaRequest","liveEdgeFinder","checkPlaybackQuality","isReplacementRequest","setup","getLogger","getIsDynamic","create","resetInitialSettings","initialize","getFragmentModel","getIsTextTrack","mimeType","on","Events","TIMED_TEXT_REQUESTED","onTimedTextRequested","QUALITY_CHANGE_REQUESTED","onQualityChanged","DATA_UPDATE_STARTED","onDataUpdateStarted","DATA_UPDATE_COMPLETED","onDataUpdateCompleted","FRAGMENT_LOADING_COMPLETED","onFragmentLoadingCompleted","STREAM_COMPLETED","onStreamCompleted","STREAM_INITIALIZED","onStreamInitialized","BUFFER_LEVEL_STATE_CHANGED","onBufferLevelStateChanged","BUFFER_CLEARED","onBufferCleared","BYTES_APPENDED_END_FRAGMENT","onBytesAppended","INIT_REQUESTED","onInitRequested","QUOTA_EXCEEDED","onQuotaExceeded","PLAYBACK_SEEKING","onPlaybackSeeking","PLAYBACK_STARTED","onPlaybackStarted","PLAYBACK_RATE_CHANGED","onPlaybackRateChanged","PLAYBACK_TIME_UPDATED","onPlaybackTimeUpdated","URL_RESOLUTION_FAILED","onURLResolutionFailed","FRAGMENT_LOADING_ABANDONED","onFragmentLoadingAbandoned","isStarted","start","isBufferingCompleted","warn","debug","createPlaylistTraceMetrics","startScheduleTimer","stop","clearTimeout","hasTopQualityChanged","id","newTopQualityIndex","getTopQualityIndexFor","info","schedule","bufferController","getBufferController","isPaused","get","streaming","scheduleWhilePaused","Constants","FRAGMENTED_TEXT","TEXT","isTextEnabled","getIsBufferingCompleted","validateExecutedFragmentRequest","isReplacement","length","streamInfo","getStreamInfo","isNaN","mediaInfo","execute","isTrackTypePresent","VIDEO","getNextFragment","quality","getSwitchMode","MediaController","TRACK_SWITCH_MODE_ALWAYS_REPLACE","switchInitData","replacement","shift","isInitializationRequest","representationId","request","getIsPruningInProgress","setSeekTarget","NaN","startTime","duration","setIndexHandlerTime","delayLoadingTime","Date","getTime","setTimeToLoadDelay","manifestInfo","isDynamic","url","executeRequest","setFragmentProcessState","lowLatencyEnabled","time","safeBufferLevel","fragmentDuration","bufferInfo","getLatestBufferInfoVO","MetricsConstants","SCHEDULING_INFO","getRequests","state","FragmentModel","FRAGMENT_MODEL_EXECUTED","threshold","indexOf","fastSwitchModeEnabled","fastSwitchEnabled","bufferLevel","getBufferLevel","abandonmentState","getAbandonmentStateFor","trackChanged","isCurrentTrack","TRACK_SWITCH_MODE_NEVER_REPLACE","qualityChanged","ABANDON_LOAD","replaceRequest","index","value","setTimeout","e","sender","getStreamProcessor","getInitRequest","switchTrackAsked","push","mediaType","getRepresentationInfo","newQuality","undefined","Error","clearPlayListTraceMetrics","PlayListTrace","REPRESENTATION_SWITCH_STOP_REASON","completeQualityChange","trigger","item","TRACK_CHANGE_RENDERED","oldMediaInfo","newMediaInfo","adaptationIndex","QUALITY_CHANGE_RENDERED","oldQuality","error","getType","convertDataToRepresentationInfo","currentRepresentation","setTimeSyncCompleted","setLiveEdgeSeekTarget","getStreamStartTime","setSeekStartTime","liveEdge","getLiveEdge","computeLiveDelay","DVRWindowSize","getFragmentRequest","ignoreIsFinished","liveStartTime","getLiveDelay","setLiveStartTime","seek","updateManifestUpdateInfo","currentTime","presentationStartTime","latency","clientTimeOffset","getClientTimeOffset","range","serviceLocation","addExecutedRequest","fragEndTime","isSeeking","getStreamId","unintended","removeExecutedRequestsAfterTime","from","syncExecutedRequestsWithBufferedRange","getBuffer","getAllBufferRanges","hasEnoughSpaceToAppend","BUFFER_EMPTY","REBUFFERING_REASON","abortRequests","streamInfoId","seekTime","DVRWindow","end","updatePlayListTraceMetrics","playbackspeed","playbackRate","toString","getBufferTarget","finalisePlayList","reason","endTime","stopreason","pushPlayListTraceMetrics","getPlaybackRate","reset","off","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"ScheduleController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport MetricsConstants from '../constants/MetricsConstants';\nimport { PlayListTrace } from '../vo/metrics/PlayList';\nimport BufferLevelRule from '../rules/scheduling/BufferLevelRule';\nimport NextFragmentRequestRule from '../rules/scheduling/NextFragmentRequestRule';\nimport FragmentModel from '../models/FragmentModel';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport MediaController from './MediaController';\nimport LiveEdgeFinder from '../utils/LiveEdgeFinder';\n\nfunction ScheduleController(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const adapter = config.adapter;\n    const dashMetrics = config.dashMetrics;\n    const timelineConverter = config.timelineConverter;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const abrController = config.abrController;\n    const playbackController = config.playbackController;\n    const streamController = config.streamController;\n    const textController = config.textController;\n    const type = config.type;\n    const streamProcessor = config.streamProcessor;\n    const mediaController = config.mediaController;\n    const settings = config.settings;\n\n    let instance,\n        logger,\n        fragmentModel,\n        currentRepresentationInfo,\n        initialRequest,\n        isStopped,\n        isFragmentProcessingInProgress,\n        timeToLoadDelay,\n        scheduleTimeout,\n        seekTarget,\n        bufferLevelRule,\n        nextFragmentRequestRule,\n        lastFragmentRequest,\n        topQualityIndex,\n        lastInitQuality,\n        replaceRequestArray,\n        switchTrack,\n        bufferResetInProgress,\n        mediaRequest,\n        liveEdgeFinder,\n        checkPlaybackQuality,\n        isReplacementRequest;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        if (playbackController && playbackController.getIsDynamic()) {\n            liveEdgeFinder = LiveEdgeFinder(context).create({\n                timelineConverter: timelineConverter\n            });\n        }\n        resetInitialSettings();\n    }\n\n    function initialize() {\n        fragmentModel = streamProcessor.getFragmentModel();\n\n        bufferLevelRule = BufferLevelRule(context).create({\n            abrController: abrController,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            textController: textController,\n            settings: settings\n        });\n\n        nextFragmentRequestRule = NextFragmentRequestRule(context).create({\n            textController: textController,\n            playbackController: playbackController\n        });\n\n        if (adapter.getIsTextTrack(config.mimeType)) {\n            eventBus.on(Events.TIMED_TEXT_REQUESTED, onTimedTextRequested, this);\n        }\n\n        //eventBus.on(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, this);\n        eventBus.on(Events.DATA_UPDATE_STARTED, onDataUpdateStarted, this);\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.on(Events.STREAM_COMPLETED, onStreamCompleted, this);\n        eventBus.on(Events.STREAM_INITIALIZED, onStreamInitialized, this);\n        eventBus.on(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\n        eventBus.on(Events.BUFFER_CLEARED, onBufferCleared, this);\n        eventBus.on(Events.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);\n        eventBus.on(Events.INIT_REQUESTED, onInitRequested, this);\n        eventBus.on(Events.QUOTA_EXCEEDED, onQuotaExceeded, this);\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\n        eventBus.on(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.on(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\n        eventBus.on(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);\n        eventBus.on(Events.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);\n        eventBus.on(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);\n    }\n\n    function isStarted() {\n        return (isStopped === false);\n    }\n\n    function start() {\n        if (!currentRepresentationInfo || streamProcessor.isBufferingCompleted()) {\n            logger.warn('Start denied to Schedule Controller');\n            return;\n        }\n        logger.debug('Schedule Controller starts');\n        createPlaylistTraceMetrics();\n        isStopped = false;\n\n        if (initialRequest) {\n            initialRequest = false;\n        }\n\n        startScheduleTimer(0);\n    }\n\n    function stop() {\n        if (isStopped) {\n            return;\n        }\n        logger.debug('Schedule Controller stops');\n        isStopped = true;\n        clearTimeout(scheduleTimeout);\n    }\n\n    function hasTopQualityChanged(type, id) {\n        topQualityIndex[id] = topQualityIndex[id] || {};\n        const newTopQualityIndex = abrController.getTopQualityIndexFor(type, id);\n\n        if (topQualityIndex[id][type] != newTopQualityIndex) {\n            logger.info('Top quality ' + type + ' index has changed from ' + topQualityIndex[id][type] + ' to ' + newTopQualityIndex);\n            topQualityIndex[id][type] = newTopQualityIndex;\n            return true;\n        }\n        return false;\n\n    }\n\n    function schedule() {\n        const bufferController = streamProcessor.getBufferController();\n        if (isStopped || isFragmentProcessingInProgress || !bufferController ||\n            (playbackController.isPaused() && !settings.get().streaming.scheduleWhilePaused) ||\n            ((type === Constants.FRAGMENTED_TEXT || type === Constants.TEXT) && !textController.isTextEnabled())) {\n            logger.debug('Schedule stop!');\n            return;\n        }\n\n        if (bufferController.getIsBufferingCompleted()) {\n            logger.debug('Schedule stop because buffering is completed!');\n            return;\n        }\n\n        validateExecutedFragmentRequest();\n\n        const isReplacement = replaceRequestArray.length > 0;\n        const streamInfo = streamProcessor.getStreamInfo();\n        if (bufferResetInProgress || isNaN(lastInitQuality) || switchTrack || isReplacement ||\n            hasTopQualityChanged(currentRepresentationInfo.mediaInfo.type, streamInfo.id) ||\n            bufferLevelRule.execute(streamProcessor, streamController.isTrackTypePresent(Constants.VIDEO))) {\n\n            const getNextFragment = function () {\n                if ((currentRepresentationInfo.quality !== lastInitQuality || switchTrack) && (!bufferResetInProgress)) {\n                    logger.debug('Quality has changed, get init request for representationid = ' + currentRepresentationInfo.id);\n                    if (switchTrack) {\n                        bufferResetInProgress = mediaController.getSwitchMode(type) === MediaController.TRACK_SWITCH_MODE_ALWAYS_REPLACE ? true : false;\n                        logger.debug('Switch track has been asked, get init request for ' + type + ' with representationid = ' + currentRepresentationInfo.id + 'bufferResetInProgress = ' + bufferResetInProgress);\n                        streamProcessor.switchInitData(currentRepresentationInfo.id, bufferResetInProgress);\n                        switchTrack = false;\n                    } else {\n                        streamProcessor.switchInitData(currentRepresentationInfo.id);\n                    }\n                    lastInitQuality = currentRepresentationInfo.quality;\n                    checkPlaybackQuality = false;\n                } else {\n                    const replacement = replaceRequestArray.shift();\n\n                    if (replacement && replacement.isInitializationRequest()) {\n                        // To be sure the specific init segment had not already been loaded\n                        streamProcessor.switchInitData(replacement.representationId);\n                        checkPlaybackQuality = false;\n                    } else {\n                        let request;\n                        // Don't schedule next fragments while pruning to avoid buffer inconsistencies\n                        if (!streamProcessor.getBufferController().getIsPruningInProgress()) {\n                            request = nextFragmentRequestRule.execute(streamProcessor, seekTarget, replacement);\n                            setSeekTarget(NaN);\n                            if (request && !replacement) {\n                                if (!isNaN(request.startTime + request.duration)) {\n                                    streamProcessor.setIndexHandlerTime(request.startTime + request.duration);\n                                }\n                                request.delayLoadingTime = new Date().getTime() + timeToLoadDelay;\n                                setTimeToLoadDelay(0);\n                            }\n                            if (!request && streamInfo.manifestInfo && streamInfo.manifestInfo.isDynamic) {\n                                logger.debug('Next fragment seems to be at the bleeding live edge and is not available yet. Rescheduling.');\n                            }\n                        }\n\n                        if (request) {\n                            logger.debug('Next fragment request url is ' + request.url);\n                            fragmentModel.executeRequest(request);\n                        } else { // Use case - Playing at the bleeding live edge and frag is not available yet. Cycle back around.\n                            setFragmentProcessState(false);\n                            startScheduleTimer(settings.get().streaming.lowLatencyEnabled ? 100 : 500);\n                        }\n                        checkPlaybackQuality = true;\n                    }\n                }\n            };\n\n            setFragmentProcessState(true);\n            if (!isReplacement && checkPlaybackQuality) {\n                abrController.checkPlaybackQuality(type);\n            }\n\n            getNextFragment();\n\n        } else {\n            startScheduleTimer(500);\n        }\n    }\n\n    function validateExecutedFragmentRequest() {\n        // Validate that the fragment request executed and appended into the source buffer is as\n        // good of quality as the current quality and is the correct media track.\n        const time = playbackController.getTime();\n        let safeBufferLevel = 1.5;\n\n        if (isNaN(currentRepresentationInfo.fragmentDuration)) { //fragmentDuration of representationInfo is not defined,\n            // call metrics function to have data in the latest scheduling info...\n            // if no metric, returns 0. In this case, rule will return false.\n            const bufferInfo = dashMetrics.getLatestBufferInfoVO(currentRepresentationInfo.mediaInfo.type, true, MetricsConstants.SCHEDULING_INFO);\n            safeBufferLevel = bufferInfo ? bufferInfo.duration * 1.5 : 1.5;\n        }\n        const request = fragmentModel.getRequests({\n            state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\n            time: time + safeBufferLevel,\n            threshold: 0\n        })[0];\n\n        if (request && replaceRequestArray.indexOf(request) === -1 && !adapter.getIsTextTrack(type)) {\n            const fastSwitchModeEnabled = settings.get().streaming.fastSwitchEnabled;\n            const bufferLevel = streamProcessor.getBufferLevel();\n            const abandonmentState = abrController.getAbandonmentStateFor(type);\n\n            // Only replace on track switch when NEVER_REPLACE\n            const trackChanged = !mediaController.isCurrentTrack(request.mediaInfo) && mediaController.getSwitchMode(request.mediaInfo.type) === MediaController.TRACK_SWITCH_MODE_NEVER_REPLACE;\n            const qualityChanged = request.quality < currentRepresentationInfo.quality;\n\n            if (fastSwitchModeEnabled && (trackChanged || qualityChanged) && bufferLevel >= safeBufferLevel && abandonmentState !== MetricsConstants.ABANDON_LOAD) {\n                replaceRequest(request);\n                isReplacementRequest = true;\n                logger.debug('Reloading outdated fragment at index: ', request.index);\n            } else if (request.quality > currentRepresentationInfo.quality && !bufferResetInProgress) {\n                // The buffer has better quality it in then what we would request so set append point to end of buffer!!\n                setSeekTarget(playbackController.getTime() + bufferLevel);\n            }\n        }\n    }\n\n    function startScheduleTimer(value) {\n        clearTimeout(scheduleTimeout);\n\n        scheduleTimeout = setTimeout(schedule, value);\n    }\n\n    function onInitRequested(e) {\n        if (!e.sender || e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        getInitRequest(currentRepresentationInfo.quality);\n    }\n\n    function setFragmentProcessState (state) {\n        if (isFragmentProcessingInProgress !== state ) {\n            isFragmentProcessingInProgress = state;\n        } else {\n            logger.debug('isFragmentProcessingInProgress is already equal to', state);\n        }\n    }\n\n    function getInitRequest(quality) {\n        const request = streamProcessor.getInitRequest(quality);\n        if (request) {\n            setFragmentProcessState(true);\n            fragmentModel.executeRequest(request);\n        }\n    }\n\n    function switchTrackAsked() {\n        switchTrack = true;\n    }\n\n    function replaceRequest(request) {\n        replaceRequestArray.push(request);\n    }\n\n    function onQualityChanged(e) {\n        if (type !== e.mediaType || streamProcessor.getStreamInfo().id !== e.streamInfo.id) {\n            return;\n        }\n\n        currentRepresentationInfo = streamProcessor.getRepresentationInfo(e.newQuality);\n\n        if (currentRepresentationInfo === null || currentRepresentationInfo === undefined) {\n            throw new Error('Unexpected error! - currentRepresentationInfo is null or undefined');\n        }\n\n        clearPlayListTraceMetrics(new Date(), PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON);\n        createPlaylistTraceMetrics();\n    }\n\n    function completeQualityChange(trigger) {\n        if (playbackController && fragmentModel) {\n            const item = fragmentModel.getRequests({\n                state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\n                time: playbackController.getTime(),\n                threshold: 0\n            })[0];\n            if (item && playbackController.getTime() >= item.startTime) {\n                if ((!lastFragmentRequest.mediaInfo || (item.mediaInfo.type === lastFragmentRequest.mediaInfo.type && item.mediaInfo.id !== lastFragmentRequest.mediaInfo.id)) && trigger) {\n                    eventBus.trigger(Events.TRACK_CHANGE_RENDERED, {\n                        mediaType: type,\n                        oldMediaInfo: lastFragmentRequest.mediaInfo,\n                        newMediaInfo: item.mediaInfo\n                    });\n                }\n                if ((item.quality !== lastFragmentRequest.quality || item.adaptationIndex !== lastFragmentRequest.adaptationIndex) && trigger) {\n                    eventBus.trigger(Events.QUALITY_CHANGE_RENDERED, {\n                        mediaType: type,\n                        oldQuality: lastFragmentRequest.quality,\n                        newQuality: item.quality\n                    });\n                }\n                lastFragmentRequest = {\n                    mediaInfo: item.mediaInfo,\n                    quality: item.quality,\n                    adaptationIndex: item.adaptationIndex\n                };\n            }\n        }\n    }\n\n    function onDataUpdateCompleted(e) {\n        if (e.error || e.sender.getType() !== streamProcessor.getType()) {\n            return;\n        }\n\n        currentRepresentationInfo = adapter.convertDataToRepresentationInfo(e.currentRepresentation);\n    }\n\n    function onStreamInitialized(e) {\n        if (!e.streamInfo || streamProcessor.getStreamInfo().id !== e.streamInfo.id) {\n            return;\n        }\n\n        currentRepresentationInfo = streamProcessor.getRepresentationInfo();\n\n        if (initialRequest) {\n            if (playbackController.getIsDynamic()) {\n                timelineConverter.setTimeSyncCompleted(true);\n                setLiveEdgeSeekTarget();\n            } else {\n                setSeekTarget(playbackController.getStreamStartTime(false));\n                streamProcessor.getBufferController().setSeekStartTime(seekTarget);\n            }\n        }\n\n        if (isStopped) {\n            start();\n        }\n    }\n\n    function setLiveEdgeSeekTarget() {\n        if (liveEdgeFinder) {\n            const liveEdge = liveEdgeFinder.getLiveEdge(streamProcessor.getRepresentationInfo());\n            const startTime = liveEdge - playbackController.computeLiveDelay(currentRepresentationInfo.fragmentDuration, currentRepresentationInfo.mediaInfo.streamInfo.manifestInfo.DVRWindowSize);\n            const request = streamProcessor.getFragmentRequest(currentRepresentationInfo, startTime, {\n                ignoreIsFinished: true\n            });\n\n            if (request) {\n                // When low latency mode is selected but browser doesn't support fetch\n                // start at the beginning of the segment to avoid consuming the whole buffer\n                if (settings.get().streaming.lowLatencyEnabled) {\n                    const liveStartTime = request.duration < mediaPlayerModel.getLiveDelay() ? request.startTime : request.startTime + request.duration - mediaPlayerModel.getLiveDelay();\n                    playbackController.setLiveStartTime(liveStartTime);\n                } else {\n                    playbackController.setLiveStartTime(request.startTime);\n                }\n            } else {\n                logger.debug('setLiveEdgeSeekTarget : getFragmentRequest returned undefined request object');\n            }\n            setSeekTarget(playbackController.getStreamStartTime(false, liveEdge));\n            streamProcessor.getBufferController().setSeekStartTime(seekTarget);\n\n            //special use case for multi period stream. If the startTime is out of the current period, send a seek command.\n            //in onPlaybackSeeking callback (StreamController), the detection of switch stream is done.\n            if (seekTarget > (currentRepresentationInfo.mediaInfo.streamInfo.start + currentRepresentationInfo.mediaInfo.streamInfo.duration)) {\n                playbackController.seek(seekTarget);\n            }\n\n            dashMetrics.updateManifestUpdateInfo({\n                currentTime: seekTarget,\n                presentationStartTime: liveEdge,\n                latency: liveEdge - seekTarget,\n                clientTimeOffset: timelineConverter.getClientTimeOffset()\n            });\n        }\n    }\n\n    function onStreamCompleted(e) {\n        if (e.fragmentModel !== fragmentModel) {\n            return;\n        }\n\n        stop();\n        setFragmentProcessState(false);\n        logger.info('Stream is complete');\n    }\n\n    function onFragmentLoadingCompleted(e) {\n        if (e.sender !== fragmentModel) {\n            return;\n        }\n        logger.info('OnFragmentLoadingCompleted - Url:', e.request ? e.request.url : 'undefined', e.request.range ?\n            ', Range:' + e.request.range : '');\n        if (adapter.getIsTextTrack(type)) {\n            setFragmentProcessState(false);\n        }\n\n        if (e.error && e.request.serviceLocation && !isStopped) {\n            replaceRequest(e.request);\n            setFragmentProcessState(false);\n            startScheduleTimer(0);\n        }\n\n        if (bufferResetInProgress) {\n            mediaRequest = e.request;\n        }\n    }\n\n    function onPlaybackTimeUpdated() {\n        completeQualityChange(true);\n    }\n\n    function onBytesAppended(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        if (bufferResetInProgress && !isNaN(e.startTime)) {\n            bufferResetInProgress = false;\n            fragmentModel.addExecutedRequest(mediaRequest);\n        }\n\n        setFragmentProcessState(false);\n        if (isReplacementRequest && !isNaN(e.startTime)) {\n            //replace requests process is in progress, call schedule in n seconds.\n            //it is done in order to not add a fragment at the new quality at the end of the buffer before replace process is over.\n            //Indeed, if schedule is called too early, the executed request tested is the same that the one tested during previous schedule (at the new quality).\n            const currentTime = playbackController.getTime();\n            const fragEndTime = e.startTime + currentRepresentationInfo.fragmentDuration;\n            const safeBufferLevel = currentRepresentationInfo.fragmentDuration * 1.5;\n            if ((currentTime + safeBufferLevel) >= fragEndTime) {\n                startScheduleTimer(0);\n            }\n            else {\n                startScheduleTimer((fragEndTime - (currentTime + safeBufferLevel)) * 1000);\n            }\n            isReplacementRequest = false;\n        } else {\n            startScheduleTimer(0);\n        }\n    }\n\n    function onFragmentLoadingAbandoned(e) {\n        if (e.streamProcessor !== streamProcessor) {\n            return;\n        }\n        logger.info('onFragmentLoadingAbandoned request: ' + e.request.url + ' has been aborted');\n        if (!playbackController.isSeeking() && !switchTrack) {\n            logger.info('onFragmentLoadingAbandoned request: ' + e.request.url + ' has to be downloaded again, origin is not seeking process or switch track call');\n            replaceRequest(e.request);\n        }\n        setFragmentProcessState(false);\n        startScheduleTimer(0);\n    }\n\n    function onDataUpdateStarted(e) {\n        if (e.sender.getType() !== streamProcessor.getType() || e.sender.getStreamId() !== streamProcessor.getStreamInfo().id) {\n            return;\n        }\n\n        stop();\n    }\n\n    function onBufferCleared(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        const streamInfo = streamProcessor.getStreamInfo();\n        if (streamInfo) {\n            if (e.unintended) {\n                // There was an unintended buffer remove, probably creating a gap in the buffer, remove every saved request\n                fragmentModel.removeExecutedRequestsAfterTime(e.from);\n            } else {\n                fragmentModel.syncExecutedRequestsWithBufferedRange(\n                    streamProcessor.getBufferController().getBuffer().getAllBufferRanges(),\n                    streamInfo.duration);\n            }\n        }\n\n        if (e.hasEnoughSpaceToAppend && isStopped) {\n            start();\n        }\n    }\n\n    function onBufferLevelStateChanged(e) {\n        if ((e.sender.getStreamProcessor() === streamProcessor) && e.state === MetricsConstants.BUFFER_EMPTY && !playbackController.isSeeking()) {\n            logger.info('Buffer is empty! Stalling!');\n            clearPlayListTraceMetrics(new Date(), PlayListTrace.REBUFFERING_REASON);\n        }\n    }\n\n    function onQuotaExceeded(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        stop();\n        setFragmentProcessState(false);\n    }\n\n    function onURLResolutionFailed() {\n        fragmentModel.abortRequests();\n        stop();\n    }\n\n    function onTimedTextRequested(e) {\n        const streamInfo = streamProcessor.getStreamInfo();\n        const streamInfoId = streamInfo ? streamInfo.id : null;\n        if (e.sender.getStreamId() !== streamInfoId) {\n            return;\n        }\n\n        //if subtitles are disabled, do not download subtitles file.\n        if (textController.isTextEnabled()) {\n            getInitRequest(e.index);\n        }\n    }\n\n    function onPlaybackStarted() {\n        if (isStopped || !settings.get().streaming.scheduleWhilePaused) {\n            start();\n        }\n    }\n\n    function onPlaybackSeeking(e) {\n        setSeekTarget(e.seekTime);\n        setTimeToLoadDelay(0);\n\n        if (isStopped) {\n            start();\n        }\n\n        const latency = currentRepresentationInfo.DVRWindow && playbackController ? currentRepresentationInfo.DVRWindow.end - playbackController.getTime() : NaN;\n        dashMetrics.updateManifestUpdateInfo({\n            latency: latency\n        });\n\n        //if, during the seek command, the scheduleController is waiting : stop waiting, request chunk as soon as possible\n        if (!isFragmentProcessingInProgress) {\n            startScheduleTimer(0);\n        } else {\n            logger.debug('onPlaybackSeeking, call fragmentModel.abortRequests in order to seek quicker');\n            fragmentModel.abortRequests();\n        }\n    }\n\n    function onPlaybackRateChanged(e) {\n        dashMetrics.updatePlayListTraceMetrics({playbackspeed: e.playbackRate.toString()});\n    }\n\n    function setSeekTarget(value) {\n        seekTarget = value;\n    }\n\n    function setTimeToLoadDelay(value) {\n        timeToLoadDelay = value;\n    }\n\n    function getBufferTarget() {\n        return bufferLevelRule.getBufferTarget(streamProcessor, streamController.isTrackTypePresent(Constants.VIDEO));\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function finalisePlayList(time, reason) {\n        clearPlayListTraceMetrics(time, reason);\n    }\n\n    function clearPlayListTraceMetrics(endTime, stopreason) {\n        dashMetrics.pushPlayListTraceMetrics(endTime, stopreason);\n    }\n\n    function createPlaylistTraceMetrics() {\n        if (currentRepresentationInfo) {\n            const playbackRate = playbackController.getPlaybackRate();\n            dashMetrics.createPlaylistTraceMetrics(currentRepresentationInfo.id, playbackController.getTime() * 1000, playbackRate !== null ? playbackRate.toString() : null);\n        }\n    }\n\n    function resetInitialSettings() {\n        checkPlaybackQuality = true;\n        isFragmentProcessingInProgress = false;\n        timeToLoadDelay = 0;\n        seekTarget = NaN;\n        initialRequest = true;\n        lastInitQuality = NaN;\n        lastFragmentRequest = {\n            mediaInfo: undefined,\n            quality: NaN,\n            adaptationIndex: NaN\n        };\n        topQualityIndex = {};\n        replaceRequestArray = [];\n        isStopped = true;\n        switchTrack = false;\n        bufferResetInProgress = false;\n        mediaRequest = null;\n        isReplacementRequest = false;\n    }\n\n    function reset() {\n        //eventBus.off(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);\n        eventBus.off(Events.DATA_UPDATE_STARTED, onDataUpdateStarted, this);\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\n        eventBus.off(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, this);\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.off(Events.STREAM_COMPLETED, onStreamCompleted, this);\n        eventBus.off(Events.STREAM_INITIALIZED, onStreamInitialized, this);\n        eventBus.off(Events.QUOTA_EXCEEDED, onQuotaExceeded, this);\n        eventBus.off(Events.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);\n        eventBus.off(Events.BUFFER_CLEARED, onBufferCleared, this);\n        eventBus.off(Events.INIT_REQUESTED, onInitRequested, this);\n        eventBus.off(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\n        eventBus.off(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.off(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);\n        eventBus.off(Events.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);\n        eventBus.off(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);\n        if (adapter.getIsTextTrack(type)) {\n            eventBus.off(Events.TIMED_TEXT_REQUESTED, onTimedTextRequested, this);\n        }\n\n        stop();\n        completeQualityChange(false);\n        resetInitialSettings();\n        if (liveEdgeFinder) {\n            liveEdgeFinder.reset();\n            liveEdgeFinder = null;\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        getType: getType,\n        setSeekTarget: setSeekTarget,\n        setTimeToLoadDelay: setTimeToLoadDelay,\n        replaceRequest: replaceRequest,\n        switchTrackAsked: switchTrackAsked,\n        isStarted: isStarted,\n        start: start,\n        stop: stop,\n        reset: reset,\n        getBufferTarget: getBufferTarget,\n        finalisePlayList: finalisePlayList\n    };\n\n    setup();\n\n    return instance;\n}\n\nScheduleController.__dashjs_factory_name = 'ScheduleController';\nexport default FactoryMaker.getClassFactory(ScheduleController);\n"]}