{"version":3,"sources":["../../../../../../../src/streaming/metrics/metrics/handlers/BufferLevelHandler.js"],"names":["BufferLevelHandler","config","instance","reportingController","n","name","interval","lastReportedTime","context","handlerHelpers","getInstance","storedVOs","metricsConstants","getLowestBufferLevelVO","Object","keys","map","key","reduce","a","b","level","e","intervalCallback","vo","t","report","initialize","basename","rc","n_ms","validateN","reconstructFullMetricName","setInterval","reset","clearInterval","handleNewMetric","metric","type","BUFFER_LEVEL","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"sEA+BA,0D,gJAEA,QAASA,mBAAT,CAA4BC,MAA5B,CAAoC,CAEhCA,OAASA,QAAU,EAAnB,CACA,GAAIC,gBAAJ,CACIC,0BADJ,CAEIC,QAFJ,CAGIC,WAHJ,CAIIC,eAJJ,CAKIC,uBALJ,CAOA,GAAIC,SAAU,KAAKA,OAAnB,CACA,GAAIC,gBAAiB,6BAAeD,OAAf,EAAwBE,WAAxB,EAArB,CAEA,GAAIC,WAAY,EAAhB,CAEA,GAAMC,kBAAmBX,OAAOW,gBAAhC,CAEA,QAASC,uBAAT,EAAkC,CAC9B,GAAI,CACA,MAAOC,QAAOC,IAAP,CAAYJ,SAAZ,EAAuBK,GAAvB,CACH,oBAAOL,WAAUM,GAAV,CAAP,EADG,EAELC,MAFK,CAGH,SAACC,CAAD,CAAIC,CAAJ,CAAU,CACN,MAAQD,GAAEE,KAAF,CAAUD,EAAEC,KAAb,CAAsBF,CAAtB,CAA0BC,CAAjC,CACH,CALE,CAAP,CAOH,CAAC,MAAOE,CAAP,CAAU,CACR,OACH,CACJ,CAED,QAASC,iBAAT,EAA4B,CACxB,GAAIC,IAAKX,wBAAT,CAEA,GAAIW,EAAJ,CAAQ,CACJ,GAAIjB,mBAAqBiB,GAAGC,CAA5B,CAA+B,CAC3BlB,iBAAmBiB,GAAGC,CAAtB,CACAtB,oBAAoBuB,MAApB,CAA2BrB,IAA3B,CAAiCmB,EAAjC,EACH,CACJ,CACJ,CAED,QAASG,WAAT,CAAoBC,QAApB,CAA8BC,EAA9B,CAAkCC,IAAlC,CAAwC,CACpC,GAAID,EAAJ,CAAQ,CACJ;AACA;AACAzB,EAAIK,eAAesB,SAAf,CAAyBD,IAAzB,CAAJ,CACA3B,oBAAsB0B,EAAtB,CACAxB,KAAOI,eAAeuB,yBAAf,CAAyCJ,QAAzC,CAAmDE,IAAnD,CAAP,CACAxB,SAAW2B,YAAYV,gBAAZ,CAA8BnB,CAA9B,CAAX,CACH,CACJ,CAED,QAAS8B,MAAT,EAAiB,CACbC,cAAc7B,QAAd,EACAA,SAAW,IAAX,CACAF,EAAI,CAAJ,CACAD,oBAAsB,IAAtB,CACAI,iBAAmB,IAAnB,CACH,CAED,QAAS6B,gBAAT,CAAyBC,MAAzB,CAAiCb,EAAjC,CAAqCc,IAArC,CAA2C,CACvC,GAAID,SAAWzB,iBAAiB2B,YAAhC,CAA8C,CAC1C5B,UAAU2B,IAAV,EAAkBd,EAAlB,CACH,CACJ,CAEDtB,SAAW,CACPyB,WAAoBA,UADb,CAEPO,MAAoBA,KAFb,CAGPE,gBAAoBA,eAHb,CAAX,CAMA,MAAOlC,SAAP,CACH,CA3GD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6GAF,mBAAmBwC,qBAAnB,CAA2C,oBAA3C,C,gBACeC,OAAOC,YAAP,CAAoBC,eAApB,CAAoC3C,kBAApC,C,CAAyD","file":"BufferLevelHandler.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction BufferLevelHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController,\n        n,\n        name,\n        interval,\n        lastReportedTime;\n\n    let context = this.context;\n    let handlerHelpers = HandlerHelpers(context).getInstance();\n\n    let storedVOs = [];\n\n    const metricsConstants = config.metricsConstants;\n\n    function getLowestBufferLevelVO() {\n        try {\n            return Object.keys(storedVOs).map(\n                key => storedVOs[key]\n            ).reduce(\n                (a, b) => {\n                    return (a.level < b.level) ? a : b;\n                }\n            );\n        } catch (e) {\n            return;\n        }\n    }\n\n    function intervalCallback() {\n        let vo = getLowestBufferLevelVO();\n\n        if (vo) {\n            if (lastReportedTime !== vo.t) {\n                lastReportedTime = vo.t;\n                reportingController.report(name, vo);\n            }\n        }\n    }\n\n    function initialize(basename, rc, n_ms) {\n        if (rc) {\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n            reportingController = rc;\n            name = handlerHelpers.reconstructFullMetricName(basename, n_ms);\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = 0;\n        reportingController = null;\n        lastReportedTime = null;\n    }\n\n    function handleNewMetric(metric, vo, type) {\n        if (metric === metricsConstants.BUFFER_LEVEL) {\n            storedVOs[type] = vo;\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nBufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';\nexport default dashjs.FactoryMaker.getClassFactory(BufferLevelHandler); /* jshint ignore:line */\n"]}