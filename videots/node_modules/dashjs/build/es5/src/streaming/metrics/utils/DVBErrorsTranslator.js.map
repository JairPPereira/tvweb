{"version":3,"sources":["../../../../../../src/streaming/metrics/utils/DVBErrorsTranslator.js"],"names":["DVBErrorsTranslator","config","instance","mpd","eventBus","dashMetrics","metricsConstants","Events","events","report","vo","o","DVBErrors","key","hasOwnProperty","mpdurl","originalUrl","url","terror","Date","addDVBErrors","onManifestUpdate","e","error","manifest","onServiceLocationChanged","errorcode","BASE_URL_CHANGED","servicelocation","entry","onBecameReporter","BECAME_REPORTER","handleHttpMetric","responsecode","CONNECTION_ERROR","tresponse","_serviceLocation","onMetricEvent","metric","HTTP_REQUEST","value","onPlaybackError","reason","code","MediaError","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","CORRUPT_MEDIA_OTHER","initialise","on","MANIFEST_UPDATED","SERVICE_LOCATION_BLACKLIST_CHANGED","METRIC_ADDED","METRIC_UPDATED","PLAYBACK_ERROR","MetricsReportingEvents","BECAME_REPORTING_PLAYER","reset","off","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"DVBErrorsTranslator.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrors from '../vo/DVBErrors';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\n\nfunction DVBErrorsTranslator(config) {\n\n    config = config || {};\n    let instance,\n        mpd;\n    const eventBus = config.eventBus;\n    const dashMetrics = config.dashMetrics;\n    const metricsConstants = config.metricsConstants;\n    //MediaPlayerEvents have been added to Events in MediaPlayer class\n    const Events = config.events;\n\n    function report(vo) {\n        let o = new DVBErrors();\n\n        if (!mpd) {\n            return;\n        }\n\n        for (const key in vo) {\n            if (vo.hasOwnProperty(key)) {\n                o[key] = vo[key];\n            }\n        }\n\n        if (!o.mpdurl) {\n            o.mpdurl = mpd.originalUrl || mpd.url;\n        }\n\n        if (!o.terror) {\n            o.terror = new Date();\n        }\n\n        dashMetrics.addDVBErrors(o);\n    }\n\n    function onManifestUpdate(e) {\n        if (e.error) {\n            return;\n        }\n\n        mpd = e.manifest;\n    }\n\n    function onServiceLocationChanged(e) {\n        report({\n            errorcode:          DVBErrors.BASE_URL_CHANGED,\n            servicelocation:    e.entry\n        });\n    }\n\n    function onBecameReporter() {\n        report({\n            errorcode: DVBErrors.BECAME_REPORTER\n        });\n    }\n\n    function handleHttpMetric(vo) {\n        if ((vo.responsecode === 0) ||      // connection failure - unknown\n                (vo.responsecode >= 400) || // HTTP error status code\n                (vo.responsecode < 100) ||  // unknown status codes\n                (vo.responsecode >= 600)) { // unknown status codes\n            report({\n                errorcode:          vo.responsecode || DVBErrors.CONNECTION_ERROR,\n                url:                vo.url,\n                terror:             vo.tresponse,\n                servicelocation:    vo._serviceLocation\n            });\n        }\n    }\n\n    function onMetricEvent(e) {\n        switch (e.metric) {\n        case metricsConstants.HTTP_REQUEST:\n            handleHttpMetric(e.value);\n            break;\n        default:\n            break;\n        }\n    }\n\n    function onPlaybackError(e) {\n        let reason = e.error ? e.error.code : 0;\n        let errorcode;\n\n        switch (reason) {\n            case MediaError.MEDIA_ERR_NETWORK:\n                errorcode = DVBErrors.CONNECTION_ERROR;\n                break;\n            case MediaError.MEDIA_ERR_DECODE:\n                errorcode = DVBErrors.CORRUPT_MEDIA_OTHER;\n                break;\n            default:\n                return;\n        }\n\n        report({\n            errorcode: errorcode\n        });\n    }\n\n    function initialise() {\n        eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.on(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.on(Events.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.on(Events.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.on(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.on(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.off(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.off(Events.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.off(Events.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.off(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.off(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    instance = {\n        initialise: initialise,\n        reset:      reset\n    };\n\n    initialise();\n\n    return instance;\n}\n\nDVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';\nexport default dashjs.FactoryMaker.getSingletonFactory(DVBErrorsTranslator); /* jshint ignore:line */\n"]}