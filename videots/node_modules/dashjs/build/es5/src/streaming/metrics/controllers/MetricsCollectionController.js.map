{"version":3,"sources":["../../../../../../src/streaming/metrics/controllers/MetricsCollectionController.js"],"names":["MetricsCollectionController","config","metricsControllers","context","eventBus","events","update","e","error","controllersToRemove","Object","keys","metrics","getInstance","adapter","constants","getMetrics","manifest","forEach","key","JSON","stringify","m","hasOwnProperty","controller","create","initialize","splice","c","reset","trigger","MetricsReportingEvents","METRICS_INITIALISATION_COMPLETE","resetMetricsControllers","setup","on","MANIFEST_UPDATED","STREAM_TEARDOWN_COMPLETE","off","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"sEA+BA,sD,mEACA,yD,+DACA,iE,gKAEA,QAASA,4BAAT,CAAqCC,MAArC,CAA6C,CAEzCA,OAASA,QAAU,EAAnB,CACA,GAAIC,oBAAqB,EAAzB,CAEA,GAAIC,SAAU,KAAKA,OAAnB,CACA,GAAIC,UAAWH,OAAOG,QAAtB,CACA,GAAMC,QAASJ,OAAOI,MAAtB,CAEA,QAASC,OAAT,CAAgBC,CAAhB,CAAmB,CACf,GAAIA,EAAEC,KAAN,CAAa,CACT,OACH,CAED;AACA,GAAIC,qBAAsBC,OAAOC,IAAP,CAAYT,kBAAZ,CAA1B,CAEA,GAAMU,SAAU,8BAAgBT,OAAhB,EAAyBU,WAAzB,CAAqC,CACjDC,QAASb,OAAOa,OADiC,CAEjDC,UAAWd,OAAOc,SAF+B,CAArC,EAGbC,UAHa,CAGFT,EAAEU,QAHA,CAAhB,CAKAL,QAAQM,OAAR,CAAgB,WAAK,CACjB,GAAMC,KAAMC,KAAKC,SAAL,CAAeC,CAAf,CAAZ,CAEA,GAAI,CAACpB,mBAAmBqB,cAAnB,CAAkCJ,GAAlC,CAAL,CAA6C,CACzC,GAAI,CACA,GAAIK,YAAa,gCAAkBrB,OAAlB,EAA2BsB,MAA3B,CAAkCxB,MAAlC,CAAjB,CACAuB,WAAWE,UAAX,CAAsBJ,CAAtB,EACApB,mBAAmBiB,GAAnB,EAA0BK,UAA1B,CACH,CAAC,MAAOjB,CAAP,CAAU,CACR;AACH,CACJ,CARD,IAQO,CACH;AACAE,oBAAoBkB,MAApB,CAA2BR,GAA3B,CAAgC,CAAhC,EACH,CACJ,CAfD,EAiBA;AACAV,oBAAoBS,OAApB,CAA4B,WAAK,CAC7BhB,mBAAmB0B,CAAnB,EAAsBC,KAAtB,GACA,MAAO3B,oBAAmB0B,CAAnB,CAAP,CACH,CAHD,EAKAxB,SAAS0B,OAAT,CACIC,iCAAuBC,+BAD3B,EAGH,CAED,QAASC,wBAAT,EAAmC,CAC/BvB,OAAOC,IAAP,CAAYT,kBAAZ,EAAgCgB,OAAhC,CAAwC,aAAO,CAC3ChB,mBAAmBiB,GAAnB,EAAwBU,KAAxB,GACH,CAFD,EAIA3B,mBAAqB,EAArB,CACH,CAED,QAASgC,MAAT,EAAiB,CACb9B,SAAS+B,EAAT,CAAY9B,OAAO+B,gBAAnB,CAAqC9B,MAArC,EACAF,SAAS+B,EAAT,CAAY9B,OAAOgC,wBAAnB,CAA6CJ,uBAA7C,EACH,CAED,QAASJ,MAAT,EAAiB,CACbzB,SAASkC,GAAT,CAAajC,OAAO+B,gBAApB,CAAsC9B,MAAtC,EACAF,SAASkC,GAAT,CAAajC,OAAOgC,wBAApB,CAA8CJ,uBAA9C,EACH,CAEDC,QAEA,MAAO,CACHL,MAAOA,KADJ,CAAP,CAGH,CA5GD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8GA7B,4BAA4BuC,qBAA5B,CAAoD,6BAApD,C,gBACeC,OAAOC,YAAP,CAAoBC,eAApB,CAAoC1C,2BAApC,C,CAAkE","file":"MetricsCollectionController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsController from './MetricsController';\nimport ManifestParsing from '../utils/ManifestParsing';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\n\nfunction MetricsCollectionController(config) {\n\n    config = config || {};\n    let metricsControllers = {};\n\n    let context = this.context;\n    let eventBus = config.eventBus;\n    const events = config.events;\n\n    function update(e) {\n        if (e.error) {\n            return;\n        }\n\n        // start by assuming all existing controllers need removing\n        let controllersToRemove = Object.keys(metricsControllers);\n\n        const metrics = ManifestParsing(context).getInstance({\n            adapter: config.adapter,\n            constants: config.constants\n        }).getMetrics(e.manifest);\n\n        metrics.forEach(m => {\n            const key = JSON.stringify(m);\n\n            if (!metricsControllers.hasOwnProperty(key)) {\n                try {\n                    let controller = MetricsController(context).create(config);\n                    controller.initialize(m);\n                    metricsControllers[key] = controller;\n                } catch (e) {\n                    // fail quietly\n                }\n            } else {\n                // we still need this controller - delete from removal list\n                controllersToRemove.splice(key, 1);\n            }\n        });\n\n        // now remove the unwanted controllers\n        controllersToRemove.forEach(c => {\n            metricsControllers[c].reset();\n            delete metricsControllers[c];\n        });\n\n        eventBus.trigger(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE\n        );\n    }\n\n    function resetMetricsControllers() {\n        Object.keys(metricsControllers).forEach(key => {\n            metricsControllers[key].reset();\n        });\n\n        metricsControllers = {};\n    }\n\n    function setup() {\n        eventBus.on(events.MANIFEST_UPDATED, update);\n        eventBus.on(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);\n    }\n\n    function reset() {\n        eventBus.off(events.MANIFEST_UPDATED, update);\n        eventBus.off(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);\n    }\n\n    setup();\n\n    return {\n        reset: reset\n    };\n}\n\nMetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';\nexport default dashjs.FactoryMaker.getClassFactory(MetricsCollectionController); /* jshint ignore:line */\n"]}