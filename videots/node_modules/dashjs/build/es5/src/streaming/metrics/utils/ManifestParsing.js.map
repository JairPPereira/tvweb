{"version":3,"sources":["../../../../../../src/streaming/metrics/utils/ManifestParsing.js"],"names":["ManifestParsing","config","instance","adapter","constants","getMetricsRangeStartTime","manifest","dynamic","range","voPeriods","reportingStartTime","presentationStartTime","getAvailabilityStartTime","getRegularPeriods","length","start","hasOwnProperty","START_TIME","starttime","getMetrics","metrics","Metrics_asArray","forEach","metricEntry","Metrics","isDynamic","getIsDynamic","metric","Range_asArray","rangeEntry","Range","duration","getDuration","_useWallClockTime","push","Reporting_asArray","reportingEntry","Reporting","reporting","SCHEME_ID_URI","schemeIdUri","prop","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"ManifestParsing.js","sourcesContent":["import Metrics from '../vo/Metrics';\nimport Range from '../vo/Range';\nimport Reporting from '../vo/Reporting';\n\nfunction ManifestParsing (config) {\n    config = config || {};\n    let instance;\n    let adapter = config.adapter;\n    const constants = config.constants;\n\n    function getMetricsRangeStartTime(manifest, dynamic, range) {\n        let voPeriods,\n            reportingStartTime;\n        let presentationStartTime = 0;\n\n        if (dynamic) {\n            // For services with MPD@type='dynamic', the start time is\n            // indicated in wall clock time by adding the value of this\n            // attribute to the value of the MPD@availabilityStartTime\n            // attribute.\n            presentationStartTime = adapter.getAvailabilityStartTime(manifest) / 1000;\n        } else {\n            // For services with MPD@type='static', the start time is indicated\n            // in Media Presentation time and is relative to the PeriodStart\n            // time of the first Period in this MPD.\n            voPeriods = adapter.getRegularPeriods(manifest);\n\n            if (voPeriods.length) {\n                presentationStartTime = voPeriods[0].start;\n            }\n        }\n\n        // When not present, DASH Metrics collection is\n        // requested from the beginning of content\n        // consumption.\n        reportingStartTime = presentationStartTime;\n\n        if (range && range.hasOwnProperty(constants.START_TIME)) {\n            reportingStartTime += range.starttime;\n        }\n\n        return reportingStartTime;\n    }\n\n    function getMetrics(manifest) {\n        let metrics = [];\n\n        if (manifest && manifest.Metrics_asArray) {\n            manifest.Metrics_asArray.forEach(metric => {\n                var metricEntry = new Metrics();\n                var isDynamic = adapter.getIsDynamic(manifest);\n\n                if (metric.hasOwnProperty('metrics')) {\n                    metricEntry.metrics = metric.metrics;\n                } else {\n                    return;\n                }\n\n                if (metric.Range_asArray) {\n                    metric.Range_asArray.forEach(range => {\n                        var rangeEntry = new Range();\n\n                        rangeEntry.starttime =\n                            getMetricsRangeStartTime(manifest, isDynamic, range);\n\n                        if (range.hasOwnProperty('duration')) {\n                            rangeEntry.duration = range.duration;\n                        } else {\n                            // if not present, the value is identical to the\n                            // Media Presentation duration.\n                            rangeEntry.duration = adapter.getDuration(manifest);\n                        }\n\n                        rangeEntry._useWallClockTime = isDynamic;\n\n                        metricEntry.Range.push(rangeEntry);\n                    });\n                }\n\n                if (metric.Reporting_asArray) {\n                    metric.Reporting_asArray.forEach(reporting => {\n                        var reportingEntry = new Reporting();\n\n                        if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {\n                            reportingEntry.schemeIdUri = reporting.schemeIdUri;\n                        } else {\n                            // Invalid Reporting. schemeIdUri must be set. Ignore.\n                            return;\n                        }\n\n                        for (const prop in reporting) {\n                            if (reporting.hasOwnProperty(prop)) {\n                                reportingEntry[prop] = reporting[prop];\n                            }\n                        }\n\n                        metricEntry.Reporting.push(reportingEntry);\n                    });\n                } else {\n                    // Invalid Metrics. At least one reporting must be present. Ignore\n                    return;\n                }\n\n                metrics.push(metricEntry);\n            });\n        }\n\n        return metrics;\n    }\n\n    instance = {\n        getMetrics: getMetrics\n    };\n\n    return instance;\n}\n\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\nexport default dashjs.FactoryMaker.getSingletonFactory(ManifestParsing); /* jshint ignore:line */"]}