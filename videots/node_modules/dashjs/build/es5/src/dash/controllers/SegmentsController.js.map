{"version":3,"sources":["../../../../../src/dash/controllers/SegmentsController.js"],"names":["SegmentsController","config","context","dashMetrics","mediaPlayerModel","errHandler","baseURLController","instance","getters","segmentBaseLoader","setup","isWebM","mimeType","getInstance","setConfig","type","split","toLowerCase","initialize","isDynamic","DashConstants","SEGMENT_TIMELINE","create","SEGMENT_TEMPLATE","SEGMENT_LIST","SEGMENT_BASE","update","voRepresentation","hasInitialization","hasSegments","updateInitSegment","updateSegments","loadInitialization","loadSegments","indexRange","getSegmentsGetter","representation","segments","segmentInfoType","getSegmentByIndex","index","lastSegmentTime","getter","getSegmentByTime","time","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"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","file":"SegmentsController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport DashConstants from '../constants/DashConstants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport TimelineSegmentsGetter from '../utils/TimelineSegmentsGetter';\nimport TemplateSegmentsGetter from '../utils/TemplateSegmentsGetter';\nimport ListSegmentsGetter from '../utils/ListSegmentsGetter';\nimport SegmentBaseGetter from '../utils/SegmentBaseGetter';\n\nimport SegmentBaseLoader from '../SegmentBaseLoader';\nimport WebmSegmentBaseLoader from '../WebmSegmentBaseLoader';\n\n\nfunction SegmentsController(config) {\n    config = config || {};\n\n    const context = this.context;\n\n    const dashMetrics = config.dashMetrics;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const errHandler = config.errHandler;\n    const baseURLController = config.baseURLController;\n\n    let instance,\n        getters,\n        segmentBaseLoader;\n\n    function setup() {\n        getters = {};\n\n        segmentBaseLoader = isWebM(config.mimeType) ? WebmSegmentBaseLoader(context).getInstance() : SegmentBaseLoader(context).getInstance();\n        segmentBaseLoader.setConfig({\n            baseURLController: baseURLController,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            errHandler: errHandler\n        });\n    }\n\n    function isWebM(mimeType) {\n        const type = mimeType ? mimeType.split('/')[1] : '';\n        return 'webm' === type.toLowerCase();\n    }\n\n    function initialize(isDynamic) {\n        segmentBaseLoader.initialize();\n\n        getters[DashConstants.SEGMENT_TIMELINE] = TimelineSegmentsGetter(context).create(config, isDynamic);\n        getters[DashConstants.SEGMENT_TEMPLATE] = TemplateSegmentsGetter(context).create(config, isDynamic);\n        getters[DashConstants.SEGMENT_LIST] = ListSegmentsGetter(context).create(config, isDynamic);\n        getters[DashConstants.SEGMENT_BASE] = SegmentBaseGetter(context).create(config, isDynamic);\n    }\n\n    function update(voRepresentation, type, hasInitialization, hasSegments) {\n        if (!hasInitialization) {\n            updateInitSegment(voRepresentation);\n        }\n\n        if (!hasSegments) {\n            updateSegments(voRepresentation, type);\n        }\n    }\n\n    function updateInitSegment(voRepresentation) {\n        segmentBaseLoader.loadInitialization(voRepresentation);\n    }\n\n    function updateSegments(voRepresentation, type) {\n        segmentBaseLoader.loadSegments(voRepresentation, type, voRepresentation ? voRepresentation.indexRange : null);\n    }\n\n    function getSegmentsGetter(representation) {\n        return representation ? representation.segments ? getters[DashConstants.SEGMENT_BASE] : getters[representation.segmentInfoType] : null;\n    }\n\n    function getSegmentByIndex(representation, index, lastSegmentTime) {\n        const getter = getSegmentsGetter(representation);\n        return getter ? getter.getSegmentByIndex(representation, index, lastSegmentTime) : null;\n    }\n\n    function getSegmentByTime(representation, time) {\n        const getter = getSegmentsGetter(representation);\n        return getter ? getter.getSegmentByTime(representation, time) : null;\n    }\n\n    instance = {\n        initialize: initialize,\n        update: update,\n        getSegmentByIndex: getSegmentByIndex,\n        getSegmentByTime: getSegmentByTime\n    };\n\n    setup();\n\n    return instance;\n}\n\nSegmentsController.__dashjs_factory_name = 'SegmentsController';\nconst factory = FactoryMaker.getClassFactory(SegmentsController);\nexport default factory;\n"]}