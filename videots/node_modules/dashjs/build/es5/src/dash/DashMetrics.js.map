{"version":3,"sources":["../../../../src/dash/DashMetrics.js"],"names":["DashMetrics","config","context","instance","playListTraceMetricsClosed","playListTraceMetrics","playListMetrics","metricsModel","setup","getInstance","settings","resetInitialSettings","getCurrentRepresentationSwitch","mediaType","readOnly","metrics","getMetricsFor","getCurrent","MetricsConstants","TRACK_SWITCH","addRepresentationSwitch","t","mt","to","lto","getLatestBufferInfoVO","infoType","getCurrentBufferLevel","type","vo","BUFFER_LEVEL","Round10","round10","level","addBufferLevel","addBufferState","state","target","clearAllCurrentMetrics","getCurrentHttpRequest","httpList","HttpList","currentHttpList","httpListLastIndex","length","responsecode","getHttpRequests","addRequestsQueue","loadingRequests","executedRequests","metricName","list","getCurrentDroppedFrames","Constants","VIDEO","DROPPED_FRAMES","addDroppedFrames","quality","getCurrentSchedulingInfo","SCHEDULING_INFO","addSchedulingInfo","request","Date","startTime","availabilityStartTime","duration","range","getCurrentManifestUpdate","streamMetrics","STREAM","MANIFEST_UPDATE","updateManifestUpdateInfo","updatedFields","manifestUpdate","addManifestUpdateStreamInfo","streamInfo","id","index","start","addManifestUpdate","requestStartDate","requestEndDate","addHttpRequest","responseURL","responseStatus","responseHeaders","traces","url","serviceLocation","firstByteDate","addManifestUpdateRepresentationInfo","representation","manifestUpdateInfo","streamIndex","presentationTimeOffset","startNumber","fragmentInfoType","getCurrentDVRInfo","AUDIO","DVR_INFO","addDVRInfo","currentTime","mpd","getLatestMPDRequestHeaderValueByID","headers","httpRequestList","httpRequest","i","HTTPRequest","MPD_TYPE","parseResponseHeaders","_responseHeaders","undefined","getLatestFragmentRequestHeaderValueByID","headerStr","headerPairs","trim","split","ilen","headerPair","indexOf","substring","addPlayList","createPlaylistMetrics","mediaStartTime","startReason","PlayList","mstart","starttype","createPlaylistTraceMetrics","representationId","speed","PlayListTrace","representationid","playbackspeed","updatePlayListTraceMetrics","traceToUpdate","field","pushPlayListTraceMetrics","endTime","reason","getTime","stopreason","trace","push","addDVBErrors","errors","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"sEA8BA,2D,mDACA,gEACA,kD,yDACA,yE,iEACA,sC,2CACA,8D,yDACA,0D,mFAKA;;;;GAMA,QAASA,YAAT,CAAqBC,MAArB,CAA6B,CAEzBA,OAASA,QAAU,EAAnB,CAEA,GAAMC,SAAU,KAAKA,OAArB,CACA,GAAIC,gBAAJ,CACIC,iCADJ,CAEIC,2BAFJ,CAGIC,sBAHJ,CAKA,GAAIC,cAAeN,OAAOM,YAA1B,CAEA,QAASC,MAAT,EAAiB,CACbD,aAAeA,cAAgB,2BAAaL,OAAb,EAAsBO,WAAtB,CAAkC,CAACC,SAAUT,OAAOS,QAAlB,CAAlC,CAA/B,CACAC,uBACH,CAED,QAASA,qBAAT,EAAgC,CAC5BP,2BAA6B,IAA7B,CACAC,qBAAuB,IAAvB,CACAC,gBAAkB,IAAlB,CACH,CAED;;;;;;OAOA,QAASM,+BAAT,CAAwCC,SAAxC,CAAmDC,QAAnD,CAA6D,CACzD,GAAMC,SAAUR,aAAaS,aAAb,CAA2BH,SAA3B,CAAsCC,QAAtC,CAAhB,CACA,MAAOG,YAAWF,OAAX,CAAoBG,2BAAiBC,YAArC,CAAP,CACH,CAED;;;;;;;;OASA,QAASC,wBAAT,CAAiCP,SAAjC,CAA4CQ,CAA5C,CAA+CC,EAA/C,CAAmDC,EAAnD,CAAuDC,GAAvD,CAA4D,CACxDjB,aAAaa,uBAAb,CAAqCP,SAArC,CAAgDQ,CAAhD,CAAmDC,EAAnD,CAAuDC,EAAvD,CAA2DC,GAA3D,EACH,CAED;;;;;;;OAQA,QAASC,sBAAT,CAA+BZ,SAA/B,CAA0CC,QAA1C,CAAoDY,QAApD,CAA8D,CAC1D,GAAMX,SAAUR,aAAaS,aAAb,CAA2BH,SAA3B,CAAsCC,QAAtC,CAAhB,CACA,MAAOG,YAAWF,OAAX,CAAoBW,QAApB,CAAP,CACH,CAED;;;;;;OAOA,QAASC,sBAAT,CAA+BC,IAA/B,CAAqCd,QAArC,CAA+C,CAC3C,GAAMe,IAAKJ,sBAAsBG,IAAtB,CAA4Bd,QAA5B,CAAsCI,2BAAiBY,YAAvD,CAAX,CAEA,GAAID,EAAJ,CAAQ,CACJ,MAAOE,iBAAQC,OAAR,CAAgBH,GAAGI,KAAH,CAAW,IAA3B,CAAiC,CAAC,CAAlC,CAAP,CACH,CAED,MAAO,EAAP,CACH,CAED;;;;;;OAOA,QAASC,eAAT,CAAwBrB,SAAxB,CAAmCQ,CAAnC,CAAsCY,KAAtC,CAA6C,CACzC1B,aAAa2B,cAAb,CAA4BrB,SAA5B,CAAuCQ,CAAvC,CAA0CY,KAA1C,EACH,CAED;;;;;;OAOA,QAASE,eAAT,CAAwBtB,SAAxB,CAAmCuB,KAAnC,CAA0CC,MAA1C,CAAkD,CAC9C9B,aAAa4B,cAAb,CAA4BtB,SAA5B,CAAuCuB,KAAvC,CAA8CC,MAA9C,EACH,CAED;;;OAIA,QAASC,uBAAT,EAAmC,CAC/B/B,aAAa+B,sBAAb,GACH,CAED;;;;;;OAOA,QAASC,sBAAT,CAA+B1B,SAA/B,CAA0CC,QAA1C,CAAoD,CAChD,GAAMC,SAAUR,aAAaS,aAAb,CAA2BH,SAA3B,CAAsCC,QAAtC,CAAhB,CAEA,GAAI,CAACC,OAAL,CAAc,CACV,MAAO,KAAP,CACH,CAED,GAAMyB,UAAWzB,QAAQ0B,QAAzB,CACA,GAAIC,iBAAkB,IAAtB,CAEA,GAAIC,yBAAJ,CAEA,GAAI,CAACH,QAAD,EAAaA,SAASI,MAAT,EAAmB,CAApC,CAAuC,CACnC,MAAO,KAAP,CACH,CAEDD,kBAAoBH,SAASI,MAAT,CAAkB,CAAtC,CAEA,MAAOD,mBAAqB,CAA5B,CAA+B,CAC3B,GAAIH,SAASG,iBAAT,EAA4BE,YAAhC,CAA8C,CAC1CH,gBAAkBF,SAASG,iBAAT,CAAlB,CACA,MACH,CACDA,oBACH,CACD,MAAOD,gBAAP,CACH,CAED;;;;;OAMA,QAASI,gBAAT,CAAyBjC,SAAzB,CAAoC,CAChC,GAAME,SAAUR,aAAaS,aAAb,CAA2BH,SAA3B,CAAsC,IAAtC,CAAhB,CACA,GAAI,CAACE,OAAL,CAAc,CACV,MAAO,EAAP,CACH,CAED,MAAO,CAAC,CAACA,QAAQ0B,QAAV,CAAqB1B,QAAQ0B,QAA7B,CAAwC,EAA/C,CACH,CAED;;;;;;OAOA,QAASM,iBAAT,CAA0BlC,SAA1B,CAAqCmC,eAArC,CAAsDC,gBAAtD,CAAwE,CACpE1C,aAAawC,gBAAb,CAA8BlC,SAA9B,CAAyCmC,eAAzC,CAA0DC,gBAA1D,EACH,CAED;;;;;;OAOA,QAAShC,WAAT,CAAoBF,OAApB,CAA6BmC,UAA7B,CAAyC,CACrC,GAAI,CAACnC,OAAL,CAAc,CACV,MAAO,KAAP,CACH,CAED,GAAMoC,MAAOpC,QAAQmC,UAAR,CAAb,CAEA,GAAI,CAACC,IAAD,EAASA,KAAKP,MAAL,EAAe,CAA5B,CAA+B,CAC3B,MAAO,KAAP,CACH,CAED,MAAOO,MAAKA,KAAKP,MAAL,CAAc,CAAnB,CAAP,CACH,CAED;;;;OAKA,QAASQ,wBAAT,EAAmC,CAC/B,GAAMrC,SAAUR,aAAaS,aAAb,CAA2BqC,oBAAUC,KAArC,CAA4C,IAA5C,CAAhB,CACA,MAAOrC,YAAWF,OAAX,CAAoBG,2BAAiBqC,cAArC,CAAP,CACH,CAED;;;;OAKA,QAASC,iBAAT,CAA0BC,OAA1B,CAAmC,CAC/BlD,aAAaiD,gBAAb,CAA8BH,oBAAUC,KAAxC,CAA+CG,OAA/C,EACH,CAED;;;;;OAMA,QAASC,yBAAT,CAAkC7C,SAAlC,CAA6C,CACzC,GAAME,SAAUR,aAAaS,aAAb,CAA2BH,SAA3B,CAAsC,IAAtC,CAAhB,CACA,MAAOI,YAAWF,OAAX,CAAoBG,2BAAiByC,eAArC,CAAP,CACH,CAED;;;;;OAMA,QAASC,kBAAT,CAA2BC,OAA3B,CAAoCzB,KAApC,CAA2C,CACvC7B,aAAaqD,iBAAb,CACIC,QAAQhD,SADZ,CAEI,GAAIiD,KAAJ,EAFJ,CAGID,QAAQjC,IAHZ,CAIIiC,QAAQE,SAJZ,CAKIF,QAAQG,qBALZ,CAMIH,QAAQI,QANZ,CAOIJ,QAAQJ,OAPZ,CAQII,QAAQK,KARZ,CASI9B,KATJ,EAUH,CAED;;;;OAKA,QAAS+B,yBAAT,EAAoC,CAChC,GAAMC,eAAgB7D,aAAaS,aAAb,CAA2BqC,oBAAUgB,MAArC,CAAtB,CACA,MAAOpD,YAAWmD,aAAX,CAA0BlD,2BAAiBoD,eAA3C,CAAP,CACH,CAED;;;;OAKA,QAASC,yBAAT,CAAkCC,aAAlC,CAAiD,CAC7C,GAAMC,gBAAiB,KAAKN,wBAAL,EAAvB,CACA5D,aAAagE,wBAAb,CAAsCE,cAAtC,CAAsDD,aAAtD,EACH,CAED;;;;OAKA,QAASE,4BAAT,CAAqCC,UAArC,CAAiD,CAC7C,GAAIA,UAAJ,CAAgB,CACZ,GAAMF,gBAAiB,KAAKN,wBAAL,EAAvB,CACA5D,aAAamE,2BAAb,CAAyCD,cAAzC,CAAyDE,WAAWC,EAApE,CAAwED,WAAWE,KAAnF,CAA0FF,WAAWG,KAArG,CAA4GH,WAAWV,QAAvH,EACH,CACJ,CAED;;;;OAKA,QAASc,kBAAT,CAA2BlB,OAA3B,CAAoC,CAChCtD,aAAawE,iBAAb,CAA+B1B,oBAAUgB,MAAzC,CAAiDR,QAAQjC,IAAzD,CAA+DiC,QAAQmB,gBAAvE,CAAyFnB,QAAQoB,cAAjG,EACH,CAED;;;;;;;;OASA,QAASC,eAAT,CAAwBrB,OAAxB,CAAiCsB,WAAjC,CAA8CC,cAA9C,CAA8DC,eAA9D,CAA+EC,MAA/E,CAAuF,CACnF/E,aAAa2E,cAAb,CAA4BrB,QAAQhD,SAApC,CACI,IADJ,CAEIgD,QAAQjC,IAFZ,CAGIiC,QAAQ0B,GAHZ,CAII1B,QAAQJ,OAJZ,CAKI0B,WALJ,CAMItB,QAAQ2B,eAAR,EAA2B,IAN/B,CAOI3B,QAAQK,KAAR,EAAiB,IAPrB,CAQIL,QAAQmB,gBARZ,CASInB,QAAQ4B,aATZ,CAUI5B,QAAQoB,cAVZ,CAWIG,cAXJ,CAYIvB,QAAQI,QAZZ,CAaIoB,eAbJ,CAcIC,MAdJ,EAeH,CAED;;;;;OAMA,QAASI,oCAAT,CAA6CC,cAA7C,CAA6D9E,SAA7D,CAAwE,CACpE,GAAI8E,cAAJ,CAAoB,CAChB,GAAMC,oBAAqB,KAAKzB,wBAAL,EAA3B,CACA5D,aAAamF,mCAAb,CAAiDE,kBAAjD,CAAqED,eAAef,EAApF,CAAwFe,eAAed,KAAvG,CAA8Gc,eAAeE,WAA7H,CAA0IhF,SAA1I,CAAqJ8E,eAAeG,sBAApK,CAA4LH,eAAeI,WAA3M,CAAwNJ,eAAeK,gBAAvO,EACH,CACJ,CAED;;;;;OAMA,QAASC,kBAAT,CAA2BpF,SAA3B,CAAsC,CAClC,GAAME,SAAUF,UAAYN,aAAaS,aAAb,CAA2BH,SAA3B,CAAsC,IAAtC,CAAZ,CACZN,aAAaS,aAAb,CAA2BqC,oBAAUC,KAArC,CAA4C,IAA5C,GAAqD/C,aAAaS,aAAb,CAA2BqC,oBAAU6C,KAArC,CAA4C,IAA5C,CADzD,CAEA,MAAOjF,YAAWF,OAAX,CAAoBG,2BAAiBiF,QAArC,CAAP,CACH,CAED;;;;;;;OAQA,QAASC,WAAT,CAAoBvF,SAApB,CAA+BwF,WAA/B,CAA4CC,GAA5C,CAAiDpC,KAAjD,CAAwD,CACpD3D,aAAa6F,UAAb,CAAwBvF,SAAxB,CAAmCwF,WAAnC,CAAgDC,GAAhD,CAAqDpC,KAArD,EACH,CAED;;;;;OAMA,QAASqC,mCAAT,CAA4C3B,EAA5C,CAAgD,CAC5C,GAAI4B,SAAU,EAAd,CACA,GAAIC,uBAAJ,CACIC,kBADJ,CAEIC,QAFJ,CAIAF,gBAAkB3D,gBAAgBO,oBAAUgB,MAA1B,CAAlB,CAEA,IAAKsC,EAAIF,gBAAgB7D,MAAhB,CAAyB,CAAlC,CAAqC+D,GAAK,CAA1C,CAA6CA,GAA7C,CAAkD,CAC9CD,YAAcD,gBAAgBE,CAAhB,CAAd,CAEA,GAAID,YAAY9E,IAAZ,GAAqBgF,yBAAYC,QAArC,CAA+C,CAC3CL,QAAUM,qBAAqBJ,YAAYK,gBAAjC,CAAV,CACA,MACH,CACJ,CAED,MAAOP,SAAQ5B,EAAR,IAAgBoC,SAAhB,CAA4B,IAA5B,CAAoCR,QAAQ5B,EAAR,CAA3C,CACH,CAED;;;;;;OAOA,QAASqC,wCAAT,CAAiDrF,IAAjD,CAAuDgD,EAAvD,CAA2D,CACvD,GAAI4B,SAAU,EAAd,CACA,GAAIE,aAAcnE,sBAAsBX,IAAtB,CAA4B,IAA5B,CAAlB,CACA,GAAI8E,WAAJ,CAAiB,CACbF,QAAUM,qBAAqBJ,YAAYK,gBAAjC,CAAV,CACH,CACD,MAAOP,SAAQ5B,EAAR,IAAgBoC,SAAhB,CAA4B,IAA5B,CAAoCR,QAAQ5B,EAAR,CAA3C,CACH,CAED,QAASkC,qBAAT,CAA8BI,SAA9B,CAAyC,CACrC,GAAIV,SAAU,EAAd,CACA,GAAI,CAACU,SAAL,CAAgB,CACZ,MAAOV,QAAP,CACH,CAED;AACA;AACA,GAAIW,aAAcD,UAAUE,IAAV,GAAiBC,KAAjB,CAAuB,MAAvB,CAAlB,CACA,IAAK,GAAIV,GAAI,CAAR,CAAWW,KAAOH,YAAYvE,MAAnC,CAA2C+D,EAAIW,IAA/C,CAAqDX,GAArD,CAA0D,CACtD,GAAIY,YAAaJ,YAAYR,CAAZ,CAAjB,CACA,GAAI9B,OAAQ0C,WAAWC,OAAX,CAAmB,IAAnB,CAAZ,CACA,GAAI3C,MAAQ,CAAZ,CAAe,CACX2B,QAAQe,WAAWE,SAAX,CAAqB,CAArB,CAAwB5C,KAAxB,CAAR,EAA0C0C,WAAWE,SAAX,CAAqB5C,MAAQ,CAA7B,CAA1C,CACH,CACJ,CACD,MAAO2B,QAAP,CACH,CAED;;;OAIA,QAASkB,YAAT,EAAuB,CACnB,GAAIpH,eAAJ,CAAqB,CACjBC,aAAamH,WAAb,CAAyBpH,eAAzB,EACAA,gBAAkB,IAAlB,CACH,CACJ,CAED,QAASqH,sBAAT,CAA+BC,cAA/B,CAA+CC,WAA/C,CAA4D,CACxDvH,gBAAkB,GAAIwH,mBAAJ,EAAlB,CAEAxH,gBAAgBwE,KAAhB,CAAwB,GAAIhB,KAAJ,EAAxB,CACAxD,gBAAgByH,MAAhB,CAAyBH,cAAzB,CACAtH,gBAAgB0H,SAAhB,CAA4BH,WAA5B,CACH,CAED,QAASI,2BAAT,CAAoCC,gBAApC,CAAsDN,cAAtD,CAAsEO,KAAtE,CAA6E,CACzE,GAAI/H,6BAA+B,IAAnC,CAA0C,CACtCA,2BAA6B,KAA7B,CACAC,qBAAuB,GAAI+H,wBAAJ,EAAvB,CAEA/H,qBAAqBgI,gBAArB,CAAwCH,gBAAxC,CACA7H,qBAAqByE,KAArB,CAA6B,GAAIhB,KAAJ,EAA7B,CACAzD,qBAAqB0H,MAArB,CAA8BH,cAA9B,CACAvH,qBAAqBiI,aAArB,CAAqCH,KAArC,CACH,CACJ,CAED,QAASI,2BAAT,CAAoCC,aAApC,CAAmD,CAC/C,GAAInI,oBAAJ,CAA0B,CACtB,IAAK,GAAIoI,MAAT,GAAkBpI,qBAAlB,CAAwC,CACpCA,qBAAqBoI,KAArB,EAA8BD,cAAcC,KAAd,CAA9B,CACH,CACJ,CACJ,CAED,QAASC,yBAAT,CAAkCC,OAAlC,CAA2CC,MAA3C,CAAmD,CAC/C,GAAIxI,6BAA+B,KAA/B,EAAwCE,eAAxC,EAA2DD,oBAA3D,EAAmFA,qBAAqByE,KAA5G,CAAmH,CAC/G,GAAMf,WAAY1D,qBAAqByE,KAAvC,CACA,GAAMb,UAAW0E,QAAQE,OAAR,GAAoB9E,UAAU8E,OAAV,EAArC,CACAxI,qBAAqB4D,QAArB,CAAgCA,QAAhC,CACA5D,qBAAqByI,UAArB,CAAkCF,MAAlC,CACAtI,gBAAgByI,KAAhB,CAAsBC,IAAtB,CAA2B3I,oBAA3B,EACAD,2BAA6B,IAA7B,CACH,CACJ,CAED;;;;OAKA,QAAS6I,aAAT,CAAsBC,MAAtB,CAA8B,CAC1B3I,aAAa0I,YAAb,CAA0BC,MAA1B,EACH,CAED/I,SAAW,CACPS,+BAAgCA,8BADzB,CAEPa,sBAAuBA,qBAFhB,CAGPE,sBAAuBA,qBAHhB,CAIPY,sBAAuBA,qBAJhB,CAKPO,gBAAiBA,eALV,CAMPM,wBAAyBA,uBANlB,CAOPM,yBAA0BA,wBAPnB,CAQPuC,kBAAmBA,iBARZ,CASP9B,yBAA0BA,wBATnB,CAUP8C,wCAAyCA,uCAVlC,CAWPV,mCAAoCA,kCAX7B,CAYPnF,wBAAyBA,uBAZlB,CAaPgF,WAAYA,UAbL,CAcP7B,yBAA0BA,wBAdnB,CAePG,4BAA6BA,2BAftB,CAgBPgB,oCAAqCA,mCAhB9B,CAiBPX,kBAAmBA,iBAjBZ,CAkBPG,eAAgBA,cAlBT,CAmBPtB,kBAAmBA,iBAnBZ,CAoBPb,iBAAkBA,gBApBX,CAqBPb,eAAgBA,cArBT,CAsBPC,eAAgBA,cAtBT,CAuBPqB,iBAAkBA,gBAvBX,CAwBPkE,YAAaA,WAxBN,CAyBPuB,aAAcA,YAzBP,CA0BPtB,sBAAuBA,qBA1BhB,CA2BPM,2BAA4BA,0BA3BrB,CA4BPM,2BAA4BA,0BA5BrB,CA6BPG,yBAA0BA,wBA7BnB,CA8BPpG,uBAAwBA,sBA9BjB,CAAX,CAiCA9B,QAEA,MAAOL,SAAP,CACH,CAniBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqiBAH,YAAYmJ,qBAAZ,CAAoC,aAApC,C,gBACeC,uBAAaC,mBAAb,CAAiCrJ,WAAjC,C","file":"DashMetrics.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../streaming/constants/Constants';\nimport { HTTPRequest } from '../streaming/vo/metrics/HTTPRequest';\nimport FactoryMaker from '../core/FactoryMaker';\nimport MetricsConstants from '../streaming/constants/MetricsConstants';\nimport Round10 from './utils/Round10';\nimport MetricsModel from '../streaming/models/MetricsModel';\nimport {\n    PlayList,\n    PlayListTrace\n} from '../streaming/vo/metrics/PlayList';\n\n/**\n * @module DashMetrics\n * @ignore\n * @param {object} config\n */\n\nfunction DashMetrics(config) {\n\n    config = config || {};\n\n    const context = this.context;\n    let instance,\n        playListTraceMetricsClosed,\n        playListTraceMetrics,\n        playListMetrics;\n\n    let metricsModel = config.metricsModel;\n\n    function setup() {\n        metricsModel = metricsModel || MetricsModel(context).getInstance({settings: config.settings});\n        resetInitialSettings();\n    }\n\n    function resetInitialSettings() {\n        playListTraceMetricsClosed = true;\n        playListTraceMetrics = null;\n        playListMetrics = null;\n    }\n\n    /**\n     * @param {string} mediaType\n     * @param {boolean} readOnly\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentRepresentationSwitch(mediaType, readOnly) {\n        const metrics = metricsModel.getMetricsFor(mediaType, readOnly);\n        return getCurrent(metrics, MetricsConstants.TRACK_SWITCH);\n    }\n\n    /**\n     * @param {string} mediaType\n     * @param {Date} t time of the switch event\n     * @param {Date} mt media presentation time\n     * @param {string} to id of representation\n     * @param {string} lto if present, subrepresentation reference\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function addRepresentationSwitch(mediaType, t, mt, to, lto) {\n        metricsModel.addRepresentationSwitch(mediaType, t, mt, to, lto);\n    }\n\n    /**\n     * @param {string} mediaType\n     * @param {boolean} readOnly\n     * @param {string} infoType\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestBufferInfoVO(mediaType, readOnly, infoType) {\n        const metrics = metricsModel.getMetricsFor(mediaType, readOnly);\n        return getCurrent(metrics, infoType);\n    }\n\n    /**\n     * @param {string} type\n     * @param {boolean} readOnly\n     * @returns {number}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentBufferLevel(type, readOnly) {\n        const vo = getLatestBufferInfoVO(type, readOnly, MetricsConstants.BUFFER_LEVEL);\n\n        if (vo) {\n            return Round10.round10(vo.level / 1000, -3);\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param {string} mediaType\n     * @param {number} t\n     * @param {number} level\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function addBufferLevel(mediaType, t, level) {\n        metricsModel.addBufferLevel(mediaType, t, level);\n    }\n\n    /**\n     * @param {string} mediaType\n     * @param {string} state\n     * @param {number} target\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function addBufferState(mediaType, state, target) {\n        metricsModel.addBufferState(mediaType, state, target);\n    }\n\n    /**\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function clearAllCurrentMetrics () {\n        metricsModel.clearAllCurrentMetrics();\n    }\n\n    /**\n     * @param {string} mediaType\n     * @param {boolean} readOnly\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentHttpRequest(mediaType, readOnly) {\n        const metrics = metricsModel.getMetricsFor(mediaType, readOnly);\n\n        if (!metrics) {\n            return null;\n        }\n\n        const httpList = metrics.HttpList;\n        let currentHttpList = null;\n\n        let httpListLastIndex;\n\n        if (!httpList || httpList.length <= 0) {\n            return null;\n        }\n\n        httpListLastIndex = httpList.length - 1;\n\n        while (httpListLastIndex >= 0) {\n            if (httpList[httpListLastIndex].responsecode) {\n                currentHttpList = httpList[httpListLastIndex];\n                break;\n            }\n            httpListLastIndex--;\n        }\n        return currentHttpList;\n    }\n\n    /**\n     * @param {string} mediaType\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getHttpRequests(mediaType) {\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\n        if (!metrics) {\n            return [];\n        }\n\n        return !!metrics.HttpList ? metrics.HttpList : [];\n    }\n\n    /**\n     * @param {string} mediaType\n     * @param {Array} loadingRequests\n     * @param {Array} executedRequests\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\n        metricsModel.addRequestsQueue(mediaType, loadingRequests, executedRequests);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} metricName\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrent(metrics, metricName) {\n        if (!metrics) {\n            return null;\n        }\n\n        const list = metrics[metricName];\n\n        if (!list || list.length <= 0) {\n            return null;\n        }\n\n        return list[list.length - 1];\n    }\n\n    /**\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentDroppedFrames() {\n        const metrics = metricsModel.getMetricsFor(Constants.VIDEO, true);\n        return getCurrent(metrics, MetricsConstants.DROPPED_FRAMES);\n    }\n\n    /**\n     * @param {number} quality\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function addDroppedFrames(quality) {\n        metricsModel.addDroppedFrames(Constants.VIDEO, quality);\n    }\n\n    /**\n     * @param {string} mediaType\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentSchedulingInfo(mediaType) {\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\n        return getCurrent(metrics, MetricsConstants.SCHEDULING_INFO);\n    }\n\n    /**\n     * @param {object} request\n     * @param {string} state\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function addSchedulingInfo(request, state) {\n        metricsModel.addSchedulingInfo(\n            request.mediaType,\n            new Date(),\n            request.type,\n            request.startTime,\n            request.availabilityStartTime,\n            request.duration,\n            request.quality,\n            request.range,\n            state);\n    }\n\n    /**\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentManifestUpdate() {\n        const streamMetrics = metricsModel.getMetricsFor(Constants.STREAM);\n        return getCurrent(streamMetrics, MetricsConstants.MANIFEST_UPDATE);\n    }\n\n    /**\n     * @param {object} updatedFields fields to be updated\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function updateManifestUpdateInfo(updatedFields) {\n        const manifestUpdate = this.getCurrentManifestUpdate();\n        metricsModel.updateManifestUpdateInfo(manifestUpdate, updatedFields);\n    }\n\n    /**\n     * @param {object} streamInfo\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function addManifestUpdateStreamInfo(streamInfo) {\n        if (streamInfo) {\n            const manifestUpdate = this.getCurrentManifestUpdate();\n            metricsModel.addManifestUpdateStreamInfo(manifestUpdate, streamInfo.id, streamInfo.index, streamInfo.start, streamInfo.duration);\n        }\n    }\n\n    /**\n     * @param {object} request\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function addManifestUpdate(request) {\n        metricsModel.addManifestUpdate(Constants.STREAM, request.type, request.requestStartDate, request.requestEndDate);\n    }\n\n    /**\n     * @param {object} request\n     * @param {string} responseURL\n     * @param {number} responseStatus\n     * @param {object} responseHeaders\n     * @param {object} traces\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function addHttpRequest(request, responseURL, responseStatus, responseHeaders, traces) {\n        metricsModel.addHttpRequest(request.mediaType,\n            null,\n            request.type,\n            request.url,\n            request.quality,\n            responseURL,\n            request.serviceLocation || null,\n            request.range || null,\n            request.requestStartDate,\n            request.firstByteDate,\n            request.requestEndDate,\n            responseStatus,\n            request.duration,\n            responseHeaders,\n            traces);\n    }\n\n    /**\n     * @param {object} representation\n     * @param {string} mediaType\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function addManifestUpdateRepresentationInfo(representation, mediaType) {\n        if (representation) {\n            const manifestUpdateInfo = this.getCurrentManifestUpdate();\n            metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, representation.id, representation.index, representation.streamIndex, mediaType, representation.presentationTimeOffset, representation.startNumber, representation.fragmentInfoType);\n        }\n    }\n\n    /**\n     * @param {string} mediaType\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentDVRInfo(mediaType) {\n        const metrics = mediaType ? metricsModel.getMetricsFor(mediaType, true) :\n            metricsModel.getMetricsFor(Constants.VIDEO, true) || metricsModel.getMetricsFor(Constants.AUDIO, true);\n        return getCurrent(metrics, MetricsConstants.DVR_INFO);\n    }\n\n    /**\n     * @param {string} mediaType\n     * @param {Date} currentTime time of the switch event\n     * @param {object} mpd mpd reference\n     * @param {object} range range of the dvr info\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function addDVRInfo(mediaType, currentTime, mpd, range) {\n        metricsModel.addDVRInfo(mediaType, currentTime, mpd, range);\n    }\n\n    /**\n     * @param {string} id\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestMPDRequestHeaderValueByID(id) {\n        let headers = {};\n        let httpRequestList,\n            httpRequest,\n            i;\n\n        httpRequestList = getHttpRequests(Constants.STREAM);\n\n        for (i = httpRequestList.length - 1; i >= 0; i--) {\n            httpRequest = httpRequestList[i];\n\n            if (httpRequest.type === HTTPRequest.MPD_TYPE) {\n                headers = parseResponseHeaders(httpRequest._responseHeaders);\n                break;\n            }\n        }\n\n        return headers[id] === undefined ? null :  headers[id];\n    }\n\n    /**\n     * @param {string} type\n     * @param {string} id\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestFragmentRequestHeaderValueByID(type, id) {\n        let headers = {};\n        let httpRequest = getCurrentHttpRequest(type, true);\n        if (httpRequest) {\n            headers = parseResponseHeaders(httpRequest._responseHeaders);\n        }\n        return headers[id] === undefined ? null :  headers[id];\n    }\n\n    function parseResponseHeaders(headerStr) {\n        let headers = {};\n        if (!headerStr) {\n            return headers;\n        }\n\n        // Trim headerStr to fix a MS Edge bug with xhr.getAllResponseHeaders method\n        // which send a string starting with a \"\\n\" character\n        let headerPairs = headerStr.trim().split('\\u000d\\u000a');\n        for (let i = 0, ilen = headerPairs.length; i < ilen; i++) {\n            let headerPair = headerPairs[i];\n            let index = headerPair.indexOf('\\u003a\\u0020');\n            if (index > 0) {\n                headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function addPlayList() {\n        if (playListMetrics) {\n            metricsModel.addPlayList(playListMetrics);\n            playListMetrics = null;\n        }\n    }\n\n    function createPlaylistMetrics(mediaStartTime, startReason) {\n        playListMetrics = new PlayList();\n\n        playListMetrics.start = new Date();\n        playListMetrics.mstart = mediaStartTime;\n        playListMetrics.starttype = startReason;\n    }\n\n    function createPlaylistTraceMetrics(representationId, mediaStartTime, speed) {\n        if (playListTraceMetricsClosed === true ) {\n            playListTraceMetricsClosed = false;\n            playListTraceMetrics = new PlayListTrace();\n\n            playListTraceMetrics.representationid = representationId;\n            playListTraceMetrics.start = new Date();\n            playListTraceMetrics.mstart = mediaStartTime;\n            playListTraceMetrics.playbackspeed = speed;\n        }\n    }\n\n    function updatePlayListTraceMetrics(traceToUpdate) {\n        if (playListTraceMetrics) {\n            for (let field in playListTraceMetrics) {\n                playListTraceMetrics[field] = traceToUpdate[field];\n            }\n        }\n    }\n\n    function pushPlayListTraceMetrics(endTime, reason) {\n        if (playListTraceMetricsClosed === false && playListMetrics && playListTraceMetrics && playListTraceMetrics.start) {\n            const startTime = playListTraceMetrics.start;\n            const duration = endTime.getTime() - startTime.getTime();\n            playListTraceMetrics.duration = duration;\n            playListTraceMetrics.stopreason = reason;\n            playListMetrics.trace.push(playListTraceMetrics);\n            playListTraceMetricsClosed = true;\n        }\n    }\n\n    /**\n     * @param {object} errors\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function addDVBErrors(errors) {\n        metricsModel.addDVBErrors(errors);\n    }\n\n    instance = {\n        getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,\n        getLatestBufferInfoVO: getLatestBufferInfoVO,\n        getCurrentBufferLevel: getCurrentBufferLevel,\n        getCurrentHttpRequest: getCurrentHttpRequest,\n        getHttpRequests: getHttpRequests,\n        getCurrentDroppedFrames: getCurrentDroppedFrames,\n        getCurrentSchedulingInfo: getCurrentSchedulingInfo,\n        getCurrentDVRInfo: getCurrentDVRInfo,\n        getCurrentManifestUpdate: getCurrentManifestUpdate,\n        getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,\n        getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,\n        addRepresentationSwitch: addRepresentationSwitch,\n        addDVRInfo: addDVRInfo,\n        updateManifestUpdateInfo: updateManifestUpdateInfo,\n        addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\n        addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\n        addManifestUpdate: addManifestUpdate,\n        addHttpRequest: addHttpRequest,\n        addSchedulingInfo: addSchedulingInfo,\n        addRequestsQueue: addRequestsQueue,\n        addBufferLevel: addBufferLevel,\n        addBufferState: addBufferState,\n        addDroppedFrames: addDroppedFrames,\n        addPlayList: addPlayList,\n        addDVBErrors: addDVBErrors,\n        createPlaylistMetrics: createPlaylistMetrics,\n        createPlaylistTraceMetrics: createPlaylistTraceMetrics,\n        updatePlayListTraceMetrics: updatePlayListTraceMetrics,\n        pushPlayListTraceMetrics: pushPlayListTraceMetrics,\n        clearAllCurrentMetrics: clearAllCurrentMetrics\n    };\n\n    setup();\n\n    return instance;\n}\n\nDashMetrics.__dashjs_factory_name = 'DashMetrics';\nexport default FactoryMaker.getSingletonFactory(DashMetrics);\n"]}