{"version":3,"sources":["../../../../../src/dash/utils/Round10.js"],"names":["Round10","value","exp","_decimalAdjust","type","Math","isNaN","NaN","toString","split"],"mappings":"qtBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BA;;;;;;;;;MAUqBA,Q,wGACjB;;;;;;;6BAQeC,K,CAAOC,G,CAAK,CACvB,MAAOC,gBAAe,OAAf,CAAwBF,KAAxB,CAA+BC,GAA/B,CAAP,CACH,C,uBAGL;;;;;;;;mBAdqBF,O,CAuBrB,QAASG,eAAT,CAAwBC,IAAxB,CAA8BH,KAA9B,CAAqCC,GAArC,CAA0C,CACtC;AACA,GAAI,MAAOA,IAAP,GAAe,WAAf,EAA8B,CAACA,GAAD,GAAS,CAA3C,CAA8C,CAC1C,MAAOG,MAAKD,IAAL,EAAWH,KAAX,CAAP,CACH,CAEDA,MAAQ,CAACA,KAAT,CACAC,IAAM,CAACA,GAAP,CAEA;AACA,GAAID,QAAU,IAAV,EAAkBK,MAAML,KAAN,CAAlB,EAAkC,EAAE,MAAOC,IAAP,GAAe,QAAf,EAA2BA,IAAM,CAAN,GAAY,CAAzC,CAAtC,CAAmF,CAC/E,MAAOK,IAAP,CACH,CAED;AACAN,MAAQA,MAAMO,QAAN,GAAiBC,KAAjB,CAAuB,GAAvB,CAAR,CACAR,MAAQI,KAAKD,IAAL,EAAW,EAAEH,MAAM,CAAN,EAAW,GAAX,EAAkBA,MAAM,CAAN,EAAY,CAACA,MAAM,CAAN,CAAD,CAAYC,GAAxB,CAA+B,CAACA,GAAlD,CAAF,CAAX,CAAR,CAEA;AACAD,MAAQA,MAAMO,QAAN,GAAiBC,KAAjB,CAAuB,GAAvB,CAAR,CACA,MAAO,EAAER,MAAM,CAAN,EAAW,GAAX,EAAkBA,MAAM,CAAN,EAAY,CAACA,MAAM,CAAN,CAAD,CAAYC,GAAxB,CAA+BA,GAAjD,CAAF,CAAP,CACH","file":"Round10.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Static methods for rounding decimals\n *\n * Modified version of the CC0-licenced example at:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n *\n * @export\n * @class Round10\n * @ignore\n */\nexport default class Round10 {\n    /**\n    * Decimal round.\n    *\n    * @param {Number}  value The number.\n    * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).\n    * @returns {Number} The adjusted value.\n    * @ignore\n    */\n    static round10(value, exp) {\n        return _decimalAdjust('round', value, exp);\n    }\n}\n\n/**\n * Decimal adjustment of a number.\n *\n * @param {String}  type  The type of adjustment.\n * @param {Number}  value The number.\n * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).\n * @returns {Number} The adjusted value.\n * @ignore\n */\nfunction _decimalAdjust(type, value, exp) {\n    // If the exp is undefined or zero...\n    if (typeof exp === 'undefined' || +exp === 0) {\n        return Math[type](value);\n    }\n\n    value = +value;\n    exp = +exp;\n\n    // If the value is not a number or the exp is not an integer...\n    if (value === null || isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\n        return NaN;\n    }\n\n    // Shift\n    value = value.toString().split('e');\n    value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));\n\n    // Shift back\n    value = value.toString().split('e');\n    return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));\n}"]}