{"version":3,"sources":["../../../../../src/dash/utils/TemplateSegmentsGetter.js"],"names":["TemplateSegmentsGetter","config","isDynamic","timelineConverter","instance","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getSegmentByIndex","representation","index","template","adaptation","period","mpd","manifest","Period_asArray","AdaptationSet_asArray","Representation_asArray","SegmentTemplate","Math","max","seg","replacementTime","segmentDuration","url","media","replacementNumber","duration","availabilityWindow","segmentAvailabilityRange","isNaN","availableSegmentsNumber","ceil","end","start","getSegmentByTime","requestedTime","periodTime","calcPeriodRelativeTimeFromMpdRelativeTime","floor","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"sEA+BA,qD,yDACA,8D,mDAEA,8C,mFAEA,QAASA,uBAAT,CAAgCC,MAAhC,CAAwCC,SAAxC,CAAmD,CAC/CD,OAASA,QAAU,EAAnB,CACA,GAAME,mBAAoBF,OAAOE,iBAAjC,CAEA,GAAIC,gBAAJ,CAEA,QAASC,YAAT,EAAuB,CACnB,GAAI,CAACF,iBAAD,EAAsB,CAACA,kBAAkBG,cAAlB,CAAiC,2CAAjC,CAA3B,CAA0G,CACtG,KAAM,IAAIC,MAAJ,CAAUC,oBAAUC,oBAApB,CAAN,CACH,CACJ,CAED,QAASC,kBAAT,CAA2BC,cAA3B,CAA2CC,KAA3C,CAAkD,CAC9CP,cAEA,GAAI,CAACM,cAAL,CAAqB,CACjB,MAAO,KAAP,CACH,CAED,GAAME,UAAWF,eAAeG,UAAf,CAA0BC,MAA1B,CAAiCC,GAAjC,CAAqCC,QAArC,CAA8CC,cAA9C,CAA6DP,eAAeG,UAAf,CAA0BC,MAA1B,CAAiCH,KAA9F,EACbO,qBADa,CACSR,eAAeG,UAAf,CAA0BF,KADnC,EAC0CQ,sBAD1C,CACiET,eAAeC,KADhF,EACuFS,eADxG,CAGAT,MAAQU,KAAKC,GAAL,CAASX,KAAT,CAAgB,CAAhB,CAAR,CAEA,GAAMY,KAAM,wCAAqBrB,iBAArB,CAAwCD,SAAxC,CAAmDS,cAAnD,CAAmEC,KAAnE,CAAZ,CACA,GAAIY,GAAJ,CAAS,CACLA,IAAIC,eAAJ,CAAsB,CAACb,MAAQ,CAAT,EAAcD,eAAee,eAAnD,CAEA,GAAIC,KAAMd,SAASe,KAAnB,CACAD,IAAM,2CAAwBA,GAAxB,CAA6B,QAA7B,CAAuCH,IAAIK,iBAA3C,CAAN,CACAF,IAAM,2CAAwBA,GAAxB,CAA6B,MAA7B,CAAqCH,IAAIC,eAAzC,CAAN,CACAD,IAAII,KAAJ,CAAYD,GAAZ,CACH,CAED,GAAMG,UAAWnB,eAAee,eAAhC,CACA,GAAMK,oBAAqBpB,eAAeqB,wBAA1C,CACA,GAAIC,MAAMH,QAAN,CAAJ,CAAqB,CACjBnB,eAAeuB,uBAAf,CAAyC,CAAzC,CACH,CAFD,IAGK,CACDvB,eAAeuB,uBAAf,CAAyCZ,KAAKa,IAAL,CAAU,CAACJ,mBAAmBK,GAAnB,CAAyBL,mBAAmBM,KAA7C,EAAsDP,QAAhE,CAAzC,CACH,CAED,MAAON,IAAP,CACH,CAED,QAASc,iBAAT,CAA0B3B,cAA1B,CAA0C4B,aAA1C,CAAyD,CACrDlC,cAEA,GAAI,CAACM,cAAL,CAAqB,CACjB,MAAO,KAAP,CACH,CAED,GAAMmB,UAAWnB,eAAee,eAAhC,CAEA,GAAIO,MAAMH,QAAN,CAAJ,CAAqB,CACjB,MAAO,KAAP,CACH,CAED,GAAMU,YAAarC,kBAAkBsC,yCAAlB,CAA4D9B,cAA5D,CAA4E4B,aAA5E,CAAnB,CACA,GAAM3B,OAAQU,KAAKoB,KAAL,CAAWF,WAAaV,QAAxB,CAAd,CAEA,MAAOpB,mBAAkBC,cAAlB,CAAkCC,KAAlC,CAAP,CACH,CAEDR,SAAW,CACPM,kBAAmBA,iBADZ,CAEP4B,iBAAkBA,gBAFX,CAAX,CAKA,MAAOlC,SAAP,CACH,CA3GD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6GAJ,uBAAuB2C,qBAAvB,CAA+C,wBAA/C,CACA,GAAMC,SAAUC,uBAAaC,eAAb,CAA6B9C,sBAA7B,CAAhB,C,gBACe4C,O","file":"TemplateSegmentsGetter.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Constants from '../../streaming/constants/Constants';\n\nimport { replaceTokenForTemplate, getIndexBasedSegment } from './SegmentsUtils';\n\nfunction TemplateSegmentsGetter(config, isDynamic) {\n    config = config || {};\n    const timelineConverter = config.timelineConverter;\n\n    let instance;\n\n    function checkConfig() {\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getSegmentByIndex(representation, index) {\n        checkConfig();\n\n        if (!representation) {\n            return null;\n        }\n\n        const template = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate;\n\n        index = Math.max(index, 0);\n\n        const seg = getIndexBasedSegment(timelineConverter, isDynamic, representation, index);\n        if (seg) {\n            seg.replacementTime = (index - 1) * representation.segmentDuration;\n\n            let url = template.media;\n            url = replaceTokenForTemplate(url, 'Number', seg.replacementNumber);\n            url = replaceTokenForTemplate(url, 'Time', seg.replacementTime);\n            seg.media = url;\n        }\n\n        const duration = representation.segmentDuration;\n        const availabilityWindow = representation.segmentAvailabilityRange;\n        if (isNaN(duration)) {\n            representation.availableSegmentsNumber = 1;\n        }\n        else {\n            representation.availableSegmentsNumber = Math.ceil((availabilityWindow.end - availabilityWindow.start) / duration);\n        }\n\n        return seg;\n    }\n\n    function getSegmentByTime(representation, requestedTime) {\n        checkConfig();\n\n        if (!representation) {\n            return null;\n        }\n\n        const duration = representation.segmentDuration;\n\n        if (isNaN(duration)) {\n            return null;\n        }\n\n        const periodTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);\n        const index = Math.floor(periodTime / duration);\n\n        return getSegmentByIndex(representation, index);\n    }\n\n    instance = {\n        getSegmentByIndex: getSegmentByIndex,\n        getSegmentByTime: getSegmentByTime\n    };\n\n    return instance;\n}\n\nTemplateSegmentsGetter.__dashjs_factory_name = 'TemplateSegmentsGetter';\nconst factory = FactoryMaker.getClassFactory(TemplateSegmentsGetter);\nexport default factory;\n"]}