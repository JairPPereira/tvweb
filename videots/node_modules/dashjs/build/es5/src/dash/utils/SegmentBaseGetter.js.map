{"version":3,"sources":["../../../../../src/dash/utils/SegmentBaseGetter.js"],"names":["SegmentBaseGetter","config","timelineConverter","instance","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getSegmentByIndex","representation","index","len","segments","length","seg","availabilityIdx","i","getSegmentByTime","requestedTime","periodTime","calcPeriodRelativeTimeFromMpdRelativeTime","getIndexByTime","time","ln","idx","epsilon","frag","ft","fd","presentationStartTime","duration","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"sEA+BA,qD,yDACA,8D,sIAhCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCA,QAASA,kBAAT,CAA2BC,MAA3B,CAAmC,CAE/BA,OAASA,QAAU,EAAnB,CACA,GAAMC,mBAAoBD,OAAOC,iBAAjC,CAEA,GAAIC,gBAAJ,CAEA,QAASC,YAAT,EAAuB,CACnB,GAAI,CAACF,iBAAD,EAAsB,CAACA,kBAAkBG,cAAlB,CAAiC,2CAAjC,CAA3B,CAA0G,CACtG,KAAM,IAAIC,MAAJ,CAAUC,oBAAUC,oBAApB,CAAN,CACH,CACJ,CAED,QAASC,kBAAT,CAA2BC,cAA3B,CAA2CC,KAA3C,CAAkD,CAC9CP,cAEA,GAAI,CAACM,cAAL,CAAqB,CACjB,MAAO,KAAP,CACH,CAED,GAAME,KAAMF,eAAeG,QAAf,CAA0BH,eAAeG,QAAf,CAAwBC,MAAlD,CAA2D,CAAC,CAAxE,CACA,GAAIC,WAAJ,CACA,GAAIJ,MAAQC,GAAZ,CAAiB,CACbG,IAAML,eAAeG,QAAf,CAAwBF,KAAxB,CAAN,CACA,GAAII,KAAOA,IAAIC,eAAJ,GAAwBL,KAAnC,CAA0C,CACtC,MAAOI,IAAP,CACH,CACJ,CAED,IAAK,GAAIE,GAAI,CAAb,CAAgBA,EAAIL,GAApB,CAAyBK,GAAzB,CAA8B,CAC1BF,IAAML,eAAeG,QAAf,CAAwBI,CAAxB,CAAN,CAEA,GAAIF,KAAOA,IAAIC,eAAJ,GAAwBL,KAAnC,CAA0C,CACtC,MAAOI,IAAP,CACH,CACJ,CAED,MAAO,KAAP,CACH,CAED,QAASG,iBAAT,CAA0BR,cAA1B,CAA0CS,aAA1C,CAAyD,CACrDf,cAEA,GAAMgB,YAAalB,kBAAkBmB,yCAAlB,CAA4DX,cAA5D,CAA4ES,aAA5E,CAAnB,CACA,GAAMR,OAAQW,eAAeZ,cAAf,CAA+BU,UAA/B,CAAd,CAEA,MAAOX,mBAAkBC,cAAlB,CAAkCC,KAAlC,CAAP,CACH,CAED,QAASW,eAAT,CAAwBZ,cAAxB,CAAwCa,IAAxC,CAA8C,CAC1C,GAAI,CAACb,cAAL,CAAqB,CACjB,MAAO,CAAC,CAAR,CACH,CAED,GAAMG,UAAWH,eAAeG,QAAhC,CACA,GAAMW,IAAKX,SAAWA,SAASC,MAApB,CAA6B,IAAxC,CAEA,GAAIW,KAAM,CAAC,CAAX,CACA,GAAIC,eAAJ,CACIC,WADJ,CAEIC,SAFJ,CAGIC,SAHJ,CAIIZ,QAJJ,CAMA,GAAIJ,UAAYW,GAAK,CAArB,CAAwB,CACpB,IAAKP,EAAI,CAAT,CAAYA,EAAIO,EAAhB,CAAoBP,GAApB,CAAyB,CACrBU,KAAOd,SAASI,CAAT,CAAP,CACAW,GAAKD,KAAKG,qBAAV,CACAD,GAAKF,KAAKI,QAAV,CAEAL,QAAUG,GAAK,CAAf,CACA,GAAKN,KAAOG,OAAR,EAAoBE,EAApB,EACCL,KAAOG,OAAR,CAAoBE,GAAKC,EAD7B,CACkC,CAC9BJ,IAAME,KAAKX,eAAX,CACA,MACH,CACJ,CACJ,CAED,MAAOS,IAAP,CACH,CAEDtB,SAAW,CACPM,kBAAmBA,iBADZ,CAEPS,iBAAkBA,gBAFX,CAAX,CAKA,MAAOf,SAAP,CACH,CAEDH,kBAAkBgC,qBAAlB,CAA0C,mBAA1C,CACA,GAAMC,SAAUC,uBAAaC,eAAb,CAA6BnC,iBAA7B,CAAhB,C,gBACeiC,O","file":"SegmentBaseGetter.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Constants from '../../streaming/constants/Constants';\n\n\nfunction SegmentBaseGetter(config) {\n\n    config = config || {};\n    const timelineConverter = config.timelineConverter;\n\n    let instance;\n\n    function checkConfig() {\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getSegmentByIndex(representation, index) {\n        checkConfig();\n\n        if (!representation) {\n            return null;\n        }\n\n        const len = representation.segments ? representation.segments.length : -1;\n        let seg;\n        if (index < len) {\n            seg = representation.segments[index];\n            if (seg && seg.availabilityIdx === index) {\n                return seg;\n            }\n        }\n\n        for (let i = 0; i < len; i++) {\n            seg = representation.segments[i];\n\n            if (seg && seg.availabilityIdx === index) {\n                return seg;\n            }\n        }\n\n        return null;\n    }\n\n    function getSegmentByTime(representation, requestedTime) {\n        checkConfig();\n\n        const periodTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);\n        const index = getIndexByTime(representation, periodTime);\n\n        return getSegmentByIndex(representation, index);\n    }\n\n    function getIndexByTime(representation, time) {\n        if (!representation) {\n            return -1;\n        }\n\n        const segments = representation.segments;\n        const ln = segments ? segments.length : null;\n\n        let idx = -1;\n        let epsilon,\n            frag,\n            ft,\n            fd,\n            i;\n\n        if (segments && ln > 0) {\n            for (i = 0; i < ln; i++) {\n                frag = segments[i];\n                ft = frag.presentationStartTime;\n                fd = frag.duration;\n\n                epsilon = fd / 2;\n                if ((time + epsilon) >= ft &&\n                    (time - epsilon) < (ft + fd)) {\n                    idx = frag.availabilityIdx;\n                    break;\n                }\n            }\n        }\n\n        return idx;\n    }\n\n    instance = {\n        getSegmentByIndex: getSegmentByIndex,\n        getSegmentByTime: getSegmentByTime\n    };\n\n    return instance;\n}\n\nSegmentBaseGetter.__dashjs_factory_name = 'SegmentBaseGetter';\nconst factory = FactoryMaker.getClassFactory(SegmentBaseGetter);\nexport default factory;\n"]}